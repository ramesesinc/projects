/*
 * NewPatientPage.java
 *
 * Created on March 29, 2014, 11:15 AM
 */

package com.rameses.etracs.common;

import com.rameses.osiris2.themes.FormPage;
import com.rameses.rcp.common.CallbackHandler;
import com.rameses.rcp.framework.Binding;
import com.rameses.rcp.framework.UIEvent;
import com.rameses.rcp.framework.UIHandler;
import com.rameses.rcp.ui.UIControlAdapter;
import com.rameses.rcp.ui.annotations.StyleSheet;
import com.rameses.rcp.ui.annotations.Template;
import java.util.HashMap;

/**
 *
 * @author  Elmo
 */
@StyleSheet
public class NonLocalAddressPage extends javax.swing.JPanel {
    
    public NonLocalAddressPage() {
        initComponents();
        register( "entity" );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        xFormPanel1 = new com.rameses.rcp.control.XFormPanel();
        cboType = new com.rameses.rcp.control.XComboBox();
        txtunitno = new com.rameses.rcp.control.XTextField();
        txtbldgno = new com.rameses.rcp.control.XTextField();
        txtbldgname = new com.rameses.rcp.control.XTextField();
        txtstreet = new com.rameses.rcp.control.XTextField();
        txtsubdivision = new com.rameses.rcp.control.XTextField();
        txtbrgyname = new com.rameses.rcp.control.XTextField();
        txtmuni = new com.rameses.rcp.control.XTextField();
        txtcity = new com.rameses.rcp.control.XTextField();
        txtprov = new com.rameses.rcp.control.XTextField();
        txtpin = new com.rameses.rcp.control.XTextField();

        xFormPanel1.setCaptionWidth(100);

        cboType.setAllowNull(false);
        cboType.setCaption("Address Type");
        cboType.setCaptionWidth(120);
        cboType.setItems("addressTypes");
        cboType.setName("entity.addresstype"); // NOI18N
        cboType.setPreferredSize(new java.awt.Dimension(150, 22));
        xFormPanel1.add(cboType);

        txtunitno.setCaption("Unit No");
        txtunitno.setCaptionWidth(120);
        txtunitno.setName("entity.unitno"); // NOI18N
        txtunitno.setPreferredSize(new java.awt.Dimension(100, 22));
        txtunitno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtunitnoActionPerformed(evt);
            }
        });
        xFormPanel1.add(txtunitno);

        txtbldgno.setCaption("House / Bldg No");
        txtbldgno.setCaptionWidth(120);
        txtbldgno.setName("entity.bldgno"); // NOI18N
        txtbldgno.setPreferredSize(new java.awt.Dimension(100, 22));
        xFormPanel1.add(txtbldgno);

        txtbldgname.setCaption("Bldg Name");
        txtbldgname.setCaptionWidth(120);
        txtbldgname.setName("entity.bldgname"); // NOI18N
        txtbldgname.setPreferredSize(new java.awt.Dimension(0, 22));
        xFormPanel1.add(txtbldgname);

        txtstreet.setCaption("Street");
        txtstreet.setCaptionWidth(120);
        txtstreet.setName("entity.street"); // NOI18N
        txtstreet.setPreferredSize(new java.awt.Dimension(0, 22));
        xFormPanel1.add(txtstreet);

        txtsubdivision.setCaption("Subdivision");
        txtsubdivision.setCaptionWidth(120);
        txtsubdivision.setName("entity.subdivision"); // NOI18N
        txtsubdivision.setPreferredSize(new java.awt.Dimension(0, 22));
        xFormPanel1.add(txtsubdivision);

        txtbrgyname.setCaption("Barangay");
        txtbrgyname.setCaptionWidth(120);
        txtbrgyname.setName("entity.barangay.name"); // NOI18N
        txtbrgyname.setPreferredSize(new java.awt.Dimension(0, 22));
        xFormPanel1.add(txtbrgyname);

        txtmuni.setCaption("Municipality");
        txtmuni.setCaptionWidth(120);
        txtmuni.setDepends(new String[] {"entity.addresstype"});
        txtmuni.setName("entity.municipality"); // NOI18N
        txtmuni.setPreferredSize(new java.awt.Dimension(0, 22));
        txtmuni.setRequired(true);
        xFormPanel1.add(txtmuni);

        txtcity.setCaption("City");
        txtcity.setCaptionWidth(120);
        txtcity.setDepends(new String[] {"entity.addresstype"});
        txtcity.setName("entity.city"); // NOI18N
        txtcity.setPreferredSize(new java.awt.Dimension(0, 22));
        txtcity.setRequired(true);
        xFormPanel1.add(txtcity);

        txtprov.setCaption("Province");
        txtprov.setCaptionWidth(120);
        txtprov.setName("entity.province"); // NOI18N
        txtprov.setPreferredSize(new java.awt.Dimension(0, 22));
        txtprov.setRequired(true);
        xFormPanel1.add(txtprov);

        txtpin.setCaption("PIN");
        txtpin.setCaptionWidth(120);
        txtpin.setName("entity.pin"); // NOI18N
        txtpin.setPreferredSize(new java.awt.Dimension(0, 22));
        xFormPanel1.add(txtpin);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(xFormPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(xFormPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtunitnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtunitnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtunitnoActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.rameses.rcp.control.XComboBox cboType;
    private com.rameses.rcp.control.XTextField txtbldgname;
    private com.rameses.rcp.control.XTextField txtbldgno;
    private com.rameses.rcp.control.XTextField txtbrgyname;
    private com.rameses.rcp.control.XTextField txtcity;
    private com.rameses.rcp.control.XTextField txtmuni;
    private com.rameses.rcp.control.XTextField txtpin;
    private com.rameses.rcp.control.XTextField txtprov;
    private com.rameses.rcp.control.XTextField txtstreet;
    private com.rameses.rcp.control.XTextField txtsubdivision;
    private com.rameses.rcp.control.XTextField txtunitno;
    private com.rameses.rcp.control.XFormPanel xFormPanel1;
    // End of variables declaration//GEN-END:variables
    
    
    public void setName(String name) {
        super.setName( name );
        
        txtunitno.setName(name+".unitno");
        txtbldgno.setName(name+".bldgno");
        txtbldgname.setName(name+".bldgname");
        txtstreet.setName(name+".street");
        txtsubdivision.setName(name+".subdivision");
        txtbrgyname.setName(name+".barangay.name");
        txtmuni.setName(name+".municipality");
        txtcity.setName(name+".city");
        txtprov.setName(name+".province");
        txtpin.setName( name + ".pin"); 
        register( name );
    }
    
    private void register( String name ) {
        ControlHandlerImpl uihandler = new ControlHandlerImpl( name ); 
        txtunitno.putClientProperty(UIHandler.class, uihandler);
    }
    
    private class ControlHandlerImpl extends UIControlAdapter implements CallbackHandler {

        String name; 
        UIEvent uie; 
        
        ControlHandlerImpl( String name ) { 
            this.name = (name == null? "entity" : name); 
        }

        public void bind( UIEvent uie ) { 
            this.uie = uie; 
            if ( uie != null ) { 
                Object o = uie.getValue( name ); 
                if ( o == null ) { 
                    uie.setValue( name, new HashMap()); 
                } 
                
                Binding binding = uie.getBinding(); 
                if ( binding != null ) { 
                    binding.getValueChangeSupport().add( name+".*", this ); 
                } 
            } 
        } 

        public void unbind(UIEvent e) {
            this.uie = null; 
        }

        public void refresh( UIEvent e ) { 
            if ( uie != null ) {
                call( "" );
            }
        }

        
        // 
        // CallbackHandler implementations 
        // 
        public Object call(Object arg) { 
            if ( uie != null ) {
                StringBuilder buffer = new StringBuilder(); 
                append( buffer, " ", "unitno" );
                append( buffer, " ", "bldgno" );
                append( buffer, " ", "bldgname" );
                append( buffer, ", ", "street" );
                append( buffer, ", ", "subdivision" ); 
                append( buffer, ", ", "barangay.name" ); 
                
                String addrType = uie.getValue( name + ".addresstype" )+"";
                if ( "MUNICIPALITY".equals( addrType )) {
                    append( buffer, ", ", "municipality" ); 
                    append( buffer, ", ", "province" ); 
                } else if ( "CITY".equals( addrType )) { 
                    append( buffer, ", ", "city" ); 
                } else if ( "PROVINCE".equals( addrType )) { 
                    append( buffer, ", ", "province" ); 
                }
                
                if ( buffer.length() > 0 ) { 
                    System.out.println( buffer );
                    uie.setValue( name+".text", buffer.toString() ); 
                } else { 
                    uie.setValue( name+".text", null ); 
                } 
            } 
            return null; 
        }
        
        public Object call() { 
            return null; 
        }
        public Object call(Object[] args) {
            return null; 
        } 
        
        private void append( StringBuilder buffer, String delimiter, String property ) { 
            Object o = uie.getValue( name +"."+ property ); 
            if ( o == null ) { return; }  
            
            if ( buffer.length() > 0 ) {
                buffer.append((delimiter==null ? "" : delimiter)); 
            }             
            buffer.append( o.toString() ); 
        }
    }
    
}
