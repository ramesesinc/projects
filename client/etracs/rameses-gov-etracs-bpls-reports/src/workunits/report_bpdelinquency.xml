<workunit>
    <invokers>
        <!--
        <invoker folderid="/explorer/report/bpls" action="init" caption="Business Delinquency Listing" target="window" index="12" />
        
        <invoker type="formActions" action="_close" caption="Close" mnemonic="c" icon="images/toolbars/cancel.png" immediate="true" visibleWhen="#{mode == 'init' &amp;&amp; isViewed == false}"/>
        <invoker type="formActions" action="preview" caption="Preview" mnemonic="v" shortcut="ctrl + V" icon="images/doc-view.png" visibleWhen="#{mode == 'init' &amp;&amp; isViewed == false}"/>
        <invoker type="formActions" action="cancelPreview" caption="Cancel Preview" icon="images/toolbars/cancel.png" mnemonic="a" shortcut="ctrl + a" visibleWhen="#{mode == 'view'}" />
        
        <invoker type="formActions" action="back" caption="Back" mnemonic="b" shortcut="ctrl + B" icon="images/toolbars/back.png" visibleWhen="#{isViewed == true}"/>
        --> 
    </invokers>
    
    <code>
    <![CDATA[
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import com.rameses.osiris2.common.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.osiris2.reports.*;
        
        public class BPDelinquencyReportController
        {
            @Binding
            def binding;
        
            @Service("ReportParameterService")
            def svcParams;
        
            @Service('BPReportService')
            def svc;
            
            String title = "Business Delinquency Listing";
            def barangay;
            def quarterly = false;
            def reportdata;
            def isViewed;
            
            def msg;
            def mode; 
            def delinquencyTask;
            
            def init() {
                mode='init';
                isViewed = false;
                return 'initpage';
            }
            
            List getBarangaylist(){
                return svc.getBarangayList();
            }
            
            def updateMessage = { msg ->
                this.msg = msg;
                binding.refresh('msg');
            }

            def onFinish = { reportlist -> 
                this.mode = 'init';
                binding.refresh();
                if( reportlist ) {
                    this.reportdata = reportlist;
                    isViewed = true;
                    report.viewReport();
                    binding.fireNavigation('reportpage');
                }
                else {
                    MsgBox.alert('No records found.');
                }
            }

            def onError = { err ->
                this.mode = 'init';
                binding.refresh();
                MsgBox.err( err );
            }

            def cancelPreview() {
                delinquencyTask.interrupt = true;
                this.mode = 'init';
                this.msg = '';
                binding.refresh();
            }
            
            def preview() {
                mode = 'view';
                def list = svc.getTaxpayerListByBarangay( [barangayid:barangay?.barangayid] ) ;
                delinquencyTask = new BPDelinquencyTask([
                        updateMessage: updateMessage,
                        onError: onError,
                        onFinish: onFinish, 
                        interrupt: false, 
                        svcParams: svcParams,
                        svc: svc, 
                        barangay: barangay,
                        taxpayerlist: list
                     ]);
                Thread t = new Thread( delinquencyTask );
                t.start();
            }
            
            def getReport(){
                return ( quarterly ? bpquarterlydelinquency : bpdelinquency );
            }
            
            def bpdelinquency = [
                getReportName : { return "com/rameses/gov/etracs/bpls/reports/BPDelinquency.jasper"; },
                getReportData : { return reportdata },
                getParameters : { def params = svcParams.getStandardParameter(); }
            ] as ReportModel;
            
            def bpquarterlydelinquency = [
                getReportName : { return "com/rameses/gov/etracs/bpls/reports/BPQuarterlyDelinquency.jasper"; },
                getReportData : { return reportdata },
                getParameters : { def params = svcParams.getStandardParameter(); }
            ] as ReportModel;
            
            def back() {
                isViewed = false;
                msg = '';
                return 'initpage';
            }
        }
        
        class BPDelinquencyTask implements Runnable
        {
            def svcParams;
            def svc;
            
            def taxpayerlist;
            def reportlist = [];
            def barangay;
            
            def updateMessage;
            def onError;
            def onFinish;
            boolean interrupt;
            
            public void run() {
                try { 
                    int i = 1
                    def delinquencylist;
                    def taxpayer
                    while(!interrupt && !taxpayerlist.isEmpty() ) {
                        def o = taxpayerlist.remove(0);
                        taxpayer = [
                            ownerid : o.owner.objid,
                            barangayid : barangay?.barangayid
                        ];
                        delinquencylist = svc.getBPDelinquencyList( taxpayer );
                        if( delinquencylist ) {
                            reportlist.addAll( delinquencylist );
                        }
                        
                        updateMessage( 'Please wait while processing taxpayer ' + i + '.')
                        Thread.sleep(100)
                        i++;
                    }    
                    
                    reportlist?.sort{ a, b ->
                        def akey = a.appyear + '-' + a.ownername;
                        def bkey = b.appyear + '-' + b.ownername;
                        return akey <=> bkey;
                    }
                    if( interrupt ) return;
                    onFinish( reportlist );
               } catch(e) {
                    onError( e );
               }
            }
        }
    ]]>
    </code>
    
    <pages>
        <page name="initpage" template="com.rameses.gov.etracs.bpls.reports.ui.BPDelinquencyInitPage" />
        <page name="reportpage" template="com.rameses.osiris2.common.ui.ReportPreviewPage" />
    </pages>
</workunit>