/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.rameses.gov.etracs.bpls.components;

import com.rameses.common.PropertyResolver;
import com.rameses.rcp.control.XComponentPanel;
import com.rameses.rcp.ui.annotations.ComponentBean;

/**
 *
 * @author dell
 */
@ComponentBean("com.rameses.gov.etracs.bpls.components.LobListModel")
public class LobList extends XComponentPanel {

    private boolean showAdd = true;
    private boolean showRenew = true;
    private boolean showRetire = true;
    private boolean showReclassify = false;
    
    private String handler;
    
    /**
     * Creates new form LobList
     */
    public LobList() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        xDataTable1 = new com.rameses.rcp.control.XDataTable();
        jPanel2 = new javax.swing.JPanel();
        btnAdd = new com.rameses.rcp.control.XButton();
        btnRenew = new com.rameses.rcp.control.XButton();
        btnRetire = new com.rameses.rcp.control.XButton();
        btnRemove = new com.rameses.rcp.control.XButton();
        btnUnretire = new com.rameses.rcp.control.XButton();
        btnReclassify = new com.rameses.rcp.control.XButton();

        setLayout(new java.awt.BorderLayout());

        xDataTable1.setColumns(new com.rameses.rcp.common.Column[]{
            new com.rameses.rcp.common.Column(new Object[]{
                new Object[]{"name", "name"}
                , new Object[]{"caption", "Line of Business"}
                , new Object[]{"width", 100}
                , new Object[]{"minWidth", 0}
                , new Object[]{"maxWidth", 0}
                , new Object[]{"required", false}
                , new Object[]{"resizable", true}
                , new Object[]{"nullWhenEmpty", true}
                , new Object[]{"editable", false}
                , new Object[]{"visible", true}
                , new Object[]{"visibleWhen", null}
                , new Object[]{"textCase", com.rameses.rcp.constant.TextCase.UPPER}
                , new Object[]{"typeHandler", new com.rameses.rcp.common.TextColumnHandler()}
            }),
            new com.rameses.rcp.common.Column(new Object[]{
                new Object[]{"name", "classification"}
                , new Object[]{"caption", "Classification"}
                , new Object[]{"width", 120}
                , new Object[]{"minWidth", 120}
                , new Object[]{"maxWidth", 120}
                , new Object[]{"required", false}
                , new Object[]{"resizable", true}
                , new Object[]{"nullWhenEmpty", true}
                , new Object[]{"editable", false}
                , new Object[]{"visible", true}
                , new Object[]{"visibleWhen", null}
                , new Object[]{"textCase", com.rameses.rcp.constant.TextCase.NONE}
                , new Object[]{"typeHandler", new com.rameses.rcp.common.TextColumnHandler()}
            }),
            new com.rameses.rcp.common.Column(new Object[]{
                new Object[]{"name", "assessmenttype"}
                , new Object[]{"caption", "Type"}
                , new Object[]{"width", 100}
                , new Object[]{"minWidth", 100}
                , new Object[]{"maxWidth", 100}
                , new Object[]{"required", false}
                , new Object[]{"resizable", true}
                , new Object[]{"nullWhenEmpty", true}
                , new Object[]{"editable", false}
                , new Object[]{"visible", true}
                , new Object[]{"visibleWhen", null}
                , new Object[]{"textCase", com.rameses.rcp.constant.TextCase.UPPER}
                , new Object[]{"typeHandler", new com.rameses.rcp.common.TextColumnHandler()}
            })
        });
        xDataTable1.setDynamic(true);
        xDataTable1.setHandler("listModel");
        xDataTable1.setName("selectedItem"); // NOI18N
        xDataTable1.setPreferredSize(new java.awt.Dimension(700, 80));

        jPanel2.setLayout(new com.rameses.rcp.control.layout.XLayout());

        btnAdd.setName("add"); // NOI18N
        btnAdd.setText("Add New");
        btnAdd.setVisibleWhen("#{allowAdd == true}");
        jPanel2.add(btnAdd);

        btnRenew.setDepends(new String[] {"selectedItem"});
        btnRenew.setName("renew"); // NOI18N
        btnRenew.setText("Renew");
        btnRenew.setVisibleWhen("#{allowRenew==true}");
        jPanel2.add(btnRenew);

        btnRetire.setDepends(new String[] {"selectedItem"});
        btnRetire.setName("retire"); // NOI18N
        btnRetire.setText("Retire");
        btnRetire.setVisibleWhen("#{allowRetire==true}");
        jPanel2.add(btnRetire);

        btnRemove.setDepends(new String[] {"selectedItem"});
        btnRemove.setName("remove"); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.setVisibleWhen("#{allowRemove==true}");
        jPanel2.add(btnRemove);

        btnUnretire.setDepends(new String[] {"selectedItem"});
        btnUnretire.setName("unretire"); // NOI18N
        btnUnretire.setText("Unretire");
        btnUnretire.setVisibleWhen("#{allowUnretire==true}");
        jPanel2.add(btnUnretire);

        btnReclassify.setDepends(new String[] {"selectedItem"});
        btnReclassify.setName("reclassify"); // NOI18N
        btnReclassify.setText("Reclassify");
        btnReclassify.setVisibleWhen("#{allowReclassify==true}");
        jPanel2.add(btnReclassify);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(xDataTable1, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 182, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(xDataTable1, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                    .addGap(36, 36, 36)))
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.rameses.rcp.control.XButton btnAdd;
    private com.rameses.rcp.control.XButton btnReclassify;
    private com.rameses.rcp.control.XButton btnRemove;
    private com.rameses.rcp.control.XButton btnRenew;
    private com.rameses.rcp.control.XButton btnRetire;
    private com.rameses.rcp.control.XButton btnUnretire;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private com.rameses.rcp.control.XDataTable xDataTable1;
    // End of variables declaration//GEN-END:variables

    public String getHandler() {
        return handler;
    }

    public void setHandler(String handler) {
        this.handler = handler;
    }

    public boolean isShowAdd() {
        return showAdd;
    }

    public void setShowAdd(boolean showAdd) {
        this.showAdd = showAdd;
    }

    public boolean isShowRetire() {
        return showRetire;
    }

    public void setShowRetire(boolean showRetire) {
        this.showRetire = showRetire;
    }

    public boolean isShowRenew() {
        return showRenew;
    }

    public void setShowRenew(boolean showRenew) {
        this.showRenew = showRenew;
    }
    
    
    public boolean isShowReclassify() {
        return showReclassify;
    }

    public void setShowReclassify(boolean showReclassify) {
        this.showReclassify = showReclassify;
    }

    @Override
    public void afterLoad() {
        Object cb = getComponentBean();
        PropertyResolver pr = PropertyResolver.getInstance();
        pr.setProperty(cb, "handler", super.getProperty(getHandler()));
        pr.setProperty(cb, "showadd", isShowAdd());
        pr.setProperty(cb, "showrenew", isShowRenew() );
        pr.setProperty(cb, "showretire", isShowRetire() );
        if(getName()==null) 
            throw new RuntimeException("Name must be provided in LobList component");
        pr.setProperty(cb, "entity", super.getProperty(getName()));
        pr.setProperty(cb, "showreclassify", isShowReclassify() );
    }

    @Override
    public void setEnabled(boolean enabled) {
        btnAdd.setEnabled(enabled);
        btnRenew.setEnabled(enabled);
        btnRemove.setEnabled(enabled);
        btnRetire.setEnabled(enabled);
        btnUnretire.setEnabled(enabled);
        btnReclassify.setEnabled(enabled);
    }
    
    
    
}
