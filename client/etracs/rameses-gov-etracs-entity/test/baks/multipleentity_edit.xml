<workunit>
    <invokers>
        <invoker type="multipleentity:create" caption="Multiple Ownership (Create)" action="create" target="popup" role="MASTER" permission="multipleentity.create"/>
        <invoker type="quick_launcher" code="TP03" caption="Multiple Ownership (Create)" action="create" target="popup" role="MASTER" permission="multipleentity.create"/>
        <invoker type="multipleentity:edit"  caption="Mutliple Ownership (Edit)" action="edit" role="MASTER" permission="multipleentity.edit"/>

        <invoker type="formActions" caption="Cancel" action="_exit" visibleWhen="#{initiator == 'create'}" immediate="true" mnemonic="c" />
        <invoker type="formActions" caption="Close" action="_close" visibleWhen="#{initiator != 'create'}" immediate="true" mnemonic="c"/>
        <invoker type="formActions" action="save" caption="Save" mnemonic="s" shortcut="ctrl S" />
        <invoker type="formActions" action="addEntity" caption="Add Entity" immediate="true" mnemonic="a"/>
    </invokers>
    
    <code>
    <![CDATA[
        import com.rameses.rcp.annotations.*;
        import com.rameses.rcp.common.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.osiris2.common.*;
        import java.rmi.server.UID;

        public class MultipleEntityController  {
        
            @Binding
            def binding;
            
            @Service("MultipleEntityService")
            def service;
            
            def saveHandler;
            def entity;
            def mode = "edit";
            def addressHandler;
            def initiator = "edit";
            
            void create() { 
                entity = [objid: "MULENT"+new UID(), type: 'MULTIPLE', address:[:]];
                entity.members = [];
                addressHandler = Inv.lookupOpener('address:component', [
                    entity: entity.address
                ]); 
                mode = "create";
            } 
            
            void edit() { 
                addressHandler = Inv.lookupOpener('address:component', [
                    entity: entity.address
                ]); 
                mode = "edit";
            } 
            
            def getLookupMember() {
                return InvokerUtil.lookupOpener('entity:lookup', ['query.type': 'INDIVIDUAL,JURIDICAL']); 
            }             
            
            def selectedEntity;    
            
            def listHandler = [
                fetchList:{o-> 
                    if (!entity) return null; 
                    if (!entity.members) entity.members = [];
                    return entity.members; 
                },
                
                onColumnUpdate: {item,colname-> 
                    if (colname == 'member') { 
                        def o = entity.members.find{ it.member.objid == item.member.objid } 
                        if (o) throw new Exception('This member already exist in the list. Please select another one.'); 
                    } 
                },

                onCommitItem: {item-> 
                    rebuildNames();
                    binding.refresh('entity.name');  
                }, 
                
                onAddItem: {item-> 
                    item.objid = 'MEM'+new UID();
                    item.entityid = entity.objid; 
                    entity.members.add(item); 
                    rebuildNames();
                    binding.refresh('entity.name');
                }, 
                
                onRemoveItem: {item-> 
                    if (!MsgBox.confirm('Are you sure you want to remove this item?')) return false;
                    
                    entity.members.remove(item); 
                    rebuildNames(); 
                    binding.refresh('entity.name'); 
                    return true;
                }
            ] as EditorListModel;             

            
            void rebuildNames() {
                def buffer = new StringBuffer();
                def indexno = 0;
                entity.members.each{
                    if (buffer.length() > 0) buffer.append(' ');                         
                    if (it.prefix) buffer.append(it.prefix + ' ');

                    buffer.append(it.member.name); 

                    if (it.suffix) buffer.append(' ' + it.suffix); 
                    
                    indexno++;
                    it.itemno = indexno;
                }
                def oldfullname = entity.fullname; 
                entity.fullname = buffer.toString();
                if (entity.name == oldfullname) entity.name = entity.fullname;  
            } 
            
            
            void copyFullName(){
                entity.name = entity.fullname
                rebuildNames();
                binding.refresh('entity.name')
            }
            
            def createIndividual(){
                return InvokerUtil.lookupOpener('individualentity:create', [:])
            }
            
            def save() {
                if(mode=='create'){
                    if( MsgBox.confirm("You are about to save this record. Proceed?")) {
                        entity = service.create( entity );
                         if(saveHandler) saveHandler(entity);
                        def opener = Inv.lookupOpener( "multipleentity:open", [entity: entity, initiator:'create'] );
                        opener.target = 'self';
                        return opener;
                    }
                }
                else {
                    entity = service.update( entity );
                    if(saveHandler) saveHandler(entity);
                    return "_close";
                }
            }
            
            
            def addEntity() {
                def h = { o->
                }
                return Inv.lookupOpener( "individualentity:create", [onselect:h] );
            }
            
        }        
   ]]>
   </code>
   
   <pages>
       <page template="com.rameses.entity.ui.MultipleEntityEditPage"/>
   </pages>   
</workunit>