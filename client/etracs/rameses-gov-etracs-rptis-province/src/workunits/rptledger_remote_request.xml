<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    <invokers>
        <invoker type="rptledger:list:formActions" action="init" caption="Request Municipality Ledger" role="LANDTAX"/>
        <invoker type="rptledger:formActions" action="syncLedger" caption="Sync from Municipality Ledger" role="LANDTAX"/>
        <invoker type="formActions" action="_close" caption="Close" immediate="true" />
        <invoker type="formActions" action="sendRequest" caption="Send Request" mnemonic="s" visibleWhen="mode=='newledger'"/>
    </invokers>
    <code>
        
<![CDATA[


import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*;
import com.rameses.osiris2.common.*;
import com.rameses.common.*;

class RemoteRPTLedgerController 
{
    @Binding 
    def binding;
    
    @Caller
    def caller;
    
    def entity;
    
    def mode = 'newledger';
    
    @Service('ProvinceSyncService')
    def syncSvc 
    
    @Service('ProvinceRPTLedgerService')
    def service
    
    def request = [:];
    def processing = false;
    
    String title = 'Request Remote Realty Tax Ledger';
    
    def loghandler = new TextWriter();
    
    void init(){
    }
    
    
    def handler = [
        onMessage : { msg ->
            if (msg != AsyncHandler.EOF && msg.msgtype == '_ERROR_' ){
                loghandler.writeln('');
                loghandler.writeln(msg.msg);
            }
            else if (msg != AsyncHandler.EOF){
                service.syncData(msg);
                loghandler.writeln('Updating data ' + msg.msgtype + ': ' + msg.data.objid + '.');
            }
            else{
                try{ caller?.search(); } catch(e){}
                
                try{ 
                    caller?.open();
                    caller?.binding?.refresh(); 
                } catch(e){}
                
                loghandler.writeln('\nRecord has been successfully synchronized.');
                processing = false;
            }
            binding.refresh('doClose|syncData')
        },
        
        onError : { e ->
            println '='*50 ;
            println e.printStackTrace();
            loghandler.writeln('\n\n');
            loghandler.writeln('ERROR: ' + e.message);
            processing = false;
            binding.refresh('doClose|syncData')
        }
    ] as AsyncHandler
    
    
    def process = [
        run : {
            processing = true;
            loghandler.writeln('Sending request to remote server...');
            def params = [remoteservicename:'MunicipalityRPTLedgerSyncHandler']
            params.putAll(request);
            syncSvc.syncData(params, handler);
        }
    ] as Runnable;
    
    
    def syncLedger(){
        mode = 'syncledger' 
        request.tdno = entity.tdno;
        return sendRequest();
    }
    
    def sendRequest(){
        if ( request.tdno == null && request.prevtdno == null )
            throw new Exception('TD No. or Previous TD No. is required.');
            
        new Thread(process).start();
        return 'sync';
    }
    
}


]]>

    </code>
    <pages>
        <page template="com.rameses.gov.etracs.rptis.province.rptledger.ui.RemoteRPTLedgerRequestPage"/>
        <page name="sync" template="com.rameses.gov.etracs.rptis.province.sync.ui.SyncStatusPage"/>
    </pages>
</workunit>
