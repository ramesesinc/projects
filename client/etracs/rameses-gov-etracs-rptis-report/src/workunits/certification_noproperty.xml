<?xml version="1.0" encoding="UTF-8"?>
<workunit extends="rpt_wtemplates/CertificationController.xml">
    <invokers>
        <invoker type="rptcertification"
            action="init" caption="No Property" 
            opener="noproperty" index="8" 
            role="CERTIFICATION_ISSUER,RECORD" permission="certification.noproperty"/>    
            
        <invoker type="noproperty:open" action="open" caption="No Property" /> 
    </invokers>
    
    <code>
        
<![CDATA[


package com.rameses.gov.etracs.rpt.report.certification;


import com.rameses.rcp.annotations.*
import com.rameses.rcp.common.*
import com.rameses.osiris2.client.*
import com.rameses.osiris2.common.*
import com.rameses.osiris2.reports.*;

public class NoPropertyController extends com.rameses.gov.etracs.rpt.report.certification.AbstractCertificationController
{
    @Service('RPTCertificationNoPropertyService')
    def svc;
    
    def getService(){
        return svc;
    }
    
    String reportPath = 'com/rameses/gov/etracs/rpt/report/certification/';
    String reportName = reportPath + 'NoPropertyCertification.jasper'

    Map getParameters(){
        return [REPORTTITLE:'No Property']
    }
    
    SubReport[] getSubReports() {
        return [
            new SubReport('NoPropertyCertificationItem', reportPath + 'NoPropertyCertificationItem.jasper'),
        ] as SubReport[]
    }
    
    
    void afterInit(){
        entity.items = [];
    }
    
    void beforeSave(){
        if (entity.certtype.type == 'bytaxpayer')
            entity.items = []
        else if (entity.certtype.type == 'bytaxpayers' && entity.items.size() <= 1)
            throw new Exception('At least two (2) taxpayers must be specified.');
        
    }
        
    def getLookupTaxpayer(){
        return InvokerUtil.lookupOpener('entity:lookup',[
            onselect : { f -> 
                svc.checkExistingProperty(f.objid)
                entity.taxpayer = [objid:f.objid, name:f.name, address:f.address.text];
                entity.requestedby = f.name;
                entity.requestedbyaddress = f.address.text;
            },
            onempty  : { 
                entity.taxpayer = null;
                entity.requestedby = null;
                entity.requestedbyaddress = null;
            },
        ])
    }
    
    def getCertificationTypes(){
        return [
            [type:'bytaxpayer', caption:'Single Taxpayer'],
            [type:'bytaxpayers', caption:'Multiple Taxpayers'],
        ]
    }  
    
    def selectedItem;
    
    def listHandler = [
        fetchList   : {return entity.items },

        createItem  : { return [rptcertificationid:entity.objid]},

        onAddItem   : {item-> 
            item.refid = item.taxpayer.objid;
            entity.items << item;
            if (!entity.requestedby){
                entity.requestedby = item.taxpayer.name 
                entity.requestedbyaddress = item.taxpayer.address.text;
                binding.refresh('entity.requestedby.*');
            }
            binding.focus('entity.taxpayer');
        },
        
        validate : {li -> 
            def item = li.item;
            if (entity.items.find{it.refid == item.taxpayer.objid})
                throw new Exception('Duplicate taxpayer is not allowed.');
                
            svc.checkExistingProperty(item.taxpayer.objid)
        },
        
        onRemoveItem : {item ->
            if (MsgBox.confirm('Remove selected item?')){
                entity.items.remove(item);
                return true;
            }
            return false;
        }
    ] as EditorListModel
}



]]>
    </code>
    
</workunit>
