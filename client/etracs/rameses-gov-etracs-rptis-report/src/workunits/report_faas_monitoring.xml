<workunit extends="rpt_wtemplates/ReportController.xml" >
    <invokers>
        <invoker folderid="/explorer/report/rpt" 
            action="init" 
            caption="FAAS Encoding Monitoring" 
            target="window" 
            role="ASSESSOR_REPORT,REPORT,SHARED" />
    </invokers>
    <code>

<![CDATA[

import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*;
import com.rameses.osiris2.reports.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.lang.*;

class FAASMonitoringReportController
{
    @Service('RPTReportFaasMonitoringService') 
    def svc;
    
    @Binding
    def binding;
    
    @Service("ReportParameterService")
    def svcParams;
    
    @Service('DateService')
    def dtSvc;
            
    @Service('LGUService')
    def lguSvc; 
    
    String title = 'Monthly FAAS Encoding Monitoring'
    String reportName = 'com/rameses/gov/etracs/rpt/report/faas_monitoring.jasper';
    def clientContext = com.rameses.rcp.framework.ClientContext.currentContext;
    
    def mode;
    def entity = [:];
    def params = [:];
    def reportdata;
    def data;
    def days;
    def users;
    
    void init(){
        def parsedate = dtSvc.parseCurrentDate();
        entity.year = parsedate.year;
        entity.qtr  = parsedate.qtr;
        entity.month = getMonthsByQtr().find{it.index == parsedate.month}
        mode = 'init'
        days = [];
        for(int d=1; d<=31; d++){ days << String.format("%02d",d) }
        users = svc.getUsers(['userid':'%']);
    }    
    
    SubReport[] getSubReports(){
        return [ 
            new SubReport("items", "com/rameses/gov/etracs/rpt/report/faas_monitoring_items.jasper")
        ] as SubReport[]; 
    }
    
    Map getParameters(){
        return data.parameters;
    }
    
    
   def formControl = [
        getFormControls: {
            return [
                new FormControl( "integer", [caption:'Year', name:'entity.year', required:true, preferredSize:'100,19']),
                new FormControl( "combo", [caption:'Quarter', name:'entity.qtr', items:'quarters', required:true, immediate:true, preferredSize:'100,19']),
                new FormControl( "combo", [caption:'Month', name:'entity.month', required:true, items:'months', depends:'entity.qtr', expression:'#{item.name}', dynamic:true, preferredSize:'100,19']),
                new FormControl( "combo", [caption:'Day', name:'entity.day', items:'days', depends:'entity.month', dynamic:true, preferredSize:'100,19']),
                new FormControl( "combo", [caption:'User', name:'entity.user', items:'users', dynamic:true, expression:'#{item.username}', preferredSize:'250,19']),
            ]
        },
   ] as FormPanelModel;
   
   
    def preview() {
        buildReport();
    } 
    
    void print() {
        ReportUtil.print( report.report, true )
    } 
    
    def buildReport() {
        reportdata = svc.getData(entity);
        if(!reportdata._items) throw new Exception("Record not found!");
        params = svcParams.getStandardParameter(); 
        params.WATERMARK = getInputStream( 'lgu-watermark.png' )         
        params.LOGOLGU = getInputStream( 'lgu-logo.png' ) 
        params.selecteduser = entity.user ? entity.user.username : 'All Users';
        if(entity.day == null) entity.day = 0;
        params.selectedmonth = dateString(entity.year, entity.month.index, Integer.parseInt(entity.day +''));
        report.viewReport();
        mode = 'view'; 
        return 'preview'; 
    }

    String getImagePath( def imagename ) {
        def appEnv = clientContext.appEnv; 
        def customfolder = appEnv['report.custom'];
        if (!customfolder) customfolder = appEnv['app.custom'];
        
        def path = 'images/' + imagename 
        if( customfolder ) { 
            def cpath = 'images/' + customfolder + '/' + imagename  
            if( clientContext.getResource(cpath) )  path = cpath 
        } 

        return path 
    }
    
    InputStream getInputStream( def imagename) {
        return clientContext.classLoader.getResourceAsStream( getImagePath( imagename ) );
    }
        
    def report = [
        getReportName : { return reportName }, 
        getReportData : { return reportdata },
        getSubReports : { return getSubReports() },
        getParameters : { 
            return  params 
        }
    ] as ReportModel;
    
    def back() {
        mode = 'init'
        return 'default' 
    }
   
    List getQuarters() {
        return [1,2,3,4]
    }
        
    List getMonthsByQtr() {
        return dtSvc.getMonthsByQtr( entity.qtr );
    }
    
    List getMonths(){
        return getMonthsByQtr();
    }
    
    public String dateString(int year, int month, int day){
        Calendar c = Calendar.getInstance();
        c.set(year,month,day,0,0);
        Date date = c.getTime();
        SimpleDateFormat yearFormat = new SimpleDateFormat("yyyy");
        SimpleDateFormat monthFormat = new SimpleDateFormat("MMMM");
        SimpleDateFormat dayFormat = new SimpleDateFormat("dd");
        String dateString = "";
        if(day == 0){
                dateString = "For the month of "+monthFormat.format(date)+" "+yearFormat.format(date);
        }else{
                dateString = monthFormat.format(date) + " " + dayFormat.format(date) + ", " + yearFormat.format(date);
        }
        return dateString;
    }
}
]]>        
        
    </code>
</workunit>