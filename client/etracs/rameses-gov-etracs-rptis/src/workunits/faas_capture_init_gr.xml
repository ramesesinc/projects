<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    <invokers>
        <invoker folderid="/explorer/txn/rpt/manual" action="init"  caption="General Revision" index="2" txntype="GR" role="ENCODER" generalRevision="11" permission="faas.createGeneralRevision"/>
         <invoker type="formActions" action="_close" caption="Close" mnemonic="c" icon="images/toolbars/cancel.png" immediate="true" />
         <invoker type="formActions" action="process" caption="Next" mnemonic="n" icon="images/toolbars/arrow_right.png" />
         <invoker type="faaslist:formActions" action="doRevise"  caption="Revise FAAS" index="100" txntype="GR" role="ENCODER" generalRevision="11" permission="faas.createGeneralRevision" visibleWhen="#{showRevision}" depends="selectedEntity"/>
    </invokers>
    <code>
        
<![CDATA[
        
import com.rameses.rcp.annotations.* 
import com.rameses.rcp.common.* 
import com.rameses.osiris2.client.*
import com.rameses.osiris2.common.*

class GeneralRevisionInitController extends com.rameses.gov.etracs.rpt.faas.ui.FaasTxnInitController
{
        
    @Service('GeneralRevisionService')
    def grSvc;
    
    
    boolean generalRevision = true;
    
    
    void afterInit(){
        
    }
        
    def process(){
        entity.datacapture = true;
        entity = grSvc.createDataCaptureGeneralRevision( entity );
        return InvokerUtil.lookupOpener('faas:capture:create', [entity:entity]);
    }
    
    def getRevisionyears(){
        return grSvc.getRyList(entity.faas?.lguid, entity.faas?.ry, entity.faas?.rputype );
    }
    
    void afterLookupFaas(){
        binding.refresh('entity.newrysetting');
    }
        
        
    def doRevise(){
        def faas = entity;
        
        if (faas.state == 'CANCELLED')
        throw new Exception('FAAS has already been cancelled.');
        
        entity = [:]
        super.init();
        entity.faas = faas;
        def rys = getRevisionyears()
        if (!rys) throw new Exception('FAAS has already been revised or no revision setting defined for year ' + faas.ry + '.');
        entity.newrysetting = rys[0];
        
        if (entity.faas.ry == entity.newrysetting.ry) 
        throw new Exception('FAAS has already been revised for Revision Year ' + entity.newrysetting.ry + '.')
        
        return process();
    }
      
    
}
        
        ]]>
    </code>
<pages>
    <page template="com.rameses.gov.etracs.rpt.faas.ui.FaasTxnInitPage"/>
</pages>    
</workunit>


