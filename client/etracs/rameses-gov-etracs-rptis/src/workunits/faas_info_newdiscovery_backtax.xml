<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    <invokers>
        <invoker type="faas:info" action="init" caption="Back Taxes" index="555" visibleWhen="#{entity.txntype.objid == 'ND'}"/>
        <invoker type="formActions" action="refresh" caption="Refresh" mnemonic="r" viibleWhen="#{mode == MODE_READ}"/>
        <invoker type="formActions" action="edit" caption="Edit" mnemonic="e" visibleWhen="#{showActions == true}" />
        <invoker type="formActions" action="save" caption="Save" mnemonic="s" visibleWhen="#{mode == MODE_EDIT}" />
   </invokers>
   <code>

<![CDATA[

import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*
import java.rmi.server.UID;
import com.rameses.gov.etracs.rpt.util.*;

public class BackTaxController 
{
    @Binding
    def binding;
    
    @Caller
    def caller;
    
    def svc;
    
    def entity;
    def selectedItem;
    
    def MODE_READ = 'read';
    def MODE_EDIT = 'edit';
    
    def mode;
    
    String title = 'Back Taxes'
    
    void init() {
        mode = MODE_READ;
        if( ! entity.backtaxes ) 
            entity.backtaxes = []
        entity._backtaxes = []
    }
    
    void refresh(){
        binding.refresh();
    }
    
    void edit(){
        caller.addMessage([type:'backtax', msg:'Back Taxes section is still in editing mode.']);
        mode = MODE_EDIT;
    }
    
    void save(){
        svc.saveBackTaxes(entity);
        caller.clearMessages('backtax');
        mode = MODE_READ;
    }
    
    def listHandler = [
        fetchList   : { return entity.backtaxes },
        createItem  : { return createEntity() },
        getColumns  : { return [
            new Column(name:'ry', caption:'RY', editable:true, type:'integer', format:'0000', width:50, required:true),
            new Column(name:'tdno', caption:'TD No.', editable:true, width:150, required:true),
            new Column(name:'bmv', caption:'Base Market Value', editable:true, type:'decimal', format:'#,##0.00', width:120, required:true),
            new Column(name:'mv', caption:'Market Value', editable:true, type:'decimal', format:'#,##0.00', width:120, required:true),
            new Column(name:'av', caption:'Assessed Value', editable:true, type:'decimal', format:'#,##0.00', width:120, required:true),
            new Column(name:'effectivityyear', caption:'Effectivity', editable:true, type:'integer', format:'0000', width:120, required:true),
            new Column(name:'taxable', caption:'Taxable?', editable:true, type:'boolean', width:80, required:true),
        ]},
        validate   : { li -> doValidate( li.item) },
        onAddItem  : { item -> 
            item.objid = 'BT' + new UID()
            entity.backtaxes.add( item ) 
        },
        onRemoveItem : { item -> 
            if( MsgBox.confirm('Remove item?') ) {
                entity.backtaxes.remove( item )
                entity._backtaxes.add( item )
                listHandler.refresh()
            }
        },
    ] as EditorListModel 
    
    def doValidate( item ) {
        RPTUtil.required( 'RY', item.ry );
        RPTUtil.required( 'TD No.', item.tdno );
        RPTUtil.required( 'Base Market Value', item.bmv);
        RPTUtil.required( 'Market Value', item.mv );
        RPTUtil.required( 'Assessed Value', item.ry );
        RPTUtil.required( 'Assessed Value', item.av );
        RPTUtil.required( 'Effectivity', item.effectivityyear );
        if( item.bmv < 0.0 ) throw new Exception('Base Market Value must be greater than or equal to zero.')
        if( item.mv < 0.0 ) throw new Exception('Market Value must be greater than or equal to zero.')
        if( item.av < 0.0 ) throw new Exception('Assessed Value must be greater than or equal to zero.')
        if( item.av > item.mv) throw new Exception('Assessed Value must be less than Market Value.')
        if( item.ry >= entity.rpu.ry ) throw new Exception("RY must be less than current FAAS revision year $entity.rpu.ry")
        if( item.effectivityyear < item.ry ) throw new Exception('Effectivity must be greater than or equal to RY')
        validateRySequence( item )
        entity.backtaxyrs = svc.validateAndGetNumberBackTaxYears(entity.effectivityyear, item)
    }
    
    
    void validateRySequence( item ) {
        def list = []
        if( ! item.objid ) {
            //new item 
            if( item.ry > entity.rpu.ry ) throw new Exception('RY must be less than ' + entity.rpu.ry + '.')
            list = entity.backtaxes.findAll{ it.ry <= item.ry }
        }
        else {
            def index = entity.backtaxes.findIndexOf{ it.objid == item.objid }
            if( index >= 0 ) {
                def lastindex = index - 1
                if( lastindex >= 0 ){
                    list.addAll( entity.backtaxes[0..index-1].findAll{ it.ry <= item.ry } )
                }
                lastindex = entity.backtaxes.size() - 1
                if( lastindex >= index + 1) {
                    list.addAll( entity.backtaxes[index+1..lastindex].findAll{ it.ry >= item.ry } )
                }
            }
        }
        if( list ) throw new Exception('RY must be arranged in descending order.')
    }
    
    def createEntity(){
        return [taxable:true, faasid:entity.objid, effectivityqtr:1] 
    }
 
    
       
    boolean getShowActions(){
        if (entity.state.matches('CURRENT|CANCELLED')) return false;
        if (entity.taskstate && entity.taskstate.matches('assign.*')) return false;
        if (entity.taskstate && !entity.taskstate.matches('.*appraiser.*')) return false;
        if (entity.state.matches('APPROVED')) return false;
        if (mode != MODE_READ) return false;
        return true;
    }
    
    boolean getAllowEdit(){
        return mode != MODE_READ
    }    
}

]]>
       
   </code>
    
    <pages>
        <page template="com.rameses.gov.etracs.rpt.faas.ui.BackTaxPage"/>
    </pages>
</workunit>


