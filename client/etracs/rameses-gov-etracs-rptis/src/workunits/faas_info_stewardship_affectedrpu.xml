<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    <invokers>
        <invoker type="faas:info" action="init" caption="Transferred Improvements" index="20" visibleWhen="#{entity.txntype.objid=='ST' &amp;&amp; entity.rpu.rputype=='land'}"/>
        
        <invoker type="formActions" action="edit" caption="Edit" mnemonic="e" visibleWhen="#{showActions == true}" role="TAXMAPPER"/>
        <invoker type="formActions" action="save" caption="Save" mnemonic="s" visibleWhen="#{mode != 'read'}" />
        <invoker type="formActions" action="reloadItems" caption="Reload Improvements" visibleWhen="#{mode != 'read'}" />
        <invoker type="formActions" action="removeAll" caption="Delete All" visibleWhen="#{mode != 'read'}" />
        
   </invokers>
   <code>

<![CDATA[
        
import com.rameses.rcp.annotations.* 
import com.rameses.rcp.common.* 
import com.rameses.osiris2.client.*
import com.rameses.osiris2.common.*
import com.rameses.gov.etracs.rptis.util.RPTUtil;

class StewardshipAffectedRpuController
{
    @Binding
    def binding;
    
    @Caller
    def caller;
    
    @Service('FAASStewardshipService')
    def stewardshipSvc;
    
    def svc;
    
    def entity;
    def selectedItem;
    def affectedrpus;
    def mode;
    
    def info;
    
    
    def MODE_READ = 'read';
    def MODE_EDIT = 'edit';
    
    void init(){
        affectedrpus = stewardshipSvc.getAffectedRpus(entity.objid);
        listHandler?.load();
        
        
        if (entity.state.matches('CURRENT|CANCELLED')){
            info = 'Transferred Improvements'
        }
        else {
            info = '<html><body>Affected Improvements<ul><li>Delete the items that will not be transferred to new Stewardship FAAS</li><li>Specify New Suffix for items to be transferred.</li> </ul></body></html>'
        }
        
        mode = MODE_READ;
    }
    
    def getOpener(){
        if (selectedItem && selectedItem.newfaasid) {
            return InvokerUtil.lookupOpener('faasdata:open',[
                    entity      : [objid:selectedItem.newfaasid], 
                    svc         : svc, 
                    taskstate   : entity.taskstate, 
                    assignee    : entity.assignee,
            ]);
        }
        return null;
    }    
    
    void removeAll(){
        if (MsgBox.confirm('Remove all affected improvements?')){
            stewardshipSvc.deleteAllAffectedRpus([objid:entity.objid]);
            affectedrpus.clear();
            listHandler.reload();
        }
    }
    
    void reloadItems(){
        if (MsgBox.confirm('Reload all Mother Land improvements?')){
            stewardshipSvc.reloadImprovements([objid:entity.objid, parentfaasid:entity.parentfaasid]);
            affectedrpus = stewardshipSvc.getAffectedRpus(entity.objid);
            listHandler.load();
        }
    }
    
    
    void edit(){
        caller.addMessage([type:'affectedrpu', msg:'Affected RPUs is still in editing mode.']);
        mode = MODE_EDIT;
    }
    
    void save(){
        caller.clearMessages('affectedrpu');
        mode = MODE_READ;
    }
    
    def listHandler = [
        getRows : { return affectedrpus.size() + 1 },
            
        fetchList : { return affectedrpus },
        
        onRemoveItem : {item ->
            if(MsgBox.confirm('Remove selected improvement?')){
                stewardshipSvc.deleteAffectedRpuFaas(item);
                affectedrpus.remove(item);
                return true;
            }
            return false;
        },
                
        validate : { li -> 
            def arpu = li.item;
            RPTUtil.required('New Suffix', arpu.newsuffix)
            validateNewPin(arpu)
            arpu.putAll(stewardshipSvc.saveAffectedRpuAndFaas(arpu));
        }
        
    ] as EditorListModel 
            
            
    void validateNewPin(arpu){
        def dup = affectedrpus.find{it.objid != arpu.objid && it.newsuffix == arpu.newsuffix}
        if (dup)
            throw new Exception('Duplicate suffix is not allowed. Suffix is already assigned to PIN ' + dup.prevpin + '.');
    }
    
    
    def getCount(){
        return affectedrpus.size();
    }
    
        
    boolean getShowActions(){
        if (entity.state.matches('CURRENT|CANCELLED')) return false;
        if (entity.taskstate && entity.taskstate.matches('assign.*')) return false;
        if (entity.taskstate && !entity.taskstate.matches('.*taxmapper.*')) return false;
        if (entity.state.matches('APPROVED')) return false;
        if (mode != MODE_READ) return false;
        return true;
    }
    
    boolean getAllowEdit(){
        return mode != MODE_READ
    }
    
    
}
       
]]>

   </code>
    
    <pages> 
        <page template="com.rameses.gov.etracs.rpt.faas.ui.AffectedRpuPage"/>
    </pages>
</workunit>


