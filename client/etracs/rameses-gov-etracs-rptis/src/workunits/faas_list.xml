<workunit extends="wtemplates/ExplorerViewController.xml" defaultFileType="faaslist" autoSelect="true">
    <invokers>
        <invoker folderid="/home/rpt" caption="FAAS Management"  role="ASSESSOR_SHARED" index="101"/>
        <invoker type="quick_launcher" code="FM00" caption="FAAS Management"  role="ASSESSOR_SHARED" index="101"/>
        <invoker type="formActions" action="doOpen" caption="Open" mnemonic="o" shortcut="ctrl O" visibleWhen="#{selectedEntity != null}" depends="listHandler.selectedEntity" index="-100"/>        
    </invokers>
        <code>
<![CDATA[
            
     import com.rameses.rcp.common.*
    import com.rameses.rcp.annotations.*
    import com.rameses.osiris2.client.*
    import com.rameses.osiris2.common.*
    import com.rameses.gov.etracs.rpt.util.RPTUtil;
            
    class FAASExplorerViewController extends ExplorerViewController
    {
          @Service('FAASListService')
            def svc 
            
            @Service('LGUService')
            def lguSvc
            
            @Service('RPUService')
            def rpuSvc;
            
            @Service('Var')
            def var 
            
            @Service('GeneralRevisionService')
            def grSvc;
    
            def states 
            
            boolean allowSearch = false;
            boolean allowOpen = false;
            boolean allowCreate = false;
            
            String formTarget = 'window'
            String serviceName = 'FAASListService'
            String formName = 'faas:list';
            String entityName = 'faaslist';
            
            
            int getRows() { return 25 }
                        
            List getStates(){
                if (!states) states = svc.getStates();
                return states
            }
            
            def doOpen(){
                if (!selectedEntity) return;
                
                if (selectedEntity.state.matches('CURRENT|CANCELLED'))
                    return InvokerUtil.lookupOpener('faas:open:closedwf', [entity:selectedEntity])
                
                if ( RPTUtil.toBoolean(selectedEntity?.datacapture, false) == true )
                    return InvokerUtil.lookupOpener('faas:capture:open', [entity:selectedEntity])
                
                return InvokerUtil.lookupOpener('faas:open', [entity:selectedEntity])
            }
            
            def onOpenItem(Object item, String columnName) { 
                return doOpen();
            }
            
                        
                        
            def formControl = [
                getFormControls: {
                    return [
                        new FormControl( "combo", [captionWidth:100, caption:'State', name:'query.state', items:'states']),
                        new FormControl( "integer", [captionWidth:100, caption:'Revision', name:'query.ry']),
                        new FormControl( "combo", [captionWidth:100, caption:'Property Type', name:'query.rputype', items:'rputypes']),
                        new FormControl( "combo", [captionWidth:100, caption:'LGU', name:'query.lgu', items:'lgus', expression:'#{item.name}']),
                        new FormControl( "combo", [captionWidth:100, caption:'Barangay', name:'query.barangay', items:'barangays', expression:'#{item.name}', dynamic:true, depends:'query.lgu']),
                        new FormControl( "lookup", [captionWidth:100, caption:'Taxpayer', name:'query.taxpayer', handler:'entity:lookup', expression:'#{item.name}']),
                    ]    
                },
           ] as FormPanelModel;
           
           
            
            def getBarangays(){
                if (! query.lgu)
                    return lguSvc.getBarangaysByParentId(null);
                return lguSvc.lookupBarangaysByRootId(query.lgu?.objid);
            }            
            
            
           def rputypes;
            
           def getRputypes(){
                if (!rputypes)
                    rputypes = rpuSvc.getRpuTypes();
                return rputypes;
           }

           void clear(){
               query.clear()
               search();
               binding.refresh('.*');
               binding.focus('query.tdno');

           }
        
        
            def getEntity(){
                return selectedEntity;
            }  
            
    
        def getLgus(){
            def orgclass = OsirisContext.env.ORGCLASS
            def orgid = OsirisContext.env.ORGID

            if ('PROVINCE'.equalsIgnoreCase(orgclass)) {
                return lguSvc.lookupMunicipalities([:])
            }
            else if ('MUNICIPALITY'.equalsIgnoreCase(orgclass)) {
                return [lguSvc.lookupMunicipalityById(orgid)]
            }
            else if ('CITY'.equalsIgnoreCase(orgclass)) {
                return [lguSvc.lookupCityById(orgid)]
            }
            return []
        }
        
        def getRevisionyears(){
            if (!selectedEntity) 
                return []
            return grSvc.getRyList(selectedEntity.lguid, selectedEntity.ry, selectedEntity.rputype );
        }
            
        def getShowRevision(){
            if (!selectedEntity) return false;
            if (selectedEntity.state != 'CURRENT') return false;
            def rys = getRevisionyears();
            if( !rys ) return false;
            def maxry = rys.ry.max()
            if (selectedEntity.ry >= maxry) return false;
            return true;
        }            
            
    }  
    
]]>    
    </code>   
    <pages>
        <page template="com.rameses.gov.etracs.rpt.faas.ui.FaasExplorerViewPage" />
        <page name="queryform" template="com.rameses.gov.etracs.rpt.faas.ui.FaasListQueryForm"/>
    </pages>
</workunit>