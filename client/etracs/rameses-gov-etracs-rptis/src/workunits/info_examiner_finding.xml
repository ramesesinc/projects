<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    <invokers>
        <invoker type="examinerfinding:create" action="create" caption="Examination Findings (New)" target="popup"/>
        <invoker type="examinerfinding:open" action="open" caption="Examination Findings" target="popup"/>
        
        <invoker type="formActions" action="_close" caption="Close" mnemonic="c" visibleWhen="#{mode=='read'}"/>
        <invoker type="formActions" action="_close" caption="Cancel" mnemonic="c" visibleWhen="#{mode=='create'}" immediate="true" />
        <invoker type="formActions" action="edit" caption="Edit" mnemonic="e" visibleWhen="#{mode=='read'}"/>
        <invoker type="formActions" action="save" caption="Save" mnemonic="s" shortcut="ctrl S" visibleWhen="#{mode=='create'}"/>
        <invoker type="formActions" action="update" caption="Update" mnemonic="u" shortcut="ctrl S" visibleWhen="#{mode=='edit'}"/>
        <invoker type="formActions" action="delete" caption="Delete" 
            mnemonic="d" 
            visibleWhen="#{mode=='read'}"
            role="APPRAISAL_CHIEF,TAXMAPPER_CHIEF,ADMIN" />
   </invokers>
   <code>

<![CDATA[

        
import com.rameses.rcp.annotations.* 
import com.rameses.rcp.common.* 
import com.rameses.osiris2.client.*
import com.rameses.osiris2.common.*
import com.rameses.gov.etracs.rptis.util.*;

class ExaminationFindingController
{
    @Binding
    def binding;

    @Service('ExaminationService')
    def svc;
    
    def MODE_READ = 'read';
    def MODE_CREATE = 'create';
    def MODE_EDIT = 'edit';
    
    def onadd = {}; //add handler
    def onupdate = {}; //edit handler
    def ondelete = {}; //delete handler
    def mode; 
    def showActions;
    
    boolean allowEdit;
    
    def entity;
    def finding;
    
    String title = 'Examination Finding';
    
    void create(){
        finding  = [
            objid      : 'F' + new java.rmi.server.UID(),
            parent     : [objid:entity.objid],
            inspectors : [],
            photos     : [],
            notedby    : OsirisContext.env.FULLNAME,
            notedbytitle: OsirisContext.env.JOBTITLE,
            doctype  : entity.doctype,
        ]
        mode = MODE_CREATE;
    }
    
    void open(){
        finding.putAll(svc.open(finding));
        loadImages();
        mode = MODE_READ;
    }
    
    void save(){
        svc.create(finding);
        mode = MODE_READ;
        if (onadd) onadd(finding);
    }
    
    void update(){
        svc.update(finding);
        mode = MODE_READ;
        if (onupdate) onupdate(finding);
    }
    
    void edit(){
        mode = MODE_EDIT;
    }

    def delete() {
        if (MsgBox.confirm('Delete examination?')) {
            svc.removeFinding(finding);
            ondelete(finding);
            return '_close';
        }
    }
    
    
    
    /*=============================
    * INSPECTOR SUPPORT
    *============================*/
    def selectedInspector;
    
    def inspectorListHandler = [
        fetchList : { return finding.inspectors },
        
        createItem : { return [:] },
        
        onAddItem : { item -> 
            finding.inspectors << item;
        },
        
        onRemoveItem : { item ->
            if (MsgBox.confirm('Remove selected item?') ){
                finding.inspectors.remove(item);
                return true;
            }
            return false;
        }
        
    ] as EditorListModel;
    
    
    
    /*=============================
    * PHOTOS SUPPORT
    *============================*/
    def selectedPhoto;
    def images;
    
    def photoListHandler = [
        fetchList : { return images }
    ] as BasicListModel;
    
    
    def addPhoto(){
        return InvokerUtil.lookupOpener('upload:image', [
            entity : finding,
            parentid: entity.objid,
            afterupload: {
                loadImages();
            }
        ]);
    }
    
    def removePhoto(){
        if (MsgBox.confirm('Remove image?')){
            DBImageUtil.getInstance().deleteImage(selectedPhoto.objid);
            images.remove(selectedPhoto);
            photoListHandler.load();
        }
    }
    
    def getImage(){
        return DBImageUtil.getInstance().getImage(selectedPhoto?.objid);
    }
    
            
    void loadImages(){
        images = [];
        try{
           images = DBImageUtil.getInstance().getImages(finding?.objid);    
        }
        catch(e){
            println 'Load Images error ============';
            e.printStackTrace();
        }
        photoListHandler?.load();
    }    
}
       
       
]]>

   </code>
    
    <pages> 
        <page template="com.rameses.gov.etracs.rpt.examination.ui.ExaminationPage"/>
    </pages>
</workunit>


