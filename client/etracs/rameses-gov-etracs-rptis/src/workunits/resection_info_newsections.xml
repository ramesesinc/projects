<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    <invokers>
        <invoker type="resection:info" action="init" caption="New Sections" index="1"/>
        
        <invoker type="formActions" action="init" caption="Refresh" mnemonic="r" />
        <invoker type="formActions" action="edit" caption="Edit" mnemonic="e" visibleWhen="#{showActions == true}" role="TAXMAPPER"/>
        <invoker type="formActions" action="save" caption="Save" mnemonic="s" shortcut="ctrl S" visibleWhen="#{mode != 'read'}" />
   </invokers>
   <code>

<![CDATA[
        
import com.rameses.rcp.annotations.* 
import com.rameses.rcp.common.* 
import com.rameses.osiris2.client.*
import com.rameses.osiris2.common.*
import com.rameses.gov.etracs.rptis.util.RPTUtil;

class ResectionNewSectionsController
{
    @Binding
    def binding;
    
    def svc;
    
    def entity;
    def selectedItem;
    
    String title = 'New Sections Information';
    
    def sections;
    def affectedlands;
    def affectedimprovements;
    
    def selectedSection;
    def selectedLand;
    def selectedAffectedRpu;
    
    def mode;
    def MODE_READ = 'read';
    def MODE_EDIT = 'edit';
    
    
    
    void init(){
        sections = svc.getResectionItems(entity.objid)
        def items = svc.getResectionAffectedRpus(entity.objid)
        affectedlands = items.findAll{it.rputype == 'land'}
        affectedimprovements = items.findAll{it.rputype != 'land'}
        mode = MODE_READ;
        landListHandler?.load();
        affectedrpuListHandler?.load();
    }
    
    
    void edit(){
        mode = MODE_EDIT;
    }
    
    void save(){
        mode = MODE_READ;
    }
    
    

     /*-----------------------------------------------------
     * 
     * SECTIONS SUPPORT
     *  
     *----------------------------------------------------*/
     
    def sectionListHandler = [
        fetchList : { return sections },
        validate  : { li ->
            def item = li.item;
            item.putAll(svc.saveSection(entity, item));
        },
    ] as EditorListModel
    
    
    
    /*-----------------------------------------------------
     * 
     * AFFECTED LAND SUPPORT
     *  
     *----------------------------------------------------*/
    
    def landListHandler = [
        getRows   : { 1000 },
            
        fetchList : { return affectedlands },
        
        onColumnUpdate : { item, colname ->
            if (colname == 'newsection'){
                def section = sections.find{it.newsection == item.newsection}
                if (!section){
                    throw new Exception('Invalid section. Section must be one of the new sections defined.')
                }
                section.landcount++;
                section.putAll(svc.saveSection(entity, section));
                sectionListHandler.refresh();
            }
            buildNewPin(item);
            def improvements = affectedimprovements.findAll{it.prevrpid == item.prevrpid}
            improvements.each{ impv ->
                impv.newsection = item.newsection;
                impv.newparcel = item.newparcel;
                impv.newpin = item.newpin;
                affectedrpuListHandler.refresh();
                impv.putAll(svc.saveAffectedRpu(impv));
            }
        },
            
        validate  : { li ->
            def item = li.item;
            RPTUtil.required('New Section', item.newsection);
            RPTUtil.required('New Parcel', item.newparcel);
            RPTUtil.required('Memoranda', item.memoranda);
            checkDuplicateLand(item);
            item.putAll(svc.saveAffectedRpu(item));
        },
    ] as EditorListModel
    
    
    
    void checkDuplicateLand(item){
        def dup = affectedlands.find{ it.objid != item.objid && 
                                      it.newsection == item.newsection && 
                                      it.newparcel == item.newparcel
                                }
        if (dup)
            throw new Exception('Duplicate Section and Parcel is not allowed.');
    }
    
    
        
    void buildNewPin(item){
        item.newpin = entity.barangaypin;
        if (item.newsection)
            item.newpin += '-' + item.newsection;
        if (item.newparcel)
            item.newpin += '-' + item.newparcel;
        if (item.newsuffix != null && item.newsuffix > 0) {
            item.newpin += '-' + item.newsuffix;
        }
    }    
    
    
    
          
    /*-----------------------------------------------------
     * 
     * AFFECTED RPUS SUPPORT
     *
     *----------------------------------------------------*/
        
    def affectedrpuListHandler = [
        getRows   : { 1000 },
        fetchList : { return affectedimprovements },

        onColumnUpdate : { item, colname ->
            RPTUtil.required('New Section', item.newsection);
            RPTUtil.required('New Parcel', item.newparcel);
            if (colname == 'newsuffix'){
                svc.validateSuffix(item.rputype, item.newsuffix)
            }
            buildNewPin(item);
        },
        
        validate : { li -> 
            def item = li.item;
            RPTUtil.required('New Suffix', item.newsuffix);
            RPTUtil.required('Memoranda', item.memoranda);
            checkDuplicateSuffix(item);
            item.putAll(svc.saveAffectedRpu(item));
        }
        
    ] as EditorListModel 
            
                
    void checkDuplicateSuffix(item){
        //check duplicate section and parcel
        def dup = affectedimprovements.find{ it.objid != item.objid && 
                                      it.newpin == item.newpin && 
                                      it.newsuffix == item.newsuffix
                                }
        if (dup)
            throw new Exception('Duplicate Suffix is not allowed.');
    }
    
    
    
    
    def getLandCount(){
        if (affectedlands )
            return affectedlands.size();
        return 0;
    }
    
    
    def getImprovementCount(){
        if (affectedimprovements)
            return affectedimprovements.size();
        return 0;
    }
    
    
    
    boolean getShowActions(){
        if (entity.taskstate && entity.taskstate.matches('assign.*')) return false;
        if (entity.state.matches('FORAPPROVAL|FORPROVAPPROVAL|APPROVED')) return false;
        if (mode != MODE_READ) return false;
        return true;
    }
}
       
]]>

   </code>
    
    <pages> 
        <page template="com.rameses.gov.etracs.rpt.resection.ResectionInfoNewSectionPage"/>
    </pages>
</workunit>


