<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    <invokers>
        <invoker folderid="/explorer/txn/rpt/util" 
            action="init" 
            caption="Modify PIN" target="popup" index="500"
            role="ADMIN,APPRAISER" permission="util.modifypin" />
    </invokers>
    
    <code lang="groovy">

<![CDATA[        

import com.rameses.rcp.common.*
import com.rameses.rcp.annotations.*
import com.rameses.osiris2.client.*
import com.rameses.gov.etracs.rpt.util.*;

public class ModifyPINUtilityController {
    
    @Binding
    def binding
    
    @Caller
    def caller
    
    @Service('RPTUtilityService') 
    def svc 
    
    @Service('LGUService')
    def lguSvc

    @Service('Var')
    def varSvc 
    
    @PropertyChangeListener
    def listener = [
        '.*' : { 
            RPTUtil.buildPin(entity, varSvc);
            entity.newpin = entity.fullpin;
            binding?.refresh('entity.newpin');
        } 
    ]
    
    def entity
    def faas
    def mode  = 'update'
    
    def lgutype
    
    void initFromFaas(){
        faas = [:]
        faas.putAll(entity);

        init();
        
        entity.barangay = lguSvc.lookupBarangayById(faas.rpu.rp.barangayid)
        entity.munidistrict = lguSvc.lookupMunicipalityById( entity.barangay.parentid )
        if (! entity.munidistrict) entity.munidistrict = lguSvc.lookupDistrictById( entity.barangay.parentid)
        entity.provcity = lguSvc.lookupProvinceById(entity.munidistrict.parentid)
        if (!entity.provcity) entity.provcity = lguSvc.lookupCityById(entity.munidistrict.parentid)
        
        entity.provcity = provcityList.find{it.objid == provcity.objid}
        entity.munidistrict = muniDistrictList.find{it.objid == munidistrict.objid}
        entity.barangay = barangayList.find{it.objid == barangay.objid}
        mode = 'byfaas'
    }
    
    
    void init(){
        entity = [
            lgutype : OsirisContext.env.ORGCLASS.toLowerCase(),
            pintype : 'new',
            section : 0,
            parcel  : 0,
            suffix  : 0,
            useoldpin : false,
        ]
    }
    
    def updatePin() {
        if( MsgBox.confirm('Update existing PIN with new information?') ) {
            entity.faasid   = faas.objid
            entity.rpuid    = (faas.rpuid ? faas.rpuid : faas.rpu.objid)
            entity.rputype  = (faas.rputype ? faas.rputype : faas.rpu.rputype)
            entity.state    = faas.state 
            entity.oldpin   = (faas.fullpin ? faas.fullpin : faas.rpu.fullpin)
            entity.ry       = faas.ry 
            entity.barangay.provcity = entity.provcity 
            entity.barangay.munidistrict = entity.munidistrict

            def rp = svc.updatePin(entity)
            if (caller?.faas){
                caller.faas.fullpin = entity.newpin
                caller.faas.rpu?.fullpin = entity.newpin
                if ( rp ) {
                    caller.faas.rp.pintype = rp.pintype 
                    caller.faas.rp.pin = rp.pin
                    caller.faas.rp.section = rp.section
                    caller.faas.rp.parcel = rp.parcel
                }
            }
            clearInfo()
            binding?.focus('faas')
        }
        if ( mode == 'byfaas') {
            caller?.binding.refresh('faas.rpu.*')
            return '_close'
        }
    }
    
    void clearInfo() {
        entity.clear();
        entity.pintype    = 'new';
        entity.suffix     = 0;
        entity.useoldpin  = false;
        faas = null;
    }
    
    def getLookupFaas() {
        return InvokerUtil.lookupOpener('faas:lookup',[
            onselect : { f ->
                this.faas = f; 
                entity.suffix = 0
                entity.rputype = f.rputype;
                entity.pintype = (f.pintype ? f.pintype : 'new');
                
                def tokens = f.fullpin.tokenize('-');
                entity.munidistrict = getMuniDistrictList().find{it.indexno == tokens[1]}
                entity.barangay = getBarangayList().find{it.indexno == tokens[2]}
                
                if( f.rputype != 'land' ) {
                    try {
                        def ssuffix = tokens[5].replace('(','').replace(')','')
                        entity.suffix = Integer.parseInt(ssuffix)
                    }
                    catch( e ) {
                        entity.suffix = 0
                    }
                }
                RPTUtil.buildPin(entity, varSvc);
                binding.refresh('entity.*|faas.*')
            },
            
            onempty : {
                this.faas = null;
            }
        ])
    }
    
    List getPinTypeList() {
        return ['new', 'old']
    }
    
    
    List getProvcityList() {
        def list = []
        list += lguSvc.lookupCities([:]);
        list += lguSvc.lookupProvinces([:]);
        return list;
    }
    
    List getMuniDistrictList() {
        def list = []
        list += lguSvc.lookupMunicipalities([:])
        list += lguSvc.lookupDistricts([:])
        return list;
    }
    
    List getBarangayList() {
        return lguSvc.lookupBarangaysByParentid(entity.munidistrict?.objid);
    }
    
}


]]>
</code>
    
    <pages>
        <page template="com.rameses.gov.etracs.rpt.util.ModifyPinPage" />
    </pages>
</workunit>

