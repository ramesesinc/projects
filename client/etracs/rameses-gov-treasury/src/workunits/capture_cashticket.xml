<workunit>
   <invokers>
         <invoker folderid="explorer/txn/treasury" caption="Cash Ticket (Capture)" action="init" target="window" index="299"  
            role="DATA_CONTROLLER"/>
         
         <invoker type="formActions" caption="Close" name="_close" immediate="true" mnemonic="c" shortcut="ctrl C" icon="images/toolbars/cancel.png"/>
         <invoker type="formActions" caption="Next" name="start" visibleWhen="#{mode == 'initial'}" mnemonic="n" shortcut="ctrl N" icon="images/toolbars/arrow_right.png"/>
         <invoker type="formActions" caption="Back" name="back" visibleWhen="#{mode == 'create'}" mnemonic="b" shortcut="ctrl B" icon="images/toolbars/arrow_left.png"/>
         <invoker type="formActions" caption="Submit" name="submit" visibleWhen="#{mode == 'create' }" mnemonic="s" shortcut="ctrl S" icon="images/toolbars/save.png"/>
         <invoker type="formActions" caption="Submit For Online Remittance" name="submitForOnlineRem" visibleWhen="#{mode == 'saved' }" mnemonic="s" />
     
     </invokers>
   
   <code>
        <![CDATA[    
        import com.rameses.rcp.annotations.*
        import com.rameses.rcp.common.*
        import com.rameses.osiris2.client.*
        import com.rameses.osiris2.common.*
        import com.rameses.enterprise.treasury.cashreceipt.*
        
        class  CashTicketReceiptController {
            
            @Service("CashReceiptService")
            def service;
            
            @Service("CollectionTypeService")
            def collectionTypeSvc;
            
            @Service("CashTicketControlService")
            def controlSvc;
            
            @Binding
            def binding;
            
            String title = "Cash Ticket (Capture)" ;
            def itemAmount = 0.0;
            def entity;
            def formTypes;
            def formType
            def collectionTypes;
            def collectiontype;
            def mode 
            
            @PropertyChangeListener
            def listener = [
                 "formType": { o->
                    entity.formno = o.objid;
                    entity.formtype = "cashticket";
                    collectionTypes = collectionTypeSvc.getCollectionTypes([formno: o.objid]);
                },
                "collectiontype": { o->
                    entity.collectiontype = o;
                 },
                "entity.amount": { o->
                    if( ( (double)o % (double)entity.denomination)!=0) {
                        MsgBox.err("Amount must be exact by denomination");
                        entity.amount = 0.0 
                        binding.refresh("entity.amount");
                        return false;
                    }    
                    entity.qtyissued = (int)  ((double)o / (double)entity.denomination);
                    binding.refresh("entity.qtyissued");
                },
                "entity.qtyissued": { o->
                    entity.amount = o * entity.denomination;
                    binding.refresh("entity.amount");
                },
            ]
            
            void init() {
                formTypes = collectionTypeSvc.getFormTypesCashticket();
                entity = [:]
                entity.objid = "RCT"+new java.rmi.server.UID(); 
                entity.txnmode = 'CAPTURE'
                entity.amount = 0;
                entity.totalcash = 0;
                entity.totalnoncash = 0;
                entity.balancedue = 0;
                entity.cashchange = 0;
                entity.totalcredit = 0;
                entity.paymentitems = [];	
                entity.batchcapture = true
                mode='initial'
            }
            
            def start() {
                mode ="create"
                def m = controlSvc.getControlForCapture( entity )
		entity.user = m.user;
		entity.controlid = m.controlid;
		entity.issuanceid = m.issuanceid;	
		entity.qtyissued = 0;
		entity.stub = entity.formno;
		entity.denomination = m.denomination;
		entity.payer = [:];
		entity.paidby = entity.collector.name;
		entity.paidbyaddress = "-";
		entity.series = 0;
                entity.items = []
                entity.org = m.org
                return "main"
            }
            
            def back() {
                mode = "initial"
                return "default"
            }
            
            def itemListModel = [
                fetchList: { o->
                    return entity.items;
                },
                onAddItem: {o-> 
                    entity.items << o;
                    itemAmount += o.amount;
                },
                onColumnUpdate: {o,name-> 
                    if(entity.items) {
                        itemAmount = entity.items.sum{ it.amount };
                    }
                },
                onRemoveItem: { o->
                    if(!MsgBox.confirm("You are about to remove this entry. Proceed?")) 
                        return false;
                    entity.items.remove( o );
                    itemAmount = 0;
                    if( entity.items ) {
                       itemAmount = entity.items.sum{ it.amount };
                    }
                    return true;
                }
            ] as EditorListModel;
            

            def selectedItem;
            def getLookupItems() {
                return InvokerUtil.lookupOpener("cashreceiptitem:lookup",[
                    "query.txntype" : "cashreceipt",
                    "query.collectorid" : entity.collector.objid,
                    onselect:{ o->
                        if( entity.items.find{ it.item.objid == o.objid }!=null )
                            throw new Exception("This item has already been added");
                        selectedItem.item = o;
                    }
                ]); 
            }
            
            void submit() {
                if(!entity.items)
                    throw new Exception("Please specify at least one item");
                if(itemAmount!= entity.amount)
                    throw new Exception("Total of items must be equal to amount collected");
                if( MsgBox.confirm('You are about to post this transaction. Continue?')) {
                    entity = service.post( entity );
                    MsgBox.alert( "Receipt has been successfully saved.");
                    mode = "saved"
                }
            }
            
            void submitForOnlineRem() {
                mode = 'submitted'
                service.updateState( [state:"POSTED", objid: entity.objid])
                
            }
            
        }
        ]]>
        
    </code>
    
    <pages>
        <page template="com.rameses.gov.treasury.cashticket.CashTicketCaptureInitPage"/>
        <page name="main" template="com.rameses.gov.treasury.cashticket.CashTicketReceiptPage"/>
    </pages>
    
</workunit>
   
