<workunit>
    
   <invokers>
       <!--
         <invoker type="liquidationcapture:create" caption="Liquidation (Capture) " action="init" target="window"/>
         <invoker type="liquidationcapture:open" caption="Liquidation (Capture)" action="open" target="window"/>
        -->
        
        <invoker folderid="/explorer/txn/treasury" caption="Liquidations (Capture)" index="31"  action="init" target="window"
            role="DATA_CONTROLLER" />
        
         <invoker type="formActions" caption="Close" name="_close"  immediate="true" mnemonic="c" shortcut="ctrl C" icon="images/toolbars/cancel.png"/>
         <invoker type="formActions" caption="Next" name="start" visibleWhen="#{mode == 'initial'}" mnemonic="n" shortcut="ctrl N" icon="images/toolbars/arrow_right.png"/>
         <invoker type="formActions" caption="Submit" name="submit" visibleWhen="#{mode == 'create'}" mnemonic="s" shortcut="ctrl S" icon="images/toolbars/save.png"/>
         
         <invoker type="formActions" caption="Reports" name="popupReports"   
            visibleWhen="#{mode == 'read' }" category="liquidation:reports" />
     </invokers>
   
   <code>
       <![CDATA[
        import com.rameses.osiris2.common.*;
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import java.rmi.server.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.util.*;
        
        class LiquidationCaptureController {
        
            @Binding
            def binding;
        
            @Service("LiquidationCaptureService")
            def service;
            
            @Service("LiquidationService")
            def svc;
        
            String title = "Liquidation (Capture)";
            def entity;
            def cashBreakdown;
            def mode = 'initial';
            def listModel;
            def selectedItem;
            def selectedCheck;
            
            def total = 0.0;
            def breakdown = 0.0;
            def remittances 
            def liquidationofficerlist
            
            @PropertyChangeListener 
            def listener = [
                "entity.liquidatingofficer":{ o-> 
                    remittances = service.getUnliquidatedRemittances([liquidatingofficerid:o.objid])
                    remittancesModel.load();
                    if( remittances ){
                        entity.amount = remittances.amount.sum()   
                        entity.totalcash = remittances.totalcash.sum();
                        entity.totalnoncash = remittances.totalnoncash.sum();
                    }
                    binding.refresh("entity.amount");
                }
            ]
            
            def getExtActions() {
                return InvokerUtil.lookupActions( "liquidation:formActions", [entity:entity] );
            }
            
            def popupReports(def inv) {
                def popupMenu = new PopupMenuOpener();
                def list = InvokerUtil.lookupOpeners( inv.properties.category, [entity:entity] );
                list.each{
                    popupMenu.add( it );
                }
                return popupMenu;
            }
            
            void init() {
                mode = "initial";
                entity = [:]
                entity.objid = "LIQ" + new UID();
                entity.cashier = [:]
                entity.state = "CAPTURE"
                entity.amount = 0.0
                entity.totalcash = 0.0
                entity.totalnoncash = 0.0
                liquidationofficerlist = service.getLiquidatingOfficers()
                remittances = []
            }
            
            def back() {
                mode = "initial";
                return "default";
            }
            
            def selectAll() {
                if( remittances ){
                    remittances.each{it.selected = true} 
                    remittancesModel.load();
                    entity.amount = remittances.amount.sum()   
                    entity.totalcash = remittances.totalcash.sum();
                    entity.totalnoncash = remittances.totalnoncash.sum();
                    binding.refresh()
                 }
            }
            
            def deselectAll() {
                remittances.each{it.selected = false} 
                remittancesModel.load();
                entity.amount = 0.0
                entity.totalcash = 0.0 
                entity.totalnoncash = 0.0
                binding.refresh()
            }
            
            def start() {
                mode = "create";
                entity.cashbreakdown = [];
                entity.remittances = remittances.findAll{it.selected == true}
                def rem = service.init( [remittances:  "'" + entity.remittances.objid.join("','") + "'" ] )
                entity.fundsummary = rem.fundsummary;
                entity.checks = rem.checks 
                cashBreakdown = InvokerUtil.lookupOpener("cash:breakdown", [
                    entries: entity.cashbreakdown, onupdate: { o->
                        breakdown = o;
                        total = entity.totalnoncash+breakdown;
                        binding.refresh("breakdown|total");
                    }] );
                return "main";
            }
            
            def open(){
                mode = "read";
                entity = svc.open(entity);
                cashBreakdown = InvokerUtil.lookupOpener("cash:breakdown", [entries: entity.cashbreakdown, allowEdit:false] );    
                total = entity.totalcash + entity.totalnoncash;
                breakdown = entity.cashbreakdown.sum{it.amount};
                return "main"
            }
            
            void submit() {
                if( breakdown != entity.totalcash )
                    throw new Exception("Cash breakdown must equal total cash");
                if( MsgBox.confirm("You are about to submit this liquidation. Please ensure the entries are correct")) {
                    entity = svc.post( entity );
                    mode = "read";
                    MsgBox.alert("Posting successful");
                }
            }
            
            def remittancesModel = [
                fetchList: { o->return remittances; },
                , 
                onColumnUpdate: {item, colname-> 
                    if (colname == 'selected'){
                        if( item.selected == true) {
                            entity.amount += item.amount
                            entity.totalcash += item.totalcash
                            entity.totalnoncash += item.totalnoncash
                        } else {
                            entity.amount -= item.amount 
                            entity.totalcash -= item.totalcash
                            entity.totalnoncash -= item.totalnoncash
                        }
                        binding.refresh("entity.amount")
                    }
                        
                }
            ] as EditorListModel;
            
            def fundSummaryModel = [
                fetchList: { o->return entity.fundsummary; }
            ] as EditorListModel;
            
            def checkModel = [
                fetchList: {
                    return entity.checks;
                }
            ] as BasicListModel;
            
        }      
       ]]>
   </code>
   
   <pages>
       <page template="com.rameses.gov.treasury.liquidation.capture.LiquidationCaptureInitPage" />
       <page name="main" template="com.rameses.enterprise.treasury.views.LiquidationViewPage" />
   </pages>
   
</workunit>