<workunit>
    <invokers>
        <invoker type="crimecase:addRespondent" action="initCreate" caption="Add Respondent" target="popup" />
        <invoker type="crimecase:editRespondent" action="initEdit" caption="Edit Respondent" target="popup" />
    </invokers>
    
    <code>
    <![CDATA[
        import com.rameses.rcp.annotations.*;
        import com.rameses.rcp.common.*;
        import com.rameses.osiris2.client.*;
        import java.rmi.server.UID;
        
        class CrimeCaseRespondentController
        {
            @Binding
            def binding;
        
            def onselect;
            def crimes;
            def respondent;
            def mode;
            def respondentinfo;
            def selectedCrime;
            
            def MODE_CREATE = 'create';
            def MODE_EDIT = 'edit';
            
            def participationList = [
                [key:'PRIMARY', value:'PRIMARY'],
                [key:'SECONDARY', value:'SECONDARY'],
                [key:'NONE', value:'NONE']
            ];
            
            void initCreate() {
                respondentinfo = [:];
                respondentinfo.respondentcrimes = [];
                respondentinfo.objid = "CCR" + new UID();
                mode = MODE_CREATE;
            }
            
            void initEdit() {
                mode = MODE_EDIT;
            }
            
            def ok() {
                if( onselect ) {
                    if( ! respondentinfo.respondentcrimes ) throw new Exception( 'Please specify atleast one crime.' )
                
                    respondentinfo.respondentcrimes?.each {
                        if( ! it.participation )
                            throw new Exception( "Please specify the participation information for crime '" + it.title + "'." )
                    }
                    onselect( respondentinfo );
                }
                
                return '_close';
            }
            
            def cancel() { 
                return '_close';
            }
            
            void removeRespondentCrime() {
                if( ! selectedCrime ) return ;
                if( mode == MODE_EDIT ) {
                    def newcrime = respondentinfo._newRespondentCrimes.find{ it.objid == selectedCrime.objid }
                    if( ! newcrime ) {
                        respondentinfo._deletedRespondentCrimes << selectedCrime;
                    }
                    else {
                        respondentinfo._newRespondentCrimes.remove( newcrime );
                    }
                }
                
                respondentinfo.respondentcrimes.remove( selectedCrime );
            }
            
            def getLookupRespondent() {
                return InvokerUtil.lookupOpener( 'personalinfo:lookup', [
                    onselect : { o->
                        respondentinfo.respondentid = o.objid;
                        respondentinfo.lastname = o.lastname;
                        respondentinfo.firstname = o.firstname;
                        respondentinfo.middlename = o.middlename;
                        binding.refresh('respondentinfo');
                    }
                ]);
            }
            
            def getLookupCrimeCaseCrime() {
                return InvokerUtil.lookupOpener( 'crimecasecrime:lookup', [
                    crimes   : crimes,
                    onselect : { o->
                        if( respondentinfo.respondentcrimes.find{ it.crimeid == o.crimeid } != null )
                            throw new Exception( "Item already added" );
                    
                        def m = [:];
                        m.objid = 'CCRC' + new UID();
                        m.crimecaserespondentid = respondentinfo.objid;
                        m.crimeid = o.crimeid;
                        m.title = o.title;
                        m.participation = '';
                        m.status = 'OPEN';
                        respondentinfo.respondentcrimes << m;
                        if( mode == MODE_EDIT ) respondentinfo._newRespondentCrimes << m;
                        respondentCrimeModel.reload();
                    }
                ]);
            }
            
            def respondentCrimeModel = [
                fetchList : { o-> return respondentinfo.respondentcrimes; }
            ] as EditorListModel
        }
        
    ]]>
    </code>
    
    <pages>
        <page template="com.rameses.gov.police.crimecase.AddRespondentPage" />
    </pages>
</workunit>