<workunit>
    <invokers>
        <invoker type="individualentity:create" caption="Individual Entity (Create)" action="create" target="popup" role="MASTER" permission="individualentity.create"/>
        <invoker type="quick_launcher" code="TP01" caption="Individual Entity (Create)" action="create" target="popup" role="MASTER" permission="individualentity.create"/>
        
        <!--
        <invoker type="formActions" caption="Close" action="_exit" visibleWhen="#{initiator == 'create'}"/>
        <invoker type="formActions" caption="Close" action="_close" visibleWhen="#{initiator != 'create'}"/>
        <invoker type="formActions" caption="Remove" action="remove" role="MASTER" permission="individualentity.delete" />
        -->
        
        <!-- used to check if we can allow dupplicate -->
        <invoker type="individualentity:approveduplicate" role="APPROVER" permission="individualentity.approveduplicate" />
    </invokers>
    
    <code>
    <![CDATA[
        import com.rameses.rcp.annotations.*;
        import com.rameses.rcp.common.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.osiris2.common.*;
        import java.rmi.server.UID;

        public class IndividualEntityCreateController extends PageFlowController {
            
            @Service("IndividualEntityService")
            def service;
            
            @Service("IndividualEntityNameMatchService")
            def matchService;
            
            def onselect;
            def entity;
            def step;
            boolean hasMatch;
            def matchList;
            def selectedItem;
            def genderList = LOV.GENDER.collect{[name:it.key, caption:it.value]};
            def civilStatusList = LOV.CIVIL_STATUS.collect{[name:it.key, caption:it.value]};
            def mode = "create";
            
            def photoHandler = Inv.lookupOpener( 'photo:component', [
                handler: {o->entity.photo = o.image; entity.thumbnail = o.thumbnail;}  
            ] );
            
            def addressComponent; 

            def citizenshipLookup = [
                fetchList: { o->
                    return service.getCitizenshipList(o);
                }
            ] as SuggestModel;
            
            def religionLookup = [
                fetchList: { o->
                    return service.getReligionList(o);
                }
            ] as SuggestModel;   
            
            def professionLookup = [
                fetchList: { o->
                    return service.getProfessionList(o);
                }
            ] as SuggestModel; 
            
            def create() {
                doCreate();
                return super.start();
            }
            
            void doCreate(){
                step = "initial";
                if(!entity) {
                    entity = [ address: [:] ];
                    if( !entity.objid) entity.objid = 'IND'+new UID();
                }  
                if(!entity.address) entity.address = [:];
                addressComponent = Inv.lookupOpener('address:component', [
                    entity: entity.address
                ]); 
            }
            
            void initNew(){
                entity = null;
                addressComponent = null;
                doCreate();
            }
            
            void checkHasMatch() {
                hasMatch = false;
                matchList =  matchService.getMatches(entity);
                if(matchList.size()>0){
                    hasMatch = true;
                    selectedItem = matchList[0];
                }    
            }
            
            def listModel = [
                fetchList: { o->
                    return matchList;
                }
            ] as BasicListModel;
            
            def selectMatchedEntity() {
                if(!selectedItem) return;
                onselect( selectedItem );
                return "_close";
            }
            
            def getInfo() {
                return entity;
            }
            
            def getSelectedPhoto() {
                if(!selectedItem) return null;
                if(!selectedItem.photo) {
                    selectedItem.photo = service.getPhoto( [objid: selectedItem.objid] );
                }
                return selectedItem.photo;
            }
            
            void validateAdd() {
                if( matchList.find{ it.match == 100.0 } ) {
                    boolean allowed = false;
                    try {
                        def test = Inv.lookupOpener( "individualentity:approveduplicate", [:] );
                        if(test) allowed = true;
                    }
                    catch(e) {;}
                    if( !allowed )  {
                        throw new Exception("There is an exact match for the record. You do not have enough rights to override.");                    
                    }    
                }    
            }
            
            def saveNew() {
                entity = service.create( entity );
                if( onselect ) {
                    onselect(entity);
                }    
                loadOptions();
            }
            
            def optionList;
            def selectedOption;
            void loadOptions(){
                optionList = Inv.lookupOpeners( "individualentity:option", [entity: entity] );
                if(optionList.size() > 0 ) {
                    selectedOption = optionList[0];
                }
            }
            
        }        
   ]]>
   </code>
   <pageflow>
       <start>
           <transition to="#{step}"/>
       </start>
       <page name="initial" title="New Individual Entity (Initial)">
           <transition to="check-has-match" caption="Next" immediate="false" mnemonic="n"/>
       </page>
       <process name="check-has-match" action="checkHasMatch">
           <transition to="match" cond="#{hasMatch == true}"/> 
           <transition to="add" cond="#{hasMatch == false}"/> 
       </process>
       <page name="match" title="New Individual Entity (Possible Duplicate Match)">
           <transition to="initial" caption="Back" name="back" mnemonic="b" />
           <transition to="add" name="add" caption="Add as new Entity" action="validateAdd" mnemonic="a"/>
       </page>
       <page name="add" title="New Individual Entity">
           <transition to="initial" caption="Back" name="back" mnemonic="b"/>
           <transition to="check-close" caption="Save" name="save" action="saveNew" mnemonic="s" shortcut="ctrl S"/>
           <transition to="end" name="close" caption="Close" mnemonic="c"/>
       </page>
       <process name="check-close">
           <transition to="end" cond="#{onselect != null}"/> 
           <transition to="main" cond="#{onselect == null}"/> 
       </process>
       <page name="main" title="Individual Entity">
           <transition to="end" name="close" caption="Close" mnemonic="c"/>
           <transition to="initial" name="new" caption="New" action="initNew" mnemonic="n" shortcut="ctrl N"/>
       </page>
       <end/>
   </pageflow>
   <pages>
       <page name="initial" template="com.rameses.entity.ui.IndividualEntityNewInitialPage"/>
       <page name="match" template="com.rameses.entity.ui.MatchNameListPage"/>
       <page name="add"  template="com.rameses.entity.ui.IndividualEntityEditPage"/>
       <page name="main" template="com.rameses.entity.ui.EntityMainPage"/>
   </pages>   
</workunit>