/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.rameses.javafx.control.chart;

import com.rameses.rcp.annotations.Service;
import com.rameses.rcp.common.PropertySupport.PropertyInfo;
import com.rameses.rcp.framework.Binding;
import com.rameses.rcp.ui.UIControl;
import com.rameses.rcp.util.UIControlUtil;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.geometry.Insets;
import javafx.geometry.Side;
import javafx.scene.Scene;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Tooltip;
import javafx.scene.layout.BorderPane;
import resources.Resource;
/**
 *
 * @author Dino Quimson
 */
public class BarChart extends JFXPanel implements UIControl{

    //rameses classes
    private Binding binding;
    private String[] depends;
    private String visibleWhen;
    private String name;
    private String legendSide;
    private String title;
    private String stylesheet;
    private int index;
    private int stretchWidth;
    private int stretchHeight; 
    private int sceneWidth, sceneHeight;
    private double barGap, categoryGap;
    private boolean legendVisible;
    private boolean animated;
    
    //javafx classes
    private JFXPanel fxpanel;
    private BorderPane root;
    private javafx.scene.chart.BarChart barChart;
    
    public BarChart() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private void createScene(){
        fxpanel = this;
        Platform.setImplicitExit(false);
        Platform.runLater(new Runnable(){
            @Override
            public void run() {
                barChart = new javafx.scene.chart.BarChart(new CategoryAxis(), new NumberAxis());
                if(sceneWidth != 0) barChart.setPrefWidth(sceneWidth);
                if(sceneHeight != 0) barChart.setPrefHeight(sceneHeight);
                if(barGap != 0) barChart.setBarGap(barGap);
                if(categoryGap != 0) barChart.setCategoryGap(categoryGap);
                if(legendVisible){
                    barChart.setLegendVisible(legendVisible);
                }else{
                    barChart.setLegendVisible(false);
                }
                if(legendSide != null){
                    if(legendSide.equalsIgnoreCase("top")){
                        barChart.setLegendSide(Side.TOP);
                    }else if(legendSide.equalsIgnoreCase("bottom")){
                        barChart.setLegendSide(Side.BOTTOM);
                    }else if(legendSide.equalsIgnoreCase("right")){
                        barChart.setLegendSide(Side.RIGHT);
                    }else{
                        barChart.setLegendSide(Side.LEFT);
                    }
                }
                if(title != null){
                    Tooltip tooltip = new Tooltip(title);
                    tooltip.install(barChart, tooltip);
                }
                barChart.setAnimated(animated);
                
                root = new BorderPane();
                root.setPadding(new Insets(0, 2, 0, 1));
                root.setCenter(barChart);
                
                Scene scene = new Scene(root);
                scene.getStylesheets().add(Resource.class.getResource("css/map.css").toExternalForm());
                fxpanel.setScene(scene);
            }
        });
    }
    
    @Override
    public Binding getBinding() {
        return binding;
    }

    @Override
    public void setBinding(Binding bndng) {
        this.binding = bndng;
    }
    
    @Override
    public String getName(){
        return name;
    }
    
    @Override
    public void setName(String s){
        this.name = s;
    }

    @Override
    public String[] getDepends() {
        return depends;
    }
    
    public void setDepends(String[] s){
        this.depends = s;
    }

    @Override
    public int getIndex() {
        return index;
    }
    
    public void setIndex(int i){
        this.index = i;
    }

    @Override
    public void load() {
        createScene();
    }

    @Override
    public void refresh() {
        Platform.runLater(new Runnable(){
            @Override
            public void run() {
                List<Map> list = (List<Map>) UIControlUtil.getBeanValue(binding, name);
                Iterator<Map> i = list.listIterator();
                XYChart.Series series = new XYChart.Series();
                while(i.hasNext()){
                    Map data = i.next();
                    series.getData().add(new XYChart.Data(data.get("name"), data.get("value")));
                }
                barChart.getData().add(series);
            }
        });
    }

    @Override
    public void setPropertyInfo(PropertyInfo pi) {
        
    }

    @Override
    public int getStretchWidth() {
        return stretchWidth;
    }

    @Override
    public void setStretchWidth(int i) {
        this.stretchWidth = i;
    }

    @Override
    public int getStretchHeight() {
        return stretchHeight;
    }

    @Override
    public void setStretchHeight(int i) {
        this.stretchHeight = i;
    }

    @Override
    public int compareTo(Object o) {
        return UIControlUtil.compare(this, o);
    }
    
    public String getVisibleWhen(){
        return visibleWhen;
    }
    
    public void setVisibleWhen(String s){
        this.visibleWhen = s;
    }

    public int getSceneWidth(){
        return sceneWidth;
    }
    
    public void setSceneWidth(int i){
        sceneWidth = i;
    }
    
    public int getSceneHeight(){
        return sceneHeight;
    }
    
    public void setSceneHeight(int i){
        sceneHeight = i;
    }
    
    public boolean getLegendVisible(){
        return this.legendVisible;
    }
    
    public void setLegendVisible(boolean b){
        this.legendVisible = b;
    }
    
    public double getBarGap(){
        return this.barGap;
    }
    
    public void setBarGap(double d){
        this.barGap = d;
    }
    
    public double getCategoryGap(){
        return this.categoryGap;
    }
    
    public void setCategoryGap(double d){
        this.categoryGap = d;
    }
    
    public String getLegendSide(){
        return this.legendSide;
    }
    
    public void setLegendSide(String s){
        this.legendSide = s;
    }
    
    public String getTitle(){
        return this.title;
    }
    
    public void setTitle(String s){
        this.title = s;
    }
    
    public String getStyleSheet(){
        return this.stylesheet;
    }
    
    public void setStyleSheet(String s){
        this.stylesheet = s;
    }
    
    public boolean getAnimated(){
        return this.animated;
    }
    
    public void setAnimated(boolean b){
        this.animated = b;
    }
    
}
