import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID;
import com.rameses.util.*;

class ETRACS22To254RPTLedgerMigrationService 
{

	@ActiveDB('etracs254rpt_ledger')
	def em254

	@ActiveDB(value='etracs22rpt_ledger', em='etracs22')
	def em22

	@ActiveDB('rptledger')	
	def ledgerEm

	@Service()
	def self 

	@ProxyMethod
	public def getMigrationStatus(  ) {
		def item = em22.findLedgerForMigrationCount()
		if (item.count == 0)
			return 'PROCESSING'
		return 'DONE'
	}

	@ProxyMethod
	public void initMigrationTables(  ) {
		try{
			try{ em22.dropXLedgerTable() }catch(e){}
			try{ em22.createXLedgerTable() }catch(e){}
			try{ em22.createLedgerMigrateTable() }catch(e){}
			try{ em22.createLedgerMigrateLogTable() }catch(e){}
			self.insertLedgers()
		}
		catch(ign){
			ign.printStackTrace();
			throw ign;
		}
	}

	@Async
	@ProxyMethod
	public void insertLedgers(){
		println 'Inserting rptleders for migration...'
		em22.insertLedgers()
	}

	@ProxyMethod
    public void migrateLedgerByIds(ledgerids) {
    	def ledgerid = null;
		try{
			ledgerids.each{
				ledgerid = it 
				migrateLedger([objid:ledgerid])
			}
		}
		catch(e){
			try{
				println 'Migrate Ledger [ERROR] ' + e.message 
				em22.logMigrateError([objid:ledgerid, log:e.message])
			}
			catch(ign){
				//
			}
		}
		finally{
			em22.deleteXLedger([objid:ledgerid])
		}
    }  


    @ProxyMethod
    public def migrateLedgers(params) {
		if (!params.count) throw new Exception('Count is required')
		
		params._limit = params.count 

	    def ledgers = em22.getLedgersForMigration(params);
    	println 'Migrating Ledger .... ' + ledgers.size()

        ledgers.each{it->
			migrateLedgerByIds([it.objid])
        }

        return ledgers.size()
    }  

    @ProxyMethod
    public void migrateLedgerByTdNo( tdno ) {
    	def ledger = em22.findLedgerByTdno([tdno:tdno])
    	if (!ledger) throw new Exception('Ledger does not exist.')

    	try{
			migrateLedger(ledger)
		}
		catch(e){
			try{
				println 'Migrate Ledger [ERROR] ' + e.message 
				em22.logMigrateError([objid:ledger.objid, log:e.message])
			}
			catch(ign){
				//
			}
		}
		finally{
			em22.deleteXLedger(ledger)
		}
    }

    @ProxyMethod
    public void migrateLedger(rptledger){
		def ledger = em22.findLedgerById(rptledger)
		if (!ledger) throw new Exception('Ledger does not exist.')

		def faas = em254.findFaasById([objid:ledger.faasid])
		if (!faas) throw new Exception('Faas does not exists.')
		
		ledger.putAll(faas)

		ledger.quarterlyinstallmentpaidontime = toBoolean(ledger.quarterlyinstallmentpaidontime, false)
		ledger.qtrlypaymentpaidontime = toBoolean(ledger.qtrlypaymentpaidontime, false)
		ledger.firstqtrpaidontime = toBoolean(ledger.firstqtrpaidontime, false)
		ledger.qtrlypaymentavailed = toBoolean(ledger.qtrlypaymentavailed, false)
		ledger.undercompromise = toBoolean(ledger.undercompromise, false)
		ledger.advancebill = toBoolean(ledger.advancebill, false)
		ledger.taxable = toBoolean(ledger.taxable, true)

		ledger.lastbilledyear = toInteger(ledger.lastbilledyear, 0)
		ledger.lastbilledqtr = toInteger(ledger.lastbilledqtr, 0)

		ledger.partialbasicdisc = toDecimal(ledger.partialbasicdisc, 0.0)
		ledger.partialsefdisc = toDecimal(ledger.partialsefdisc, 0.0)
		
		ledgerEm.save(ledger)
		
		saveLedgerFaases(ledger)
		saveLedgerCredits(ledger)

		try{
			em22.logMigratedLedger(ledger)
		}
		catch(ign){
			//
		}
	}

	void saveLedgerFaases(ledger){
		em22.getLedgerFaases(ledger).each{
			it.backtax = toBoolean(it.backtax, false)
			it.reclassed = toBoolean(it.reclassed, false)
			it.taxable = toBoolean(it.taxable, true)
			it.systemcreated = toBoolean(it.systemcreated, false)

			it.idleland = toInteger(it.idleland, 0)
			it.fromqtr = toInteger(it.fromqtr, 0)
			it.toqtr = toInteger(it.toqtr, 0)

			ledgerEm.save(it, 'ledgerfaas')
		}
	}

	void saveLedgerCredits(ledger){
		def list = em22.getLedgerCredits(ledger)
		println 'list -> ' + list 
		em22.getLedgerCredits(ledger).each{
			it.paidby.name = (it.paidby.name == null ? '-' : it.paidby.name)
			it.paidby.address = (it.paidby.address == null ? '-' : it.paidby.address)
			it.collector = (it.collector == null ? '-'  : it.collector)

			it.fromyear = toInteger(it.fromyear, 0)
			it.fromqtr = toInteger(it.fromqtr, 1)
			it.toyear = toInteger(it.toyear, 0)
			it.toqtr = toInteger(it.toqtr, 0)
			
			it.basic = toDecimal(it.basic, 0.0)
			it.basicint = toDecimal(it.basicint, 0.0)
			it.basicdisc = toDecimal(it.basicdisc, 0.0)
			it.basicidle = toDecimal(it.basicidle, 0.0)
			it.sef = toDecimal(it.sef, 0.0)
			it.sefint = toDecimal(it.sefint, 0.0)
			it.sefdisc = toDecimal(it.sefdisc, 0.0)
			it.sefidle = toDecimal(it.sefidle, 0.0)
			it.firecode = toDecimal(it.firecode, 0.0)
			it.amount = toDecimal(it.amount, 0.0)

			ledgerEm.save(it, 'credit')
		}
	}

	def toBoolean(value, defvalue){
		if (value == null)
			return defvalue 
		if (value instanceof Boolean)
			return value 
		return value.toString().matches('y|yes|t|true|1')
	}

	Integer toInteger(value, defvalue){
		if (value == null)
			return defvalue 
		if (value instanceof Integer)
			return value 
		try{
			return Integer.parseInt(value.toString())
		}
		catch(e){
			return defvalue 
		}
	}

	java.math.BigDecimal toDecimal(value, defvalue){
		if (value == null)
			return defvalue 
		if (value instanceof BigDecimal)
			return value 
		try{
			return new java.math.BigDecimal(value.toString())
		}
		catch(e){
			return defvalue 
		}
	}
}
