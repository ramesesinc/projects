import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*


class LDNRPTLedgerInterceptor
{
	@ActiveDB('ldn')
	def em

	@ActiveDB(value='rptledger', em="main")
	def ledgerEm

	@ActiveDB(value='itax', em="itax")
	def itaxEm

	@Service('RPTUtil')
	def util
	

	@After(pattern="LDNRPTLedgerService.postNewLedger")
	public void manuallyPostLedgerPayment(evt){
		postOnlineLedgerInfo(evt)
	}


	@After(pattern="RPTLedgerService.postNewLedger", eval="#{args[0].datacapture == true || args[0].datacapture == 1}")
	public void postOnlineLedgerInfo(evt){
		def ledger = evt.result 
		
		if (ledger.state == 'APPROVED') {
			println 'Ledger has already been migrated.'
			return;
		}

		println 'Migrating itax ledger for tdno '  + ledger.tdno

		try{
			postFaasHistory(ledger)
			postLedgerPayments(ledger)
		}
		catch(e){
			println '='*50 
			println 'Error posting itax data....'
			e.printStackTrace();
		}
	}


	void postFaasHistory(ledger){
		getTaxTrans(ledger).each{
			it.state = 'PENDING'
			it.rptledgerid = ledger.objid
			it.taxable = true
			it.reclassed = false
			it.backtax = false
			it.systemcreated = false
			it.idleland = 0
			it.fromyear = util.toInteger(it.fromyear)
			it.fromqtr = 1
			it.toyear = util.toInteger(it.toyear)
			it.toqtr = 4
			it.txntype = ledger.txntype
			it.classification = ledger.classification
			it.actualuse = ledger.classification
			it.assessedvalue = util.toDecimal2(it.assessedvalue+'', 0.0)
			ledgerEm.save(it, 'ledgerfaas')
		}
	}


	def getTaxTrans(ledger){
		def prevs = []

		def prev = itaxEm.findPrevious([taxtransid:ledger.objid])
		while (prev){
			prevs << prev
			prev = itaxEm.findPrevious([taxtransid:prev.previd])
			if (prevs.find{it.objid == prev?.previd})
				break;
		}
		return prevs 
	}


	void postLedgerPayments(ledger){
		def ledgerpmt = [objid:ledger.objid, lastyearpaid:0, lastqtrpaid:4]

		def taxtransids =  getTaxTrans(ledger).previd
		taxtransids << ledger.objid 

		taxtransids.each{taxtransid->
			itaxEm.getPayments([taxtransid:taxtransid]).each{payment ->
				payment.rptledgerid = ledger.objid
				payment.fromyear = util.toInteger(payment.fromyear)
				payment.fromqtr = util.toInteger(payment.fromqtr)
				payment.toyear = util.toInteger(payment.toyear)
				payment.toqtr = util.toInteger(payment.toqtr)
				payment.basic = util.toDecimal(payment.basic+'')
				payment.basicint = util.toDecimal(payment.basicint+'')
				payment.basicdisc = util.toDecimal(payment.basicdisc+'')
				payment.sef = util.toDecimal(payment.sef+'')
				payment.sefint = util.toDecimal(payment.sefint+'')
				payment.sefdisc = util.toDecimal(payment.sefdisc+'')
				payment.amount = util.toDecimal(payment.amount+'')

				ledgerEm.create(payment, 'credit')

				if (payment.toyear > ledgerpmt.lastyearpaid){
					ledgerpmt.lastyearpaid = payment.toyear 
					ledgerpmt.lastqtrpaid = payment.toqtr 
				}
			}
		}
		if (ledgerpmt.lastyearpaid > 0){
			em.updateLedgerLastYearPaid(ledgerpmt)
			em.approveLedgerFaases(ledger)
		}
	}


}
