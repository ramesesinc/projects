import com.rameses.annotations.*;
import com.rameses.osiris3.xconnection.XConnection;
import com.rameses.util.*;

class CacheService {		
	
	private String DEFAULT_CONNECTION_NAME = "memcached"; 
	private Number DEFAULT_TIMEOUT = 60;

	@Context 
	def currentContext;

	@ProxyMethod 
	public void put( params ) { 
		if ( params.key == null ) throw new Exception('key parameter is required'); 
		if ( params.value == null ) throw new Exception('value parameter is required'); 

		String connectionName = ( params.connection ? params.connection : DEFAULT_CONNECTION_NAME ); 
		def xconn = currentContext.getResource( XConnection.class, connectionName ); 
		if ( xconn==null ) throw new Exception(''+ connectionName + " connection file not found"); 

		Number timeout = null; 
		try { 
			timeout = new Integer( params.timeout.toString() ); 
		} catch(Throwable t) { 
			timeout = DEFAULT_TIMEOUT; 
		} 

		xconn.put( params.key.toString(), params.value, timeout.intValue()); 
	} 

	@ProxyMethod 
	public Object get( params ) {
		if ( params.key == null ) throw new Exception('key parameter is required'); 

		String connectionName = ( params.connection ? params.connection : DEFAULT_CONNECTION_NAME ); 
		def xconn = currentContext.getResource( XConnection.class, connectionName ); 
		if ( xconn==null ) throw new Exception(''+ connectionName + " connection file not found"); 

		return xconn.get( params.key.toString()); 
	} 

	@ProxyMethod 
	public void removeCache( params ) {
		if ( params.key == null ) throw new Exception('key parameter is required'); 

		String connectionName = ( params.connection ? params.connection : DEFAULT_CONNECTION_NAME ); 
		def xconn = currentContext.getResource( XConnection.class, connectionName ); 
		if ( xconn==null ) throw new Exception(''+ connectionName + " connection file not found"); 

		xconn.remove( params.key.toString()); 
	} 
}
