
import com.rameses.annotations.*;
import java.text.DecimalFormat;

class SequenceService 
{
	@ActiveDB(value='sequence', em='system')
	def em;

	def FORMATTED_LEN = 5;
	
	@ProxyMethod(local=true)
	public def getCurrentSeries( objid )  {
		def seq = em.findCurrentSeries([ objid: objid ]); 
		if ( seq ) {
			return seq.currentSeries; 
		} else {
			seq = create( objid ); 
			return seq.nextSeries; 
		} 
	}
	
    @ProxyMethod(local=true)
	public def getNextFormattedSeries( objid ) {
		return getNextFormattedSeriesA( objid, FORMATTED_LEN ) ;
	}
	
	@ProxyMethod(local=true)
	public def getNextFormattedSeriesA( objid, len ) {
		def nextSeries = getNextSeries( objid );
		return "$nextSeries".padLeft(len, '0')
	}
	
	@ProxyMethod(local=true)
	public def getNextSeries( objid ) {
		def seq = em.read([ objid: objid ]); 
		if ( !seq ) seq = create( objid );

		em.incrementNextSeries([ objid: seq.objid ]); 
		seq = em.read([ objid: objid ])
		return seq.nextSeries - 1;
	} 

	@ProxyMethod(local=true)
	public def getNextBatchSeries( params ) {
		if (!params.size) throw new Exception('Please specify the size'); 

		def seq = em.read([ objid: params.objid ]); 
		if (!seq) seq = create( params.objid ); 

		def seriesno = seq.nextSeries; 
		updateNextSeries( params.objid, (seriesno+params.size) ); 
		return seriesno; 
	} 
	
	@ProxyMethod(local=true)
	public def create( objid ) {
		def seq = em.read([ objid: objid ]); 
		if ( !seq ) {
			seq = [objid: objid, nextSeries: 1]; 
			em.create( seq ); 
		} 
		return seq; 
	} 
	
	@ProxyMethod(local=true)
	public void updateNextSeries( objid, nextSeries ) { 
		em.updateNextSeries([ objid: objid, nextSeries: nextSeries ]); 
	} 

	@ProxyMethod(local=true)
	public def formatSeries( params ) {
		def prefix = params.prefix;
		def seriesno = params.seriesno; 
		def serieslen = params.serieslength;
		def xlen = Math.max(serieslen, 0); 
		if (xlen <= 0) return seriesno; 

		if (!prefix) prefix = '';
		return prefix + "$seriesno".padLeft(xlen, '0'); 
	} 
} 
