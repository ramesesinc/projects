import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*;


class RuleExporterService {

	@ActiveDB('rule') 
	def rule;

	@ActiveDB('ruletool') 
	def ruletool;
	
	@Service("RuleMgmtService")
	def service;


	@ProxyMethod 
	public def getRules( params ) {
		if ( !params.ruleset ) throw new Exception('ruleset parameter is required');

		return ruletool.getRules( params ); 
	} 

	@ProxyMethod 
	public def open( params ) {
		if ( !params.objid ) throw new Exception('objid parameter is required');

		def o = ruletool.findRule([ ruleid: params.objid ]); 
		if ( !o ) throw new Exception('Rule record not found'); 

		o.conditions = ruletool.getRuleConditions([ ruleid: params.objid ]); 
		o.conditions.each{ rc-> 
			rc.vars = ruletool.getRuleConditionVars([ conditionid: rc.objid ]); 
			rc.contraints = ruletool.getRuleConditionConstraints([ conditionid: rc.objid ]);  
		}
		o.actions = ruletool.getRuleActions([ ruleid: params.objid ]); 
		o.actions.each{ ra-> 
			ra.params = ruletool.getRuleActionParams([ actionid: ra.objid ]);  
		} 
		o.buildver = 2.0; 
		return o; 
	} 

	@ProxyMethod
	public def upload( o ) {
		try { 
			if ( o.buildver && o.buildver >= 2.0 ) {
				uploadV2( o ); 

			} else { 
				service.create( o ); 
				o.conditions.each { 
					service.saveCondition( it ); 
				} 
				o.actions.each { 
					service.saveAction( it ); 
				} 
			} 
		} catch(e) { 
			throw e; 
		} 
	}

	private void uploadV2( o ) { 
		rule.save( o ); 
		o.conditions.each{ c->  
			rule.save( c, "condition" ); 

			c.vars.each{ cv-> 
				rule.save( cv, "var"); 
			}

			c.contraints.each{ cc-> 
				if ( cc.listvalue instanceof String ) {
					cc.listvalue = rule.serializer.read( cc.listvalue );  
				}
				rule.save( cc, "constraint" ); 
			} 
		} 
		o.actions.each{ a-> 
			rule.save( a, "action" ); 

			a.params.each{ ap-> 
				if ( ap.listvalue instanceof String ) {
					ap.listvalue = rule.serializer.read( ap.listvalue );  
				}
				rule.save( ap, "actionparam" ); 
			} 
		} 
	} 
} 
