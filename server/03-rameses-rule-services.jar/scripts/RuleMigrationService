import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*;


class RuleMigrationService {

	@ActiveDB("rulemigration")
	def em;
	
	@ActiveDB("rule")
	def target;

	@ProxyMethod
	public def downloadDefByRuleset( def p ) {
		if(!p.ruleset) throw new Exception("Please add ruleset in parameter");

		def pkg = [rulesets: [] ];
		def rs = em.findRuleset( p );
		rs.rulegroups = em.getRulegroups(p);
		rs.facts = em.getFactRulesets(p);
		rs.actiondefs = em.getActionDefRulesets(p);
		pkg.rulesets << rs;

		//load facts
		pkg.facts = [];
		rs.facts.each {
			def f = em.findRuleFactById( [objid: it.rulefact] );
			f.fields = em.getRuleFactFields(f);
			pkg.facts << f;
		};

		pkg.actiondefs = [];
		rs.actiondefs.each {
			def ad = em.findRuleActionDefById( [objid: it.actiondef] );
			ad.params = em.getRuleActionDefParams(ad);
			pkg.actiondefs << ad;
		};
		return pkg;
	}


	@ProxyMethod
	public def downloadDef( def o ) {
		if(!o.domain)
			throw new Exception("Please specify a domain");

		def pkg = [:];
		//load facts	
		pkg.facts = em.getRuleFacts(o);	
		pkg.facts.each {
			it.fields = em.getRuleFactFields(it);
		}		

		//load action defs
		pkg.actiondefs = em.getRuleActionDefs(o);
		pkg.actiondefs.each {
			it.params = em.getRuleActionDefParams(it);
		}		
		pkg.rulesets = em.getDomainRulesets(o);
		for( rs in pkg.rulesets ) {
			def p = [ruleset: rs.name]
			rs.rulegroups = em.getRulegroups(p);
			rs.facts = em.getFactRulesets(p);
			rs.actiondefs = em.getActionDefRulesets(p);
		}
		return pkg;
	}
	
	@ProxyMethod
	public void uploadDef( def pkg ) {
		for( x in pkg.facts) {
			target.save( x, "fact" );
			for( f in x.fields )  {
				target.save( f, "fact_field" );
			}	
		};	
		for( y in pkg.actiondefs) {
			target.save( y, "actiondef" );
			for( x in y.params ){
				target.save( x, "actiondef_param" );
			}
		};	
		for( rs in pkg.rulesets ) {
			//save rulesets, rulegroups, rulesetfacts, rulesetactiondefs
			target.save( rs, "ruleset" );
			//save rulegroups
			for ( x in rs.rulegroups ) {
				target.save( x, "rulegroup" );
			}
			for( x in rs.facts ) {
				def test = target.read( [ruleset: rs.name, rulefact: x.rulefact ], "ruleset_fact" );
				if(!test) {
					target.create( [ruleset: rs.name, rulefact: x.rulefact ], "ruleset_fact" );
				}
			}
			for(y in rs.actiondefs ) {
				def test = target.read( [ruleset: rs.name, actiondef: y.actiondef ], "ruleset_actiondef" );
				if(!test) {
					target.create( [ruleset: rs.name, actiondef: y.actiondef ], "ruleset_actiondef" );	
				}
			}
		}
	}

}
