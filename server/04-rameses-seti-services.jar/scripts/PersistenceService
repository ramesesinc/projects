import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID
import java.text.SimpleDateFormat;
import com.rameses.services.extended.*;

class PersistenceService  {	

	@DataContext(dynamic=true)
	def db;

	@Service("SchemaService")
	def schemaService;

	@ProxyMethod
	public def newObject(  def o ) {
		throw new Exception("null"); 
	}

	@ProxyMethod
	public def create(  def o ) {
		if(!o._schemaname) throw new Exception('Please provide a _schemaname');
		return db.lookup(o._schemaname).create( o );
	}

	@ProxyMethod
	public def read( def o ) {
		if(!o._schemaname) throw new Exception('Please provide a _schemaname');
		return db.lookup(o._schemaname).read(o);
	}

	private def buildFinders(def o) {
		//check first of there's a findBy property in the map. If there is one, use that instead.
		def finders = o.remove("findBy");
		if( finders == null ) {
			def schema = schemaService.getSchema([name: o._schemaname]);
			//loop thru the schema for primary keys
			finders = [:];
			schema.columns.findAll{it.primary}.each {
				finders.put( it.name, o.get(it.name));
			}
		}
		return finders;
	}

	@ProxyMethod
	public def update( def o ) {
		if(!o._schemaname) throw new Exception('Please provide a _schemaname');
		def finders = buildFinders(o);
		if(!finders)
			throw new Exception('update error. Please indicate at least a findBy map or primary keys')
		def em = db.lookup(o._schemaname);
		em.find(finders);
		return em.update(o);
	}

	/*
	@ProxyMethod
	public def merge( def o ) {
		return em.merge(o);
	}
	*/

	@ProxyMethod
	public void removeEntity( def o ) {
		if(!o._schemaname) throw new Exception('Please provide a _schemaname');
		def finders = buildFinders(o);
		if(!finders)
			throw new Exception('removeEntity error. Please indicate at least a findBy map or primary keys')
		def em = db.lookup(o._schemaname);
		em.find(finders);
		em.delete();		
	}


}