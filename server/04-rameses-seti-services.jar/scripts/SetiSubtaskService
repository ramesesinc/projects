import com.rameses.annotations.*;
import java.rmi.server.UID;

class SetiSubtaskService {
	
	@DataContext(dynamic=true)
	def taskEm;

	@Service("DateService")
	def dateSvc;

    @Env
    def env;

	@ProxyMethod
    public def getOpenSubtaskList(def o) {
    	if(!o.processname) throw new Exception("processname is required in signal");
    	if(!o.taskid) throw new Exception("taskid is required in signal");

        //try to check if there are open subtasks
        println "checking sub task 1";
        def subtaskDb = null;
        try {
            subtaskDb = taskEm.lookup( o.processname.trim() + "_subtask" );
        } catch(Exception ign) {
            println "sub task is " + subTask;
        } 
        if(subtaskDb !=null) {
            println "checking sub task 2";
            def subList = subtaskDb.find( [taskid: o.taskid] ).list();
            if( subList.size>0) {
                throw new Exception("There are still unfinished sub tasks. Please have these completed first");
            }
        }
    }


}