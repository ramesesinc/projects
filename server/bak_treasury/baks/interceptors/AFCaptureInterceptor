import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class AFCaptureInterceptor { 
	
	@PersistenceContext('main')
	def em

	private void checkBatchInfo( m ) {
		def ctx = em.sqlContext; 
		def sql1 = ''' 
			SELECT COUNT(*) AS tcount FROM batchcapture_collection 
			WHERE controlid=$P{controlid} AND state NOT IN (${states}) 
		'''; 

		def z = ctx.createQuery( sql1 ).setParameters( m ).setVars( m ).singleResult.tcount;
		if ( z > 0) { 
			throw new Exception("There is still an open batch capture transaction. Please close by submitting it or removing it");
		}
	}

	@After(pattern="AFControlService.changeMode", eval="#{args[0].txnmode != 'CAPTURE'}")
	public void deleteAFCapture( def evt ) { 
		checkBatchInfo([ controlid: evt.args[0].objid, states:"'POSTED','CLOSED'" ]);
	}	

	@After(pattern="AFControlService.unassign")
	public void deleteAFCaptureOnUnassign( def evt ) { 
		checkBatchInfo([ controlid: evt.args[0].objid, states:"'POSTED','CLOSED'" ]);
	}	

}