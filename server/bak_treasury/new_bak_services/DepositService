import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.util.*;

class DepositService {

	@DataContext("deposit")
	def dep_db;

	@DataContext("fund")
	def fund_db;

	@DataContext("liquidation_fund")
	def liqf_db;

	@ActiveDB("deposit_tool")
	def deptool_db;

	@Service('ControlService') 
	def controlSvc;

	@Service("DateService")
	def dateSvc;

	@Service('Var')
	def var;

	@Env
	def env;


	@ProxyMethod 
	public def create( params ) { 
		if ( !params ) throw new Exception('Please specify parameters'); 
		if ( !params.fund?.objid ) throw new Exception('fund.objid parameter is required'); 

		def fund = fund_db.find([ objid: params.fund.objid ]).first(); 
		if ( !fund ) throw new Exception('fund '+ params.fund.objid +' does not exist'); 

		def pid = 'DEP'+ new java.rmi.server.UID(); 
		def txndate = dateSvc.getServerDate(); 
		def dtposted = new java.sql.Date( txndate.time );  
		def txncode = [ "DEP", env.TXNCODE ].findAll{( it )}.join("-");
		def txnno = controlSvc.formatTxnno([ txncode: txncode, txndate: dtposted, format: var.deposit_format, sequenceid_format: var.deposit_sequenceid_format ]); 

		def o = [:];  
		o.batchid = pid; 
		o.fundid = fund.objid;
		o.objid = pid +'-'+ fund.objid; 
		o.controlno = txnno +'-'+ fund.code; 
		o.state = 'OPEN'; 
		o.txndate = txndate; 
		o.dtposted = dtposted; 
		o.depositdate = params.depositdate;
		o.postedby = [ objid: env.USERID, name: env.FULLNAME ]; 
		o.amount = o.amountdeposited = 0.0; 
		o.cramount = o.cramounttransferred = 0.0; 
		o = dep_db.create( o ); 

		//items
		if(params.items) {
			addItems( [ depositid: o.objid, items: params.items ] );
		}

		return o; 
	} 

	@ProxyMethod 
	public def addItems( params ) { 
		
		// parameters: depositid, items 
		if ( !params.depositid ) throw new Exception('depositid parameter is required'); 
		if ( !params.items ) throw new Exception('items parameter is required'); 

		def o = dep_db.find([ objid: params.depositid ]).first(); 
		if ( !o ) throw new Exception('deposit transaction does not exist'); 

		params.items.each{ 
			liqf_db.find([ objid: it.objid ]).update([ depositid: o.objid ]);  
		}

		rebuildHeader( o );
		return o; 
	} 


	@ProxyMethod 
	public def removeItems( params ) { 
		// parameters: depositid, items 
		if ( !params.depositid ) throw new Exception('depositid parameter is required'); 
		if ( !params.items ) throw new Exception('items parameter is required'); 

		def o = dep_db.find([ objid: params.depositid ]).first(); 
		if ( !o ) throw new Exception('deposit transaction does not exist'); 

		def m = [ depositid: o.objid ]; 
		params.items.each{ 
			m.liquidationfundid = it.objid; 
			dep_db.unbindLiquidationFund( m ); 
		} 
		rebuildHeader( o );
		return o; 
	} 

	private void rebuildHeader( def o ) {
		liqf_db.debug = true;
		def m = liqf_db.find( [depositid: o.objid]).select("amount:{ SUM(amount) }").first();
		if( m.amount ) {
			dep_db.find( [objid: o.objid] ).update( [amount: m.amount]);
		}
	} 

	@ProxyMethod 
	public void revert( params ) {
		if ( !params.batchid ) throw new Exception('batchid parameter is required'); 

		def m = [ batchid: params.batchid ]; 
		deptool_db.unbindCashReceiptChecks( m ); 
		deptool_db.unbindLiquidationFunds( m ); 
		deptool_db.removeFundTransfers( m ); 
		deptool_db.removeBankDeposits( m ); 
		deptool_db.removeDeposit( m ); 
	} 
}