import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*
import com.rameses.util.*

class LiquidationImportExportService  {

	@ActiveDB("liquidation_import_export")
	def adb

	@ProxyMethod
	public def exportLiquidation(objid) {
		def liq = [liquidationid:objid]

		def data = [:]

		data.entity = adb.findLiquidationByid(liq)
		data.liq_cashierfund = adb.getLiquidationCashierFund(liq)
		data.liq_checks = adb.getLiquidationCheckPayment(liq)
		data.liq_remittances = adb.getLiquidationRemittance(liq)

		data.remittances = adb.getRemittanceRemittanceByLiquidation(liq)
		data.rem_af = adb.getRemittanceAf(liq)
		data.rem_cashreceipts = adb.getRemittanceCashReceipts(liq)
		data.rem_checks = adb.getRemittanceCheckPayments(liq)
		data.rem_funds = adb.getRemittanceFunds(liq)

		def afcontrols = [] 
		data.remittances.each {
			afcontrols += adb.getUniqueAfControls(it)
		}
		 
		//afcontrols
		data.afinventories = [] 
		data.afcontrols = [] 
		data.afinvdetails = []

		afcontrols.each{ afc -> 
			data.afcontrols << adb.findAfControl(afc)
			data.afinventories << adb.findAFInventory(afc)
		}

		data.rem_af.each{ 
			data.afinvdetails += adb.getAFInventoryDetails(it)
		}

		//cashreceipts
		data.cashreceipts = adb.getCashReceipts(liq)
		data.cashreceiptitems = adb.getCashReceiptItems(liq)
		data.checkpayments = adb.getCashReceiptCheckPayments(liq)
		data.voidedreceipts = adb.getVoidedReceipts(liq)

		return data 
	}



	@ProxyMethod
	public void importLiquidation(data){
		checkDuplicatePosting(data.entity)

		//afserialcontrols
		data.afinventories.each{  
			adb.updateAfInventory(EntityUtil.mapToField(it)) 
		}
		data.afcontrols.each{  
			adb.updateAFControl(EntityUtil.mapToField(it)) 
		}
		data.afinvdetails.each{  
			try{
				adb.insertAfInventoryDetail(EntityUtil.mapToField(it)) 
			}
			catch(e){ 
				//ignore possible duplicates
			}
		}


		//cashreceipts
		data.cashreceipts.each{  adb.insertCashReceipt(EntityUtil.mapToField(it)) }
		data.cashreceiptitems.each{  adb.insertCashReceiptItem(EntityUtil.mapToField(it)) }
		data.checkpayments.each{  adb.insertCheckPayment(EntityUtil.mapToField(it)) }
		data.voidedreceipts.each{  adb.insertVoidReceipt(EntityUtil.mapToField(it)) }

		data.remittances.each{
			adb.insertRemittance(EntityUtil.mapToField(it))
		}

		data.rem_af.each{ 
			if ( !adb.findRemittanceAf(it) ) {
				adb.insertRemittanceAf(EntityUtil.mapToField(it)) 
			}
		}
		data.rem_cashreceipts.each{  
			adb.insertRemittanceCashReceipt(EntityUtil.mapToField(it)) 
		}
		
		data.rem_checks.each{  adb.insertRemittanceCheck(EntityUtil.mapToField(it)) }
		data.rem_funds.each{  adb.insertRemittanceFund(EntityUtil.mapToField(it)) }

		adb.insertLiquidation(EntityUtil.mapToField( data.entity))
		data.liq_cashierfund.each { adb.insertLiquidationCashierFund(EntityUtil.mapToField(it)) }
		data.liq_checks.each { adb.insertLiquidationChecks(EntityUtil.mapToField(it)) }
		data.liq_remittances.each{ adb.insertLiquidationRemittances(EntityUtil.mapToField(it))}

	}

	void checkDuplicatePosting(liq){
		if (  adb.findLiquidationByid([liquidationid:liq.objid])){
			throw new Exception('Liquidation has already been posted.')
		}
	}

}

