import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class RemittanceCaptureInterceptor {
	
	@Service("AFInventoryService")
	def afSerialSvc;

	@ActiveDB("remittance_af")
	def remittanceAf;

	@ActiveDB("remittance_capture")
	def remittance_capture;

	@ActiveDB("batchcapture_collection")
	def batchcapture; 

	@ActiveDB('draft_remittance') 
	def draftRemittance;	


	@After(pattern="RemittanceCaptureService.post")
	public void afterPost( evt ) { 
		def o = evt.result; 
		o.items.each { 
			def m = [:]; 
			m.controlid = it.controlid;
			m.refid = o.objid;
			m.reftype = "remittance";	
			m.refno = o.txnno;
			m.refdate = o.dtposted;
			m.afid = it.formno;
			m.txntype = "REMITTANCE";
			m.remarks = "REMITTANCE"; 
			if( it.startseries ) {
				m.startseries = it.startseries;
				m.endseries = it.endseries;
				m.qty= (it.endseries - it.startseries) + 1;
				m.startstub = 0;
				m.endstub = 0;
				afSerialSvc.postIssue(m);
				remittance_capture.updateRemittanceAF([ controlid:it.controlid, remittanceid: o.objid ]);
			} 
		}  

		def list = remittanceAf.getRemittanceForBalanceForward([remittanceid: o.objid]);
		list.each {
			def m = [:];
			m.startseries = it.startseries;
			m.endseries = it.endseries;
			m.txntype = "FORWARD";
			m.remarks = "FORWARD BALANCE FROM REMITTANCE";
			m.qty= (it.endseries - it.startseries) + 1;
			m.endstub = 0; 
			m.controlid = it.controlid;
			m.refid = o.objid;
			m.reftype = "remittance";	
			m.refno = o.txnno;
			m.refdate = o.dtposted;
			m.afid = it.formno;
			afSerialSvc.postBegin(m);
		}

		def mparams = [ draftid: o.draftid ];  
		remittance_capture.closeBatchCollections( mparams ); 

		def dheader = draftRemittance.read([ objid: o.draftid ]); 
		draftRemittance.removeHeaderByPrimary([ objid: dheader.objid ]); 
		draftRemittance.removeItemsByParentid([ parentid: dheader.objid ]); 
	} 
} 