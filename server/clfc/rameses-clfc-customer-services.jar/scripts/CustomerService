import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import org.joda.time.*;
import java.rmi.server.UID;

class CustomerService 
{	
	@Env
	def env;

	@ActiveDB("customer")
	def em;

	@Service("CustomerIndividualService")
	def custIndividualSvc;

	@Service("CustomerJuridicalService")
	def custJuridicalSvc;

	@Service("DateService")
	def dateSvc;

	@Service("SequenceService")
	def sequenceSvc;

	@Service("BranchService")
	def branchSvc;

	@ProxyMethod
	public def open(params) {
		def data = em.read(params);
		if (data.type == 'INDIVIDUAL') {
			return custIndividualSvc.open(params);
		}
		if (data.type == 'JURIDICAL') {
			return custJuridicalSvc.open(params);
		}
	}

	@ProxyMethod
	public def create(data) {
		if (!data.type) throw new Exception("Please specify type.");
		data.dtcreated = dateSvc.serverDate;
		
		data.state = 'ACTIVE';
		data.mode = 'ONLINE';
		data.createdby = env.USER; 

		def branch = branchSvc.open([:]);
		data.branchid = branch?.objid;
		if (!data.address.type) data.address.type='LOCAL'; 
		if (!data.address.street) data.address.stress = data.address.text;

		def seqname = 'customer'+data.branchid;
		data.custno = data.branchid + sequenceSvc.getNextFormattedSeriesA(seqname,7);
		data.entityno = data.custno;
		data.dtmodified = data.dtcreated;
		data.modifiedby = data.createdby;
		if (data.type == 'INDIVIDUAL') {
			if (!data.name) {
				data.name = data.lastname + ', ' + data.firstname;
				if (data.middlename) data.name += ' ' + data.middlename;
			}
			em.create(data);
			return custIndividualSvc.create(data);
		}
		if (data.type == 'JURIDICAL') {
			em.create(data);
			return custJuridicalSvc.create(data);
		}
	} 

	@ProxyMethod
	public def update(data) {
		if (!data.type) throw new Exception("Please specify type.");
		if (!data.address.type) data.address.type='HOME';
		if (!data.address.street) data.address.street = data.address.text;
		
		data.dtmodified = dateSvc.serverDate;
		data.modifiedby = env.USER;
		em.update(data);

		if (!data.address?.objid) {
			data.address.objid = 'A' + new UID();
		}

		if (data.type == 'INDIVIDUAL') {
			return custIndividualSvc.update(data);
		}

		if (data.type == 'JURIDICAL') {
			return custJuridicalSvc.update(data);
		}

		/*
		data.type = 'INDIVIDUAL';
		data.dtmodified = dateSvc.serverDate.toString(); 
		data.modifiedby = env.USER; 
		return entitySvc.update(data); 
		*/
	} 


	def searchTypes = [
		[filter: ' c.name LIKE $P{searchtext} '], 
		[filter: ' c.custno LIKE $P{searchtext} ']
	];

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];

		cols << [name: 'custno', caption: 'CustNo'];
		cols << [name: 'name', caption: 'Name'];
		cols << [name: 'address.text', caption: 'Address'];

		return cols;
	}

	@ProxyMethod 
	public def getList( params ) {
		params.searchtext = removeLeadingChar(params.searchtext,'%')+'%';
		if (!params._start) params._start = 0;
		if (!params._limit) params._limit = 10;

		for (o in searchTypes) { 
			params.putAll(o); 
			def list = em.getLookupCustomers(params); 
			if (!list.isEmpty()) return list; 
		}
		return [];
	} 

	@ProxyMethod
	public def getConnections( params ) {
		return em.getConnections(params); 
	}


    private String removeLeadingChar(String text, def ch) {
    	if (text == null) return "";

        while (true) { 
            if (!text.startsWith(ch+"")) break; 
            
            text = text.substring(1); 
        } 
        return text; 
    } 	
}
