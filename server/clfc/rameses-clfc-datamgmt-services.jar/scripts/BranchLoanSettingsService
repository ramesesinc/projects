import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class BranchLoanSettingsService extends ActiveCrudListService
{
	@Env
	def env;

	@ActiveDB("branch_loan_settings")
	def em;

	@ActiveDB('datatxnlog')
	def txnlog; 

	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];
		if (!params.state) cols << [name: 'txnstate', caption: 'Status'];
			
		cols << [name: 'intrate', caption: 'Interest Rate', type: 'decimal', format: '#,##0.000'];
		cols << [name: 'yearstarted', caption: 'Year Started'];
		cols << [name: 'yearended', caption: 'Year Ended'];

		return cols;
	}

	@ProxyMethod
	public def getStates() {
		return [
			[caption: 'All'],
			[caption: 'DRAFT', state: 'DRAFT'],
			[caption: 'ACTIVE', state: 'ACTIVE'],
			[caption: 'DEACTIVATED', state: 'DEACTIVATED']
		];
	}

	void beforeCreate( data ) {
		data.dtcreated = dateSvc.serverDate;
		data.author = [objid: env.USERID, name: env.NAME];
		if (!data.txnstate) data.txnstate = 'DRAFT';
	}

	void afterCreate( data ) {
		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : data.dtcreated, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'CREATE', 
			remarks : 'New Branch Loan Setting '
		]; 
		txnlog.create( loginfo ); 
	}

	void afterUpdate( data ) {
		data.dtmodified = dateSvc.serverDate;
		data.modifiedby = [objid: env.USERID, name: env.NAME];

		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txnid   : data.objid, 
			txndate : data.dtmodified, 			
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'UPDATE', 
			remarks : 'Updated  Branch Loan Setting '
		]; 
		txnlog.create( loginfo ); 
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : '') + '%';
		if (params.state) {
			params._listMethod = 'getListByState';
		}
	}

	private void validate( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Branch loan setting record does not exist or has already been deleted.");

		def startyear = data.yearstarted;
		def endyear = data.yearended;
		if (!endyear) endyear = dateSvc.getServerYear();

		def i = em.findActiveOverlapping([yearstarted: startyear, yearended: endyear]);
		if (i) {
			def sy = i.yearstarted;
			def ey = i.yearended;
			if (!ey) ey = dateSvc.getServerYear();
			throw new Exception("Setting overlaps setting with term " + sy + " - " + ey + " and interest rate of " + i.intrate + ".");
		}
	}

	@ProxyMethod
	public def activate( params ) {
		validate(params);
		return changeState(params, 'ACTIVE');
	}

	@ProxyMethod
	public def deactivate( params ) {
		return changeState(params, 'DEACTIVATED');
	}

	private def changeState( params, state ) {
		def data = em.read(params);
		if (!data) throw new Exception("Branch loan setting record does not exist or has already been deleted.");

		if (data.txnstate == state) {
			throw new Exception("Branch loan setting already " + state + ".");
		}

		data.txnstate = state;
		em.changeState(data);

		def action, remarks;
		switch (state) {
			case 'ACTIVE'		: action = 'ACTIVATE';
								  remarks = 'Activated Branch Loan Setting';
								  break;
			case 'DEACTIVATED' 	: action = 'DEACTIVATE';
								  remarks = 'Deactivated Branch Loan Setting';
								  break;
		}

		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txnid   : data.objid, 
			txndate : dateSvc.serverDate, 			
			user    : [objid: env.USERID, username: env.USER], 
			action	: action, 
			remarks : remarks
		]; 
		txnlog.create( loginfo ); 

		return open(data);
	}

}