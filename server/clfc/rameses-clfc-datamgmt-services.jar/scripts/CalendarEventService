import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class CalendarEventService extends ActiveCrudListService 
{	
	@ActiveDB(value='calendar_event')
	def em;

	@ActiveDB('datatxnlog')
	def txnlog;

	@Service('DateService')
	def dateSvc;

	@Env 
	def env;
	
	@ProxyMethod 
	public List getColumns( params ) {
		return [
			[name:'date', caption:'Date', type:'date', width:80, maxWidth:80, outputFormat:'MMM-dd-yyyy'],
			[name:'name', caption:'Name'],
			[name:'description', caption:'Description'],
			//spacer
			[name:null, caption:''] 
		];
	}

	void beforeList(params) {
		params.searchtext = (params.searchtext? params.searchtext: '')+'%';		
	}

	void beforeCreate(data) {
		data.dtcreated = dateSvc.serverDate.toString();
	} 

	void afterCreate( data ) {
		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : data.dtcreated, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'CREATE', 
			remarks : 'New Calendar Event ('+ data.name + ')' 
		]; 
		txnlog.create( loginfo ); 
	}	

	void afterUpdate( data ) {
		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : dateSvc.serverDate, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'UPDATE', 
			remarks : 'Updated Calendar Event ('+ data.name + ')' 
		]; 
		txnlog.create( loginfo ); 
	}	

	void afterRemoveEntity( data ) {
		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : dateSvc.serverDate, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'DELETE', 
			remarks : 'Deleted Calendar Event ('+ data.name + ')' 
		]; 
		txnlog.create( loginfo ); 
	}		

	@ProxyMethod
	public def getNoOfHolidays( params ) {
		if (!params.lastscheduledate) throw new Exception('Please specify last schedule date')
		if (!params.item) throw new Exception('Please specify item')

		def enddate, hassunday = false;
		if (!params.txndate) {
			enddate = dateSvc.add(params.lastscheduledate, params.item.totalDays+"");
		} else {
			enddate = params.txndate;
			def cal = Calendar.getInstance();
			cal.setTime(parseDate(enddate));

			if ((cal.get(cal.DAY_OF_WEEK)-1) == 1) {
				hassunday = true;
			}
		}
		def list = em.getListBetweenStartdateAndEnddate([startdate: params.lastscheduledate, enddate: enddate]);
		list.unique{ it.date }
		def noofholidays = list.size();

		if (hassunday == true) noofholidays++;
		/*
		def hasSunday = (params.item.hasSunday == "true")? true : false;
		Calendar cal = Calendar.getInstance();
		if (params.item.trialAndError == 0) {
			list.each{
				cal.setTime(it.date);
				def day = cal.get(Calendar.DAY_OF_WEEK);
				if(day == 1) {
					noofholidays--;
					if (hasSunday == true) {
						hasSunday = false;
					}
				}
			}
		}
		*/
		return noofholidays;
	}

	private def parseDate( date ) {
		if (!date) return null;
		if (date instanceof Date) {
			return date;
		} else {
			return java.sql.Date.valueOf(date);
		}
	}
}
