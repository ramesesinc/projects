import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class ExemptionTypeService extends ActiveCrudListService 
{	
	@ActiveDB('exemptiontype')
	def em; 

	@ActiveDB('datatxnlog')
	def txnlog; 
	
	@Service('DateService') 
	def dateSvc; 

	@Env 
	def env;

	@ProxyMethod
	public def getColumns( params ) {
		return [
			[name:"code", caption:"Code"], 
			[name:"name", caption:"Name"], 
			[name:"description", caption:"Description"],
			[name:"dtcreated", caption:"Date Created"], 
			[name:"author.username", caption:"Created By"],
			[name:"txnstate", caption:"Status"]
		];
	}

	void beforeCreate( data ) { 
		if (!data.txnstate) data.txnstate = 'ACTIVATED';

		data.dtcreated = dateSvc.serverDate.toString(); 
		data.author = [objid: env.USERID, username: env.USER];  
	} 

	void afterCreate( data ) {
		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : data.dtcreated, 
			txnid   : data.objid, 
			user    : data.author, 
			action	: 'CREATE', 
			remarks : 'New ExemptionType '+ data.code 
		]; 
		txnlog.create( loginfo ); 
	}

	void afterUpdate( data ) {
		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txnid   : data.objid, 
			txndate : dateSvc.serverDate, 			
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'UPDATE', 
			remarks : 'Updated ExemptionType '+ data.code 
		]; 
		txnlog.create( loginfo ); 
	}

	void afterRemoveEntity( data ) {
		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txnid   : data.objid, 
			txndate : dateSvc.serverDate, 			
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'DELETE', 
			remarks : 'Deleted ExemptionType '+ data.code 
		]; 
		txnlog.create( loginfo ); 		
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext: '')+'%'; 
	} 

	@ProxyMethod 
	public def changeState( params ) {
		if (!params.objid) throw new Exception('Please specify objid'); 
		if (!params.txnstate) throw new Exception('Please specify txnstate'); 

		def data = em.read(params); 
		if (!data) throw new Exception("'"+params.objid+"' exemptiontype record not found"); 

		data.txnstate = params.txnstate;
		em.update(data);

		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : dateSvc.serverDate, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'CHANGE_STATE', 
			remarks : data.txnstate 
		]; 
		txnlog.create( loginfo ); 
		return data; 
	} 	
} 
