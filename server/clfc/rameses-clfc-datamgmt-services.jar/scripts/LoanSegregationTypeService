import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class LoanSegregationTypeService extends ActiveCrudListService
{
	@Env
	def env;

	@ActiveDB("loan_ledger_segregationtype")
	def em;

	@ActiveDB('datatxnlog')
	def txnlog; 

	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public def getCategories( params ) {
		return [
			[caption: 'LOAN STATE', value: 'LOANSTATE'],
			[caption: 'PAYMENT STATE', value: 'PAYMENTSTATE'],
		]
	}

	@ProxyMethod
	public def getColumns( params ) {
		return [
			[name: 'state', caption: 'Status'],
			[name: 'name', caption: 'Name'],
			[name: 'description', caption: 'Description'],
		]
	}

	void beforeCreate( data ) {
		data.dtcreated = dateSvc.serverDate;
		data.author = [objid: env.USERID, name: env.USER];
	}


	void afterCreate( data ) {
		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : data.dtcreated, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'CREATE', 
			remarks : 'New SegregationType '+ data.name 
		]; 
		txnlog.create( loginfo ); 
	}

	void afterUpdate( data ) {
		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txnid   : data.objid, 
			txndate : dateSvc.serverDate, 			
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'UPDATE', 
			remarks : 'Updated SegregationType '+ data.name 
		]; 
		txnlog.create( loginfo ); 
	}

	void afterRemoveEntity( data ) {
		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txnid   : data.objid, 
			txndate : dateSvc.serverDate, 			
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'DELETE', 
			remarks : 'Deleted SegregationType '+ data.name 
		]; 
		txnlog.create( loginfo ); 		
	}

	@ProxyMethod 
	public def changeState( params ) {
		if (!params.objid) throw new Exception('Please specify objid'); 
		if (!params.state) throw new Exception('Please specify state'); 

		def data = em.read(params); 
		if (!data) throw new Exception("'"+params.objid+"' segregationtype record not found"); 

		data.state = params.state;
		em.update(data);

		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : dateSvc.serverDate, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'CHANGE_STATE', 
			remarks : data.state 
		]; 
		txnlog.create( loginfo ); 
		return data; 
	} 
}