import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class CaptureLoanLedgerNoncashService extends ActiveCrudService
{
	@Env
	def env;

	@ActiveDB("loan_ledger_noncash")
	def em;

	@ActiveDB("loan_ledger")
	def ledger;

	@Service("DateService")
	def dateSvc;

	void beforeCreate( data ) {
		data.dtcreated = dateSvc.serverDate;
		data.author = [objid: env.USERID, name: env.NAME];
		data.txntype = 'CAPTURE';
	}

	@ProxyMethod
	public def collect( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Non-cash record does not exist or has already been deleted.");

		if (data.txnstate == 'COLLECTED') {
			throw new Exception("Non-cash record already collected.");
		}

		data.txnstate = 'COLLECTED';
		em.changeState(data);

		data.refid = 'LLP' + new UID();

		def item = ledger.read([objid: data.refid], "payment");
		if (!item) {
			item = [
				objid		: data.refid,
				parentid	: data.parentid,
				refno 		: data.refno,
				txndate 	: data.txndate,
				amount 		: data.amount,
				isonline	: 1,
				dtmodified 	: dateSvc.serverDate,
				modifiedby	: [objid: env.USERID, name: env.NAME]
			];
			ledger.create(item, "payment");
		}
		em.update(data, 'noncash-refid');

		data.dtcollected = dateSvc.serverDate;
		data.collectedby = [objid: env.USERID, name: env.NAME];
		em.update(data, 'noncash-collect');

		return open(data);
	}
}