import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class LoanAppCollateralService 
{	
	@ActiveDB(value='loanapp')
	def loanapp;

	@ActiveDB(value='loanapp_collateral')
	def collateral;

	@ProxyMethod 
	public def open( params ) { 
		if (!params.objid) throw new Exception('Please specify objid'); 

		def data = loanapp.findByObjid(params);
		if (!data) throw new Exception('\''+params.objid+'\' loan application record not found'); 

		data.collateral = [:]; 
		data.collateral.appliances = collateral.getAppliances([parentid: data.objid]);  
		data.collateral.vehicles = collateral.getVehicles([parentid: data.objid]);  
		data.collateral.properties = collateral.getProperties([parentid: data.objid]);  
		data.collateral.other = collateral.findOtherCollateral([objid: data.objid]);  
		return data; 
	} 

	@ProxyMethod 
	public def update( params ) {
		if (!params.objid) throw new Exception('Please specify objid');

		def data = loanapp.findByObjid(params);
		if (!data) throw new Exception('\''+params.objid+'\' loan application record not found'); 

		data.collateral = params.remove('collateral');
		if (data.collateral == null) data.collateral = [:];
		if (data.collateral.appliances == null) data.collateral.appliances = [];
		if (data.collateral.vehicles == null) data.collateral.vehicles = [];
		if (data.collateral.properties == null) data.collateral.properties = [];

		collateral.removeAppliances([parentid: data.objid]); 
		for (o in data.collateral.appliances) {
			o.objid = 'COLLA' + new UID();
			o.parentid = data.objid;
			collateral.create(o, 'appliance');
		}

		collateral.removeVehicles([parentid: data.objid]); 
		for (o in data.collateral.vehicles) {
			o.objid = 'COLLV' + new UID();
			o.parentid = data.objid; 
			collateral.create(o, 'vehicle');
		}

		collateral.removeProperties([parentid: data.objid]); 
		for (o in data.collateral.properties) {
			o.objid = 'COLLP' + new UID();
			o.parentid = data.objid;
			collateral.create(o, 'property');
		}

		collateral.removeOtherCollateral([objid: data.objid]);
		if (data.collateral.other?.remarks) { 
			data.collateral.other.objid = data.objid;
			collateral.create(data.collateral.other, 'other');
		} 
		return data; 
	}
}
