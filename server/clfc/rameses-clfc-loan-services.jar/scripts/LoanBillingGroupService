import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class LoanBillingGroupService extends ActiveCrudListService
{
	@Env
	def env;

	@ActiveDB('specialcollection_billinggroup')
	def em;

	@ActiveDB('datatxnlog')
	def txnlog; 

	@ActiveDB('loan_ledger')
	def loan_ledger;

	@ActiveDB('loanapp')
	def loanapp;

	@ActiveDB('borrower')
	def borrower;

	@Service('DateService')
	def dateSvc;

	@Service('InboxService')
	def inboxSvc;

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];

		if (!params.state) cols << [name: 'txnstate', caption: 'Status'];

		cols << [name: 'dtcreated', caption: 'Date Created'];
		cols << [name: 'author.name', caption: 'Created By'];
		cols << [name: 'name', caption: 'Group Name'];
		cols << [name: 'txntype', caption: 'Billing Type'];
		cols << [name: 'dtstarted', caption: 'Billing Date', type: 'date', outputFormat: 'MMM-dd-yyyy'];

		if (params.state == 'APPROVED') {
			cols << [name: 'dtposted', caption: 'Date Approved'];
			cols << [name: 'poster.name', caption: 'Approved By'];

		} else if (params.state == 'DISAPPROVED') {
			cols << [name: 'dtposted', caption: 'Date Disapproved'];
			cols << [name: 'poster.name', caption: 'Disapproved By'];

		}

		return cols;
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : '') + '%';
		if (params.state) {
			params._listMethod = 'getListByState';
		}
	}

	@ProxyMethod
	public def getStates() {
		return [
			[caption: 'All'],
			[caption: 'DRAFT', state: 'DRAFT'],
			[caption: 'FOR APPROVAL', state: 'FOR_APPROVAL'],
			[caption: 'APPROVED', state: 'APPROVED'],
			[caption: 'DISAPPROVED', state: 'DISAPPROVED']
		];
	}

	@ProxyMethod
	public def getTypes() {
		return ['FOLLOWUP', 'SPECIAL'];
	}

	void beforeCreate( data ) {
		data.dtended = data.dtstarted;
		data.dtcreated = dateSvc.serverDate;
		data.author = [objid: env.USERID, name: env.NAME];
	}

	void afterCreate( data ) {
		updateDetail(data);
	}

	void beforeUpdate( data ) {
		data.dtended = data.dtstarted;
	}

	void afterUpdate( data ) {
		updateDetail(data);
	}

	private void updateDetail( data ) {
		data._removedledgers?.each{ o->
			em.update(o, 'bg-detail');
		}

		data._addedledgers?.each{ o->
			em.create(o, 'bg-detail');
		}
	}

	void afterOpen( data ) {
		data.items = [];
		def items = em.getDetails(data);
		def item;
		items?.each{ o->
			item = addDetails(o);
			if (item) {
				data.items.add(item);
			}
		}
	}

	private def addDetails( item ) {
		def data = em.read(item, 'bg-detail');
		if (data) {
			def ledger = loan_ledger.read([objid: data.ledgerid]);
			def app = loanapp.read([objid: ledger?.appid]);
			def appc = loanapp.read([objid: app?.objid], 'loanapp_capture');

			def b = borrower.read([objid: data.borrower.objid]);
			if (b) {
				data.borrower.address = b.address;
				em.update(data, 'bg-detail');
			}

			if (!data.loanapp) {
				data.loanapp = [
					objid	: app?.objid,
					appno 	: app?.appno,
					amount	: app?.loanamount
				];
				em.update(data, 'bg-detail');
			}

			if (!data.ledger) {
				data.ledger = [
					objid		: ledger?.objid,
					dtreleased 	: appc?.dtreleased,
					dtmatured 	: ledger?.dtmatured
				];
				em.update(data, 'bg-detail');
			}
		}
		return data;
	}

	@ProxyMethod
	public def submitForApproval( params ) {
		def data = changeState(params, 'FOR_APPROVAL');

		def msginfo = [ 
			objid 		: data.objid, 
			dtcreated	: dateSvc.serverDate, 
			refid 		: data.objid, 
			filetype 	: 'billinggroup', 
			message 	: 'For approval of billing group for ' + data.dtstarted + '.', 
			senderid	: env.USERID, 
			sendername 	: env.NAME, 
			recipientid : 'APPROVER' 
		]; 
		inboxSvc.addMessage( msginfo );

		return open(data);
	}

	private def changeState( params, state ) {
		def data = em.read(params);
		if (!data) throw new Exception('Billing group record does not exist or has already been deleted.');

		if (data.txnstate == state) {
			throw new Exception('Billing group record has already been ' + state + '.');
		}

		data.txnstate = state;
		em.changeState(data);

		def action, remarks;
		switch (state) {
			case 'FOR_APPROVAL'	: action = 'For Approval';
								  remarks = 'Submitted Billing Group for Approval';
								  break;
			case 'APPROVED' 	: action = 'Approved';
								  remarks = 'Approved Billing Group';
								  break;
			case 'DISAPPROVED' 	: action = 'Disapproved';
								  remarks = 'Disapproved Billing Group';
								  break;
		}

		if (action && remarks) {
			def loginfo = [
				objid 	: 'TLOG' + new UID(), 
				txndate : dateSvc.serverDate, 
				txnid   : data.objid, 
				user    : [objid: env.USERID, username: env.USER], 
				action	: action, 
				remarks : remarks
			]; 
			txnlog.create( loginfo ); 
		}

		return open(data);
	}

	@ProxyMethod
	public def approveDocument( params ) {
		return approveImpl(params, 'APPROVED');
	}

	@ProxyMethod
	public def disapprove( params ) {
		return approveImpl(params, 'DISAPPROVED');
	}

	private def approveImpl( params, state ) {
		def data = changeState(params, state);

		data.dtposted = dateSvc.serverDate;
		data.poster = [objid: env.USERID, name: env.NAME];
		em.update(data, 'bg-post');

		inboxSvc.removeMessageByRefid([refid: data.objid]);

		return open(data);
	}

	@ProxyMethod
	public def getDetailsWithLedgerInfo( params ) {
		return em.getDetailsWithLedgerInfo([objid: params.objid]);
	}

	/*
	@Env
	def env;

	@ActiveDB("specialcollection_billinggroup")
	def em;

	@ActiveDB('datatxnlog')
	def txnlog; 

	@Service("DateService")
	def dateSvc;

	@Service("InboxService")
	def inboxSvc;

	@ProxyMethod
	public def getColumns( params ) {
		return [
			[name: 'txnstate', caption: 'Status'],
			[name: 'name', caption: 'GroupName'],
			[name: 'txntype', caption: 'Type'],
			[name: 'dtstarted', caption: 'DateStarted', type: 'date', outputFormat: 'MMM-dd-yyyy'],
			[name: 'dtended', caption: 'DateEnded', type: 'date', outputFormat: 'MMM-dd-yyyy'],
		];
	}

	private def parseDate( date ) {
		if (date instanceof Date) {
			return date;
		} else {
			return new java.text.SimpleDateFormat("yyyy-MM-dd").format(java.sql.Date.valueOf(date));
		}
	}

	private void validate( data ) {
		def currdate = dateSvc.getServerDateAsString().split(" ")[0];
		def startdate = parseDate(data.dtstarted).toString();

		if (startdate.compareTo(currdate) < 0)
			throw new Exception("Start date must be greater than or equal to current date.");

		def enddate = parseDate(data.dtended).toString();

		if (startdate.compareTo(enddate) > 0)
			throw new Exception("End date must be greater than or equal to start date.");

		if (!data.ledgers) throw new Exception("At least 1 ledger is required.");
	}

	void beforeCreate( data ) {
		validate(data);
		data.dtcreated = dateSvc.serverDate;
		data.author = [objid: env.USERID, name: env.NAME];
	}

	void beforeUpdate( data ) {
		validate(data);
	}

	void afterCreate( data ) {
		updateLedgers(data);
	}

	void afterUpdate( data ) {
		updateLedgers(data);
	}

	private void updateLedgers( data ) {
		data._removedledger.each{ o->
			em.delete(o, "bg-detail");
		}

		data._addedledger.each{ o->
			if (!o.objid) o.objid = 'BGD' + new UID();
			if (!o.parentid) o.parentid = data.objid;
			em.create(o, "bg-detail");
		}

		def xlist = data.ledgers.findAll{ it._edited==true }
		xlist.each{ o->
			em.update(o, "bg-detail");
		}

		data._addedledger = [];
		data._removedledger = [];
		data.ledgers = em.getDetails(data);
	}

	void afterOpen( data ) {
		data.ledgers = em.getDetails(data);
	}

	@ProxyMethod
	public def getTypes() {
		return ['FOLLOWUP', 'SPECIAL'];
	}

	@ProxyMethod
	public def submitForApproval( params ) {
		def data = changeStateImpl(params, 'FOR_APPROVAL');

		def msginfo = [ 
			objid 		: data.objid, 
			dtcreated	: dateSvc.serverDate, 
			refid 		: data.objid, 
			filetype 	: 'billinggroup', 
			message 	: 'For approval of billing group for ' + data.dtstarted + ' to ' + data.dtended + '.', 
			senderid	: env.USERID, 
			sendername 	: env.NAME, 
			recipientid : 'APPROVER' 
		]; 
		inboxSvc.addMessage( msginfo );

		return data;
	}

	@ProxyMethod
	public def approveDocument( params ) {
		return approveImpl(params, 'APPROVED');
	}

	@ProxyMethod
	public def disapprove( params ) {
		return approveImpl(params, 'DISAPPROVED');
	}

	private def approveImpl( params, state ) {
		def data = em.read(params);
		if (!data) throw new Exception("Billing group record does not exist or has already been deleted.");

		data.dtposted = dateSvc.serverDate;
		data.poster = [objid: env.USERID, name: env.NAME];
		em.update(data, "bg-post");

		data = changeStateImpl(params, state);

		inboxSvc.removeMessageByRefid([refid: data.objid]); 
		return data;
	}

	private def changeStateImpl( params, state ) {
		def data = em.read(params);
		if (!data) throw new Exception("Billing group record does not exist or has already been deleted.");

		if (data.txnstate==state) {
			throw new Exception("Billing group already ${state}.");
		}

		data.txnstate = state;
		em.changeState(data);

		def action, remarks;
		switch (state.toUpperCase()) {
			case 'APPROVED'		: 	action = 'APPROVE';
									remarks = 'Billing group approved.';
									break;
			case 'DISAPPROVED' 	: 	action = 'DISAPPROVE';
									remarks = 'Billing group disapproved.';
									break;
			case 'FOR_APPROVAL' : 	action = 'FOR APPROVAL';
									remarks = 'Billing group submitted for approval';
									break;
		}

		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : dateSvc.serverDate, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: action, 
			remarks : remarks
		]; 
		txnlog.create( loginfo ); 

		return open(data);
	}

	@ProxyMethod
	public def getDetailsWithLedgerInfo( params ) {
		def list = em.getDetailsWithLedgerInfo([objid: params.objid]);

		return list.findAll{ it.state=='OPEN' }
	}
	*/
}