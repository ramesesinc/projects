import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import com.rameses.rules.common.*;
import java.rmi.server.UID;
import loan.facts.*;
import loan.actions.*;
import java.util.*;
import com.rameses.util.*;

class LoanCapturePaymentService extends ActiveListService
{
	@Env
	def env;

	@ActiveDB("capture_payment")
	def em;

	@ActiveDB('customer')
	def customer;

	@ActiveDB('collection_cb')
	def collection_cb;

	@ActiveDB("loan_exemption")
	def exemption;

	@ActiveDB("specialcollection")
	def specialcollection;

	@ActiveDB("fieldcollection")
	def fieldcollection;

	@ActiveDB("ledger_billing")
	def ledger_billing;

	@ActiveDB("loan_ledger")
	def loan_ledger;

	@ActiveDB('loan_ledger_payment')
	def loan_ledger_payment;

	@ActiveDB("loan_route")
	def loan_route;

	@ActiveDB('loan_product_type')
	def product_type;

	@ActiveDB('loanapp')
	def loanapp;

	@ActiveDB('datatxnlog')
	def txnlog; 

	@ActiveDB("collection_remittance")
	def remittance;

	@ActiveDB('amnesty')
	def amnesty;

	@Service("DateService")
	def dateSvc;

	@Service("LoanSpecialCollectionService")
	def specialColSvc;

	@Service("BranchService")
	def branchSvc;

	@Service("InboxService")
	def inboxSvc;

	@Service("RuleExecutorService")
	def ruleSvc;

	@Service("LoanLedgerBillingService")
	def billingSvc;

	@Service("CalendarEventService")
	def calendarSvc;

	@Service("LoanLedgerService")
	def ledgerSvc;

	@Service('NumberService')
	def numSvc;

	@ProxyMethod
	public def getOptions() {
		return [
			[caption: 'PENDING', state: 'PENDING'],
			[caption: 'FOR VERIFICATION', state: 'FOR_VERIFICATION'],
			[caption: 'VERIFIED', state: 'VERIFIED'],
			[caption: 'REMITTED', state: 'REMITTED'],
			[caption: 'POSTED', state: 'POSTED']
		]
	}

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];
		if (!params.state) {
			cols << [name: 'state', caption: 'Status'];
		}
		cols << [name: 'txndate', caption: 'Date'];
		cols << [name: 'collector.name', caption: 'Collector'];

		if (params.state == 'VERIFIED') {
			cols << [name: 'dtverified', caption: 'Date Verified'];
			cols << [name: 'verifier.name', caption: 'Verified By'];
		} else if (params.state == 'REMITTED') {
			cols << [name: 'dtremitted', caption: 'Date Remitted'];
			cols << [name: 'remittedby.name', caption: 'Remitted By'];
		}

		return cols;
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : '') + '%';
		def lm;
		if (params.state) {
			lm = 'getListByState';
		}
		if (params.state == 'PENDING') {
			lm = 'getPendingList';
		}
		if (lm) params._listMethod = lm;
	}

	@ProxyMethod
	public def open( params ) {
		def data = em.read(params)
		if (!data) throw new Exception("Record does not exist or has already been deleted.");

		if (data.state == 'PENDING') {
			def i = em.findSendBack([objid: data.objid]);
			if (i) data.sendbackremarks = i.remarks;
		}

		data.list = em.getDetails(data);
		data.list?.each{ o->
			if (o.ledgerid) {
				o.ledger = loan_ledger.findLedgerWithInfo([objid: o.ledgerid]);
				def appc = loanapp.read([objid: o.ledger?.loanapp?.objid], 'loanapp_capture');
				if (appc?.dtreleased) {
					o.ledger.dtreleased = appc.dtreleased;
				}
				//o.ledger.dtreleased = dateSvc.add(o.ledger.dtstarted, "-1");
			}
			//println 'ledger ' + o.ledger;
		}

		def prm = [
			collectionid: data.fieldcollectionid,
			groupid 	: data.specialcollectionid,
			grouptype 	: 'special' 
		];
		def rem = remittance.findCollectionRemittance(prm);
		if (rem) data.remitted = true;

		return data;
	}

	@ProxyMethod
	public def save( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Record does not exist or has already been deleted.");

		data.specialcollectionid = params.specialcollectionid;

		em.update(data);
		params.list?.each{ o->
			em.update(o, 'cp-detail');
		}
		/*
		if (!data.fieldcollectionid) {
			createBilling(params);
		}

		def sc;
		if (!data.specialcollectionid) {
			def prm = [
				objid 		: params.specialcollectionid,
				state 		: 'DOWNLOADED',
				billingid 	: params.fieldcollectionid,
				txndate 	: params.txndate,
				txntype 	: 'CAPTURE',
				collector 	: params.collector,
				itemtype 	: 'special',
				ledgers 	: []
			];
			params.list.each{ o->
				o.ledger.homeaddress = o.ledger.borrower.address;
				o.ledger.appno = o.ledger.loanapp.appno;
				o.ledger.loanamount = o.ledger.loanapp.loanamount;
				o.ledger.capturedetailid = o.objid;
				prm.ledgers.add(o.ledger)
				//prm.ledgers.add(loan_ledger.findLedgerById([ledgerid: o.ledger.objid]));
			}
			sc = specialColSvc.create(prm);
		} else {
			sc = specialcollection.read([objid: params.specialcollectionid]);
			sc.ledgers = [];
			params.list.each{ o->
				o.ledger.homeaddress = o.ledger.borrower.address;
				o.ledger.appno = o.ledger.loanapp.appno;
				o.ledger.loanamount = o.ledger.loanapp.loanamount;
				o.ledger.capturedetailid = o.objid;
				sc.ledgers.add(o.ledger);
			}
			sc = specialColSvc.update(sc);
		}

		//params.state = 'CLOSED';
		em.update(params);
		//em.delete(params, "cp-pending");

		def m;
		params.list.each{ o->
			//o.ledgerid = o.ledger.objid;
			m = [
				objid 	: o.objid,
				ledgerid: o.ledger.objid
			];
			em.update(m, "cp-detail");
		}
		//createFieldCollection(params);
		*/

		return open(data);
	}


	@ProxyMethod
	public def submitForVerification( params ) {
		if (!params.list) throw new Exception('Please specify list.');

		def i = params.list?.find{ it.ledgerid == null }
		if (i) throw new Exception("Cannot submit for verification. There are still unmapped payment(s).");

		def data = changeState(params, 'FOR_VERIFICATION');

		i = em.read(data, 'cp-pending');
		if (i) em.delete(i, 'cp-pending');

		data.dtsubmitforverification = dateSvc.serverDate;
		data.submittedforverificationby = [objid: env.USERID, name: env.NAME];
		em.update(data);


 		def msginfo = [ 
			objid 		: data.objid, 
			dtcreated	: data.dtsubmitforverification, 
			refid 		: data.objid, 
			filetype 	: 'capturedpayment', 
			message 	: 'Captured payment collection for approval (Collector: ' + data.collector.name + ' Date: ' + data.txndate + ')', 
			senderid	: env.USERID, 
			sendername 	: env.NAME, 
			recipientid : 'APPROVER' 
		]; 
		inboxSvc.addMessage( msginfo );

		return open(data);
	}

	@Async
	@ProxyMethod
	public def asyncVerify( params ) {
		return verify(params);
	}

	@ProxyMethod
	public def verify( params ) {
		def data = changeState(params, 'VERIFIED');

		data.dtverified = dateSvc.serverDate;
		data.verifier = [objid: env.USERID, name: env.NAME];
		em.update(data, 'verify');

		createSpecialCollection(data);
		createBilling(data);
		createFieldCollection(data);

		inboxSvc.removeMessageByRefid([refid: data.objid]);

		return open(data);
	}

	@ProxyMethod
	public def sendBack( params ) {
		if (!params.sendbackremarks) throw new Exception('Please specify send back remarks.');

		def data = changeState(params, 'PENDING');

		def i = em.read(data, 'cp-pending');
		if (!i) em.create(data, 'cp-pending');

		def item = [
			objid 		: 'CPS' + new UID(),
			parentid	: data.objid,
			dtcreated 	: dateSvc.serverDate,
			author 		: [objid: env.USERID, name: env.NAME],
			remarks 	: params.sendbackremarks
		];
		em.create(item, 'sendback');

		inboxSvc.removeMessageByRefid([refid: data.objid]);

		return open(data);
	}

	private void createBilling( data ) {
		def billing = ledger_billing.findByCollectorAndBilldate([collectorid: data.collector.objid, date: data.txndate]);
		if (!billing) {
			def branch = branchSvc.open([:]);
			
			billing = [
				objid 				: data.fieldcollectionid,
				dtcreated 			: dateSvc.serverDate,
				author 				: [objid: env.USERID, name: env.NAME],
				collector 			: data.collector,
				billdate 			: data.txndate,
				branchid 			: branch.code,
				totalfordownload 	: 0,
				totaldownloaded 	: 0,
				totalposted 		: 0,
			];
			ledger_billing.create(billing);
		}

		data.fieldcollectionid = billing.objid;

		def item = ledger_billing.findByBillingidAndItemid([objid: billing?.objid, itemid: data.specialcollectionid]);
		if (!item) {
			item = [
				objid 		: data.specialcollectionid,
				parentid 	: billing?.objid,
				state 		: 'DOWNLOADED',
				dtmodified 	: dateSvc.serverDate,
				modifiedby 	: [objid: env.USERID, name: env.NAME],
				item 		: [objid: data.specialcollectionid, type: 'special']
			];
			ledger_billing.create(item, "billing-item");

			billing.totalfordownload++;
			billing.totaldownloaded++;
			ledger_billing.update(billing);
		}

		data.specialcollectionid = item.objid;

		def _page = 1, _start = 0, _limit = 10;
		def facts, details, xitem, size, detail, param, itm;

		def actions = new RuleAction(); 
		actions.addCommand( "calcInterest", new  CalculateBillingInterest(NS: numSvc) );
		actions.addCommand( "calcPenalty", new  CalculateBillingPenalty(NS: numSvc) );
		actions.addCommand( "calcOthers", new CalculateBillingOthers(NS: numSvc) );
		actions.addCommand( "calcAmountDue", new CalculateBillingAmountDue(NS: numSvc) );
		actions.addCommand( "calcBalance", new CalculateBillingBalance(NS: numSvc) );

		def list = em.getDetails(data);
		if (!list) list = [];
		def currentdate = parseDate(data.txndate);

		while (true) {
			facts = [];
			details = [];
			facts << new CurrDate([currentdate: currentdate]);
			_start = (_page*_limit)-_limit;
			size = ((_page*_limit) < list.size()? (_page*_limit) + 1 : list.size());
			def scdetailid;
			for (int i=_start; i<size; i++) {
				if (i < (_page*_limit)) {
					itm = list[i];
					detail = specialcollection.read([objid: itm.scdetailid], 'sc-detail');

					param = [
						ledgerid 	: itm?.ledgerid,
						currentdate : currentdate,
						detailid 	: detail?.billingdetailid,
						billingid 	: billing?.objid,
						itemid 		: item?.objid
					]

					xitem = createItem(param);

					facts << buildLedgerFact(xitem);
					facts << buildLoanappFact(xitem);
					facts << buildBillingItemFact(xitem);
					facts << buildAmnestyFact(xitem);
					details << xitem;
				}
			}

			ruleSvc.execute( "loanbilling", facts, actions, null );

			details.each{ o->
				def billitem = facts.find{ (it instanceof LoanBillingItem && o.ledgerid == it.ledgerid) }
				o.penalty = billitem.penalty;
				o.others = billitem.others;
				o.amountdue = billitem.amountdue;
				o.balance = billitem.balance;

				def ledgeritem = loan_ledger.findLastLedgerItemByParentId([parentid: o.ledgerid]);		
				if (ledgeritem?.interestbal > 0) {
					o.amountdue += ledgeritem.interestbal;
					o.balance += ledgeritem.interestbal;
					o.interest += ledgeritem.interestbal;
				}
				if (ledgeritem?.penaltybal > 0) {
					o.amountdue += ledgeritem.penaltybal;
					o.balance += ledgeritem.penaltybal;
					o.penalty += ledgeritem.penaltybal;
				}

				def i = ledger_billing.read(o, 'billing-detail');
				if (!i) {
					ledger_billing.create(o, "billing-detail");	
				} else {
					ledger_billing.update(o, 'billing-detail');
				}
			}

			if (size > (_page*_limit)) {
				_page++;
			} else {
				break;
			}
		}

	}

	private def createItem( params ) {
		def ledger = loan_ledger.read([objid: params.ledgerid]);

		def currentdate = parseDate(params.currentdate);
		def maturitydate;
		if (ledger?.dtmatured) {
			maturitydate = parseDate(ledger?.dtmatured);
		}
		if (maturitydate && (currentdate.compareTo(maturitydate) > 0) && ledger?.overduepenalty == 0) {
			def p = product_type.read([name: ledger?.producttypeid])
			ledger.overduepenalty = ledgerSvc.computeOverduePenalty([balance: ledger.balance, pastduerate: (p.pastduerate? p.pastduerate : 0.00)]);
			loan_ledger.update(ledger, 'overduepenalty');
		}

		def app = loanapp.read([objid: ledger?.appid]);
		def appc = loanapp.read([objid: ledger?.appid], 'loanapp_capture');

		def cust = customer.read([objid: app?.borrower?.objid]);

		def pyt = loan_ledger_payment.findByParentid([parentid: ledger?.objid]);

		def item = [
			objid 				: params.detailid,
			parentid 			: params.itemid,
			billingid 			: params.billingid,
			ledgerid 			: ledger?.objid,
			route 				: app?.route,
			acctid 				: ledger?.acctid,
			loanappid 			: ledger?.appid,
			acctname 			: ledger?.acctname,
			loanamount 			: app?.loanamount,
			loandate 			: appc?.dtreleased,
			term 				: ledger?.term,
			appno 				: app?.appno,
			overpaymentamount	: ledger?.overpaymentamount,
			txndate 			: params.currentdate,
			dailydue			: ledger?.dailydue,
			dtreleased			: appc?.dtreleased,
			dtmatured			: ledger?.dtmatured,
			producttypeid		: ledger?.producttypeid,
			paymentmethod		: ledger?.paymentmethod,
			interestamount		: ledger?.interestamount,
			homeaddress			: cust?.address?.text,
			collectionaddress	: '',
			interest			: 0,
			others				: 0,
			overduepenalty		: ledger?.overduepenalty,
			isfirstbill			: (pyt? 0 : 1)
		];
		item.refno = billingSvc.getRefno([routecode: item?.route?.code]);

		return item;
	}

	public def buildLedgerFact( params ) {
		def data = loan_ledger.read([objid: params.ledgerid]);
		def item = [
			ledgerid 		: data.objid,
			appid 			: data.appid,
			dtmatured		: data.dtmatured,
			dtstarted		: data.dtstarted,
			dtlastpaid 		: data.dtlastpaid,
			currentdate 	: params.txndate,
			balance 		: data.balance,
			overduepenalty 	: data.overduepenalty,
			balance 		: data.balance,
			overpayment 	: data.overpaymentamount,
			hasamnesty 		: false,
			paymentmethod 	: data.paymentmethod
		];

		def appc = loanapp.read([objid: data.appid], 'loanapp_capture');
		if (appc) item.dtreleased = appc.dtreleased;

		def am = amnesty.findActiveAmnestyByLedgeridAndDate([ledgerid: data.objid, date: parse("yyyy-MM-dd", params.txndate)]);
		if (am) item.hasamnesty = true;

		return new LoanLedger(item);
	}

	public def buildLoanappFact( params ) {
		def data = loan_ledger.read([objid: params.ledgerid]);
		def producttype = product_type.read([name: data.producttypeid]);
		def item = [
			appid 			: data.appid,
			principal 		: data.totalprincipal,
			interest 		: data.interestamount,
			absentrate 		: producttype.absentpenalty,
			absentpenalty 	: data.absentpenalty,
			underpytrate 	: producttype.underpaymentpenalty,
			intrate 		: producttype.interestrate,
			schedule 		: data.dailydue,
			term 			: data.term,
			scheduledate 	: data.dtcurrentschedule
		];

		return new LoanApp(item);
	}

	public def buildBillingItemFact( params ) {
		def data = loan_ledger.read([objid: params.ledgerid]);
		
		Calendar c = Calendar.getInstance();
		c.setTime(params.txndate);
		def hassunday = false;
		if ((c.get(Calendar.DAY_OF_WEEK) == 1)) hassunday = true;

		def avgamount = data.dailydue;
		if (data.paymentmethod == 'over') avgamount = ledger_billing.findAvgOverpaymentAmount([parentid: data.objid]).groupbaseamount;
		
		def item = [
			ledgerid 		: data.objid,
			hassunday 		: hassunday,
			avgamount 		: avgamount,
			currentdate 	: params.txndate,
			dtschedule 		: data.dtcurrentschedule,
		]

		def days = dateSvc.getDaysDiff(item.dtschedule, item.currentdate);
		item.noofholidays = calendarSvc.getNoOfHolidays([lastscheduledate: item.dtschedule, item:[trialAndError: 0, totalDays: days]]);
		def prm = [startdate: item.dtschedule, enddate: item.currentdate, ledgerid: data.objid];
		def e = exemption.findTotaldaysExemptedByStartdateAndEnddateAndLedgeridWithoutHolidays(prm);
		item.noofdaysexempted =  (e.totaldays? e.totaldays : 0);

		return new LoanBillingItem(item);
	}

	private def buildAmnestyFact( params ) {
		def data = amnesty.findActiveAmnestyByLedgeridAndDate([ledgerid: params.ledgerid, date: parse("yyyy-MM-dd", params.txndate)]);
		def item = [:];
		if (data) {
			item.ledgerid = data.ledgerid;
			item.balance = data.balance;
			item.type = data.amnestyoption;
			item.waivedinterest = (data.iswaiveinterest > 0? true : false);
			item.waivedpenalty = (data.iswaivepenalty > 0? true : false);
		}

		return new Amnesty(item);
	}

	private def parseDate( date ) {
		if (!date) return null;
		if (date instanceof Date) {
			return date;
		} else {
			return java.sql.Date.valueOf(date);
		}
	}

	private def parse( pattern, date ) {
		if (!pattern) pattern = 'yyyy-MM-dd';
		def dt = parseDate(date);
		return new java.text.SimpleDateFormat(pattern).format(dt);
	}

	private void createSpecialCollection( data ) {
		def sc = specialcollection.read([objid: data.specialcollectionid]);
		if (!sc) {
			sc = [
				objid 		: data.specialcollectionid,
				state 		: 'DOWNLOADED',
				billingid 	: data.fieldcollectionid,
				txndate 	: data.txndate,
				txntype 	: 'CAPTURE',
				dtfiled 	: dateSvc.serverDate,
				author 		: [objid: env.USERID, name: env.NAME],
				collector 	: data.collector
			];
			specialcollection.create(sc);
		}
		data.specialcollectionid = sc.objid;

		def list = em.getDetails(data);

		def ledger, item, app;
		list?.each{ o->
			ledger = loan_ledger.read([objid: o.ledgerid]);
			if (!ledger) throw new Exception('Ledger record does not exist or has already been deleted.');

			app = loanapp.read([objid: ledger.appid]);
			if (!app) throw new Exception('Loanapp record does not exist or has already been deleted.');

			item = [
				objid 			: o.scdetailid,
				parentid		: sc.objid,
				billingdetailid	: 'LSCD' + new UID(),
				routecode 		: app?.route?.code,
				borrower 		: app?.borrower,
				loanapp 		: [objid: app?.objid, appno: app?.appno],
			];

			def i = specialcollection.read([objid: o.scdetailid], 'sc-detail');
			if (!i) {
				specialcollection.create(item, 'sc-detail');
			} else {
				item.billingdetailid = i.billingdetailid;
				specialcollection.update(item, 'sc-detail');
			}
		}

		/*
		if (action == 'create') {
			sc = specialColSvc.create(sc);
		} else if (action == 'update') {
			sc = specialColSvc.update(sc);
		}
		*/


		/*
		if (!data.specialcollectionid) {
			def prm = [
				objid 		: params.specialcollectionid,
				state 		: 'DOWNLOADED',
				billingid 	: params.fieldcollectionid,
				txndate 	: params.txndate,
				txntype 	: 'CAPTURE',
				collector 	: params.collector,
				itemtype 	: 'special',
				ledgers 	: []
			];
			params.list.each{ o->
				o.ledger.homeaddress = o.ledger.borrower.address;
				o.ledger.appno = o.ledger.loanapp.appno;
				o.ledger.loanamount = o.ledger.loanapp.loanamount;
				o.ledger.capturedetailid = o.objid;
				prm.ledgers.add(o.ledger)
				//prm.ledgers.add(loan_ledger.findLedgerById([ledgerid: o.ledger.objid]));
			}
			sc = specialColSvc.create(prm);
		} else {
			sc = specialcollection.read([objid: params.specialcollectionid]);
			sc.ledgers = [];
			params.list.each{ o->
				o.ledger.homeaddress = o.ledger.borrower.address;
				o.ledger.appno = o.ledger.loanapp.appno;
				o.ledger.loanamount = o.ledger.loanapp.loanamount;
				o.ledger.capturedetailid = o.objid;
				sc.ledgers.add(o.ledger);
			}
			sc = specialColSvc.update(sc);
		}
		*/

	}

	private def changeState( params, state ) {
		def data = em.read(params);
		if (!data) throw new Exception("Capture payment record does not exist or has already been deleted.");

		if (data.state == state) {
			throw new Exception("Capture payment record already " + state + ".");
		}

		data.state = state;
		em.changeState(data);

		def action, remarks;
		switch (state) {
			case 'FOR_VERIFICATION' : action = 'FOR VERIFICATION';
									  remarks = 'Submit for verification';
									  break;
			case 'VERIFIED' 		: action = 'VERIFIED';
									  remarks = 'Verified';
									  break;
			case 'REMITTED' 		: action = 'REMITTED';
									  remarks = 'Remitted';
									  break;
			case 'PENDING' 			: action = 'PENDING';
									  remarks = 'Pending';
									  break;
		}

		if (action && remarks) {
			def loginfo = [
				objid 	: 'TLOG' + new UID(), 
				txndate : dateSvc.serverDate, 
				txnid   : data.objid, 
				user    : [objid: env.USERID, username: env.NAME], 
				action	: action, 
				remarks : remarks
			]; 
			txnlog.create( loginfo ); 
		}

		return open(data);
	}

	@Async
	@ProxyMethod
	public def asyncRemit( params ) {
		return remit(params);
	}

	@ProxyMethod
	public def remit( params ) {
		if (!params.cbsno) throw new Exception("Please specify cbsno.")

		def data = changeState(params, 'REMITTED');

		def prm = [
			collectionid: data.fieldcollectionid,
			groupid		: data.specialcollectionid,
			grouptype 	: 'special'
		];
		def cb = collection_cb.findCashbreakdown(prm);
		if (!cb) throw new Exception("No cash breakdown sheet has been created for this collection.");

		def cbsno = params.cbsno.toUpperCase();
		if (cb.cbsno != cbsno) 
			throw new Exception("CBS No. inputted does not match cbs no. generated for this collection.");
		

		createRemittance(params);

		if (!data.cbsno) data.cbsno = params.cbsno;
		data.dtremitted = dateSvc.serverDate;
		data.remittedby = [objid: env.USERID, name: env.NAME];
		em.update(data, 'remit');

		prm = [
			objid 	: data.fieldcollectionid,
			itemid 	: data.specialcollectionid
		];
		def billing = ledger_billing.findByBillingidAndItemid(prm);
		if (billing) {
			billing.state = 'REMITTED';
			ledger_billing.changeState(billing);
		}

		def sc = specialcollection.read([objid: data.specialcollectionid]);
		if (sc) {
			sc.state = 'REMITTED';
			specialcollection.update(sc);
		}

		return open(data);
	}

	private void createFieldCollection( data ) {
		data = em.read(data);
		if (!data) throw new Exception('Capture payment record does not exist or has already been deleted.');

		def fc = fieldcollection.read([objid: data.fieldcollectionid]);
		if (!fc) {
			def branch = branchSvc.open([:]);

			fc = [
				objid 		: data.fieldcollectionid,
				dtfiled 	: dateSvc.serverDate,
				author 		: [objid: env.USERID, name: env.NAME],
				branchid 	: branch.code,
				billdate 	: data.txndate,
				collector 	: data.collector
			];
			fieldcollection.create(fc);
		}

		def item = fieldcollection.read([objid: data.specialcollectionid], "fc-item");
		if (!item) {
			item = [
				objid 		: data.specialcollectionid,
				parentid	: fc.objid,
				state 		: 'DRAFT',
				dtfiled 	: dateSvc.serverDate,
				author 		: [objid: env.USERID, name: env.NAME],
				item 		: [objid: data.specialcollectionid, type: 'special'],
				trackerid 	: data.trackerid,
				totalcount 	: data.list.size(),
				totalamount : data.list.amount.sum()
			];
			fieldcollection.create(item, "fc-item");
		}

		def list = em.getDetails(data);

		def xitem, loan, payment, billing, sc, refno;

		list?.each{ o->
			xitem = em.read(o, 'cp-detail');
			if (xitem) {
				sc = specialcollection.read([objid: xitem.scdetailid], 'sc-detail');

				billing = ledger_billing.read([objid: sc?.billingdetailid], "billing-detail");
				if (!billing) throw new Exception("Billing detail record does not exist or has already been deleted.");

				loan = fieldcollection.read([objid: sc?.billingdetailid], 'fc-loan');
				if (!loan) {
					loan = [
						objid	 			: sc?.billingdetailid,
						parentid 			: item?.objid,
						fieldcollectionid 	: fc.objid,
						loanapp 			: sc?.loanapp,
						borrower 			: sc?.borrower,
						routecode 			: sc?.routecode,
						noofpayments 		: 0,
						version 			: 1
					]
					fieldcollection.create(loan, "fc-loan");
				} else {
					if (!loan.version) loan.version = 1;
					fieldcollection.update(loan, 'fc-loan');
				}

				payment = fieldcollection.read([objid: xitem.objid], 'fc-payment');
				if (!payment) {
					refno = billing.refno + (loan.noofpayments > 1? loan.noofpayments : '');
					payment = [
						objid 				: xitem.objid,
						parentid			: loan.objid,
						itemid 				: loan.parentid,
						fieldcollectionid 	: fc?.objid,
						dtfiled 			: dateSvc.serverDate,
						author 				: [objid: env.USERID, name: env.NAME],
						txnmode 			: 'ONLINE',
						dtpaid				: xitem.dtpaid,
						refno 				: refno,
						paytype 			: billing.paymentmethod,
						amount 				: xitem.amount,
						paidby 				: xitem.paidby,
						payoption 			: xitem.payoption,
						version				: 1
					];
					fieldcollection.create(payment, "fc-payment");

					if (xitem.payoption == 'check') {
						payment.bank = xitem.bank;
						payment.check = xitem.check;
						fieldcollection.update(payment, "payment-check");
					}

					loan.noofpayments++;
					fieldcollection.update(loan, "loan-noofpayments");
				}
			}
		}

		/*
		def item;
		def sc;
		def fc_loan;
		def fc_payment;
		def billing;
		data.list.each{ o->
			item = em.read(o, "cp-detail");
			if (item) {
				sc = specialcollection.read([objid: item.scdetailid], "sc-detail");

				billing = ledger_billing.read([objid: sc.billingdetailid], "billing-detail");
				if (!billing) throw new Exception("Record does not exist or has already been deleted.");

				fc_loan = fieldcollection.read([objid: sc?.billingdetailid], "fc-loan");
				if (!fc_loan) {
					fc_loan = [
						objid 				: billing.objid,
						parentid 			: fc_item.objid,
						fieldcollectionid 	: fc.objid,
						loanapp 			: [
							objid 	: billing.loanappid,
							appno	: billing.appno
						],
						borrower 			: [
							objid 	: billing.acctid,
							name 	: billing.acctname
						],
						routecode 	: billing.route.code,
						noofpayments 		: 0
					];
					fieldcollection.create(fc_loan, "fc-loan");
				}

				fc_payment = fieldcollection.read([objid: item.objid], "fc-payment");
				if (!fc_payment) {
					fc_payment = [
						objid 	 			: item.objid,
						parentid 			: fc_loan.objid,
						itemid 			 	: fc_loan.parentid,
						fieldcollectionid 	: fc_loan.fieldcollectionid,
						dtfiled 			: dateSvc.serverDate,
						author 				: [
							objid 	: (env.USERID? env.USERID : 'NOT IDENTIFIED'),
							name 	: (env.NAME? env.NAME : 'NOT IDENTIFIED')
						],
						txnmode 			: 'ONLINE',
						dtpaid				: item.dtpaid,
						refno 				: billing.refno + (fc_loan.noofpayments > 1? fc_loan.noofpayments : ''),
						paytype 			: billing.paymentmethod,
						amount 				: item.amount,
						paidby 				: item.paidby,
						payoption 			: item.payoption
					];
					fieldcollection.create(fc_payment, "fc-payment");

					if (item.payoption == 'check') {
						fc_payment.bank = item.bank;
						fc_payment.check = item.check;
						fieldcollection.update(fc_payment, "payment-check");
					}

					fc_loan.noofpayments++;
					fieldcollection.update(fc_loan, "loan-noofpayments");
				}
				//billing = ledger_billing.read([objid: sc?.billingdetailid], "billing-detail");

			}
		}
		*/
	}

	private void createRemittance( params ) {
		def data = em.read([objid: params.objid]);
		if (!data) throw new Exception("Capture record does not exist or has already been deleted.");

		def list = em.getDetails(data);
		def totalaccts = list?.size();
		if (!totalaccts) totalaccts = 0;

		def totalamount = list?.amount?.sum();
		if (!totalamount) totalamount = 0;

		def item = fieldcollection.read([objid: data.specialcollectionid], 'fc-item');
		if (!item) throw new Exception('Field collection item record does not exist or has already been delted.');

		item.state = 'REMITTED';
		item.cbsno = params.cbsno;
		item.totalcount = totalaccts;
		item.totalamount = totalamount;
		fieldcollection.update(item, 'fc-item');

		def sc = specialcollection.read([objid: data.specialcollectionid]);
		if (!sc) throw new Exception('Special collection record does not exist or has already been deleted.');

		def param = [
			collectionid 	: sc.billingid,
			groupid 		: sc.objid,
			grouptype 		: 'special'
		];

		def rem = remittance.findCollectionRemittance(param);
		if (!rem) {
			rem = [
				objid 					: 'REM' + new UID(),
				state 					: 'FOR_POSTING',
				dtfiled 				: dateSvc.serverDate,
				author 					: [objid: env.USERID, name: env.NAME],
				txndate 				: sc.txndate,
				collector 				: sc.collector,
				collection 				: [objid: sc.billingid, type: 'FIELD'],
				group 					: [objid: sc.objid, type: 'special'],
				totalacctscollected 	: totalaccts,
				totalamount 			: totalamount,
				cbsno 					: params.cbsno
			];
			remittance.create(rem);
		}

		def detail, scdetail, payment;

		list?.each{ o->
			detail = remittance.findRemittanceDetailByRefid([refid: o.objid]);
			if (!detail) {
				scdetail = specialcollection.read([objid: o.scdetailid], "sc-detail");
				if (!scdetail) throw new Exception("Special collection detail ecord does not exist or has already been deleted.");

				payment = fieldcollection.read(o, "fc-payment");
				if (!payment) throw new Exception("Payment record does not exist or has already been deleted.");

				detail = [
					objid 		: 'REMDTL' + new UID(),
					parentid 	: rem.objid,
					refid 		: o.objid,
					borrower 	: scdetail.borrower,
					loanapp 	: scdetail.loanapp,
					routecode 	: scdetail.routecode,
					refno 		: payment.refno,
					amount 		: payment.amount,
					paytype 	: payment.paytype,
					payoption 	: payment.payoption,
					dtpaid 		: payment.dtpaid,
					paidby 		: payment.paidby
				]

				remittance.create(detail, "rem-detail");

				if (payment.payoption == 'check') {
					detail.bank = payment.bank;
					detail.check = payment.check;
					remittance.update(detail, "rem-detail-check");
				}

			}
		}

		/*
		def detail;
		def scdetail;
		def fcpayment;
		data.list.each{ o->
			detail = remittance.findRemittanceDetailByRefid([refid: o.objid]);
			if (!detail) {
				scdetail = specialcollection.read([objid: o.scdetailid], "sc-detail");
				if (!scdetail) throw new Exception("Record does not exist or has already been deleted.");

				fcpayment = fieldcollection.read(o, "fc-payment");
				if (!fcpayment) throw new Exception("Record does not exist or has already been deleted.");

				detail = [
					objid 		: 'REMDTL' + new UID(),
					parentid 	: rem.objid,
					refid 	 	: o.objid,
					borrower 	: scdetail.borrower,
					loanapp 	: scdetail.loanapp,
					routecode 	: scdetail.routecode,
					refno 		: fcpayment.refno,
					amount 		: fcpayment.amount,
					paytype 	: fcpayment.paytype,
					payoption 	: fcpayment.payoption,
					paidby 		: fcpayment.paidby,
					tag 		: 'ONLINE'
				]

				remittance.create(detail, "rem-detail");

				if (fcpayment.payoption == 'check') {
					detail.bank = fcpayment.bank;
					detail.check = fcpayment.check;
					remittance.update(detail, "rem-detail-check");
				}
			}
		}
		*/
	}
}