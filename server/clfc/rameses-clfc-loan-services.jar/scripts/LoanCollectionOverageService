import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class LoanCollectionOverageService extends ActiveCrudListService
{
	@Env
	def env;

	@ActiveDB("overage")
	def em;

	@ActiveDB("overage_voidrequest")
	def overage_voidrequest;

	@ActiveDB("collection_remittance")
	def remittance;

	@Service("DateService")
	def dateSvc;

	@Service("InboxService")
	def inboxSvc;

	@Service("SequenceService")
	def seqSvc;

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];
		if (!params.state) cols << [name: 'state', caption: 'Status'];

		cols << [name: 'txndate', caption: 'Date', type: 'date', outputFormat: 'MMM-dd-yyyy'];
		cols << [name: 'refno', caption: 'Ref. No.'];
		cols << [name: 'collector.name', caption: 'Collector'];
		cols << [name: 'amount', caption: 'Amount', type: 'decimal', format: '#,##0.00'];
		cols << [name: 'balance', caption: 'Balance', type: 'decimal', format: '#,##0.00'];

		if (params.state == 'NOTED') {
			cols << [name: 'dtnoted', caption: 'Date Noted'];
			cols << [name: 'notedby.name', caption: 'Noted By'];
		} else if (params.state == 'APPROVED') {
			cols << [name: 'dtposted', caption: 'Date Approved'];
			cols << [name: 'poster.name', caption: 'Approved By'];
		}

		return cols;
	}

	@ProxyMethod
	public def getStates() {
		return [
			[caption: 'All'],
			[caption: 'DRAFT', state: 'DRAFT'],
			[caption: 'FOR NOTING', state: 'FOR_NOTING'],
			[caption: 'NOTED', state: 'NOTED'],
			[caption: 'APPROVED', state: 'APPROVED'],
			[caption: 'VOID PENDING', state: 'VOID_PENDING'],
			[caption: 'VOIDED', state: 'VOIDED']
		];
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : '') + '%';

		if (params.remittanceid) {
			params._listMethod = 'getListByRemittanceid';
		}
		if (params.state) {
			params._listMethod = 'getListByState';
		}
		if (params.state && params.remittanceid) {
			params._listMethod = 'getListByRemittanceidAndState';
		}
	} 

	void beforeCreate( data ) {
		data.dtfiled = dateSvc.serverDate;
		data.author = [objid: env.USERID, name: env.NAME];
		if (!data.balance) data.balance = data.amount;
		def year = dateSvc.getServerYear().toString();
		def seqname = "overage" + year;
		data.refno = "OV" + year[2] + year[3] + seqSvc.getNextFormattedSeriesA(seqname, 7);
	}

	/*
	@ProxyMethod
	public def submitForApproval( data ) {
		data.state = 'FOR_APPROVAL';
		em.changeState(data);

		def msginfo = [ 
			objid 		: data.objid, 
			dtcreated	: dateSvc.serverDate, 
			refid 		: data.objid, 
			filetype 	: 'overage', 
			message 	: 'Overage document for approval', 
			senderid	: env.USERID, 
			sendername 	: env.NAME, 
			recipientid : 'APPROVER' 
		]; 
		inboxSvc.addMessage( msginfo );

		return data;
	}
	*/

	void afterOpen( data ) {
		def rem = remittance.read([objid: data.remittanceid]);
		if (rem) {
			def req = overage_voidrequest.findRequestByOverageidAndState([overageid: data.objid, txnstate: 'FOR_APPROVAL']);
			if (data.state=='NOTED' && !req) {
				data.allowVoid = true;
			}
			if (req) {
				data.voidremarks = req.remarks;
			}
		}
	}

	private def changeState( params, state ) {
		def data = em.read(params);
		if (!data) throw new Exception('Overage record does not exist or has already been deleted.');

		if (data.state == state) {
			throw new Exception('Overage record already ' + state + '.');
		}

		data.state = state;
		em.changeState(data);

		return open(data);
	}

	@ProxyMethod
	public def submitForNoting( params ) {
		def data = changeState(params, 'FOR_NOTING');

		def msginfo = [ 
			objid 		: data.objid, 
			dtcreated	: dateSvc.serverDate, 
			refid 		: data.objid, 
			filetype 	: 'overage', 
			message 	: 'Submitted overage document with ref. no. ' + data.refno + ' for noting.', 
			senderid	: env.USERID, 
			sendername 	: env.NAME, 
			recipientid : 'CASHIER' 
		]; 
		inboxSvc.addMessage( msginfo );		

		return open(data);
	}

	/*
	@ProxyMethod
	public def submitForSignatory( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Overage record does not exist or has already been deleted.");

		data.state = 'FOR_SIGNATORY';
		em.changeState(data);

		def msginfo = [ 
			objid 		: data.objid, 
			dtcreated	: dateSvc.serverDate, 
			refid 		: data.objid, 
			filetype 	: 'overage', 
			message 	: 'Submitted overage document for signatory', 
			senderid	: env.USERID, 
			sendername 	: env.NAME, 
			recipientid : 'CASHIER' 
		]; 
		inboxSvc.addMessage( msginfo );

		return open(data);
	}
	*/

	@ProxyMethod
	public def noted( params ) {
		def data = changeState(params, 'NOTED');

		data.dtnoted = dateSvc.serverDate;
		data.notedby = [objid: env.USERID, name: env.NAME];
		em.update(data, 'noted');

		def rem_other = remittance.findRemittanceOtherByRefid([refid: data.objid]);
		if (!rem_other) {
			rem_other = [
				objid 	: 'REMOTHR' + new UID(),
				parentid: data.remittanceid,
				refid 	: data.objid,
				txntype : 'OVERAGE',
				amount 	: data.amount
			];
			remittance.create(rem_other, "rem-other");	
		}

		inboxSvc.removeMessageByRefid([refid: data.objid]);

		return open(data);
	}

	@ProxyMethod
	public def voidOverage( params ) {
		def data = changeState(params, 'VOID_PENDING');

		def req = overage_voidrequest.findRequestByOverageidAndState([overageid: data.objid, txnstate: 'FOR_APPROVAL']);
		if (!req) {
			req = [
				objid		: 'OVR' + new UID(),
				dtcreated 	: dateSvc.serverDate,
				author 		: [objid: env.USERID, name: env.NAME],
				txnstate 	: 'FOR_APPROVAL',
				overageid 	: data.objid,
				remarks 	: params.remarks,
				overage 	: data
			];
			req.overage.collectorname = data.collector.name;
			overage_voidrequest.create(req);

			def msginfo = [ 
				objid 		: req.objid, 
				dtcreated	: req.dtcreated, 
				refid 		: req.objid, 
				filetype 	: 'overagevoidrequest', 
				message 	: 'Submitted void request for overage with ref. no. ' + data.refno + ' for approval.', 
				senderid	: env.USERID, 
				sendername 	: env.NAME, 
				recipientid : 'APPROVER' 
			]; 
			inboxSvc.addMessage( msginfo );	

		}

		return open(data);
	}
}