import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;

class LoanLedgerFixPreviewService
{
	@ActiveDB("amnesty")
	def em;

	@ActiveDB("loan_ledger")
	def ledgerdb;

	@ActiveDB("calendar_event")
	def calendar_event;

	@ActiveDB("loanapp")
	def loanapp;

	@ActiveDB("loan_ledger_payment")
	def ledger_payment;

	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public def getColumns( params ) {
		if (!params) params = [:];
		def cols = [];
		if (params.type == 'WAIVER') {
			cols << [name: 'paymentschedule', caption: 'Schedule of Payment', type: 'date', outputFormat: 'MMM. dd, yyyy'];
		}
		cols << [name: 'partialpayment', caption: 'Partial Payment', type: 'decimal', format: '#,##0.00;(#,##0.00)'];
		cols << [name: 'balanceamount', caption: 'Balance', type: 'decimal', format: '#,##0.00;(#,##0.00)'];

		if (params.type == 'WAIVER') {
			cols << [name: 'interestpaid', caption: 'Interest Paid', type: 'decimal', format: '#,##0.00;(#,##0.00)'];
			cols << [name: 'penaltycharge', caption: 'Penalty Charges', type: 'decimal', format: '#,##0.00;(#,##0.00)'];	
		}
		cols << [name: 'totalpayment', caption: 'Total Payment', type: 'decimal', format: '#,##0.00;(#,##0.00)'];
		cols << [name: 'receiptno', caption: 'OR No.'];
		cols << [name: 'datepaid', caption: 'Date Paid', type: 'date', outputFormat: 'MMM. dd, yyyy'];
		cols << [name: 'remarks', caption: 'Remarks'];

		return cols;
	}

	@ProxyMethod
	public def getList( params ) {
		params.objid = params.amnestyid;

		def xlist = em.getAmnestyDetails(params);
		
		def ledger = ledgerdb.read([objid: params.ledgerid]);
		def appc = loanapp.read([objid: ledger.appid], 'loanapp_capture');
		if (appc) {
			ledger.dategranted = appc.dtreleased;
		}
		if (!ledger.dategranted) ledger.dategranted = dateSvc.add(ledger.dtstarted, "-1");

		def list = [];

		def prevrefno, prevbal, cal = Calendar.getInstance();
		def exemptedamt = 0;
		def lastday = 0;
		def offsettotalpayment, prevday;
		def payments;
		def df = new java.text.SimpleDateFormat("yyyy-MM-dd");
		def am = em.read([objid: params.objid]);
		xlist.each{ 
			def itm = [
				originalamount		: null,
				partialpayment		: it.partialpayment,
				balanceamount		: it.balance,
				interestpaid		: (it.interestpaid != 0)? it.interestpaid : null,
				penaltycharge		: it.penaltypaid,
				totalpayment		: (it.amtpaid != 0)? it.amtpaid : null,
				receiptno			: it.refno,
				datepaid			: it.dtpaid,
				remarks 			: (it.remarks? it.remarks : ''),
				txndate 			: it.txndate
			];

			if (it.state == 'RECEIVED' && am.amnestyoption == 'WAIVER') {
				//println 'date granted: ' + ledger.dategranted + ' day: ' + it.day;
				itm.paymentschedule = dateSvc.add(ledger.dategranted, it.day+'')
				//println 'payment schedule ' + itm.paymentschedule;
				itm.coldate = df.format(itm.paymentschedule);
			}
			//if (!it.amnestyid) {
			//	itm.paymentschedule = dateSvc.add(ledger.dategranted, it.day+'')
			//	itm.coldate = df.format(itm.paymentschedule);
			//}
			if (it.state == "RECEIVED") {
				//def e = exemption.findExemptionByDateAndLedgerid([txndate: itm.paymentschedule, ledgerid: ledger.objid]);
				//if (e) {
				//	exemptedamt += ledger.absentpenalty;
				//	itm.remarks = 'WAIVED By '+e.author.username;
				//}
				//if (it.balance == ledger.totalprincipal) {
				//	itm.balanceamount = null;
				//}
				//if (!it.refno || (it.balance == prevbal && !it.amnestyid)) {
					
				if (!it.refno && it.balance != prevbal) {
					itm.balanceamount = null;
				}
				if (it.balance == prevbal) {
					if ((!it.amnestyid && (!it.amtpaid || it.interestbal > 0)) || am?.amnestyoption == 'WAIVER') {
						itm.balanceamount = null;
					}
				}
				
				if (it.partialpayment == 0 && (!it.amtpaid || it.interestbal > 0)) {
					itm.partialpayment = null;
				}
				/*
				if (!it.refno || (it.balance == prevbal && am.amnestyoption == 'WAIVER')) {
					//println 'balance ' + it.balance;
					//println 'prev balance ' + prevbal;
					itm.balanceamount = null;
				}
				if (it.partialpayment == 0) {
					itm.partialpayment = null;
				}
				*/

				//if (!flag && it.interestbal == 0 && it.penaltybal == 0) {
				//	itm.originalamount = ledger.totalprincipal;
				//	flag = true;
				//}
				if (!it.balance && !it.partialpayment) {
					itm.balanceamount = null;
				}
				if (it.refno == prevrefno || it.amtpaid == 0) {
					itm.receiptno = null;
					itm.datepaid = null
				} 

				if (it.interestbal > 0) {
					if (!itm.remarks) itm.remarks = '';
					else itm.remarks += ' \n';
					itm.remarks += 'lacking interest: '+it.interestbal;
					itm.paymentschedule = null;
				}
				if (it.penaltybal > 0) {
					if(!itm.remarks) itm.remarks = '';
					else itm.remarks += ' \n';
					itm.remarks += 'lacking penalty: '+it.penaltybal;
				}
				if (it.penaltypaid == 0) itm.penaltycharge = null;
				if (it.amtpaid != 0) {
					def total = (it.day - lastday)*ledger.dailydue;
					if (it.amtpaid == total && itm.penaltycharge) {
						itm.penaltycharge -= exemptedamt;
					}
					lastday = it.day;
					prevrefno = it.refno;
					exemptedamt = 0;
					//offsettotalpayment += it.amtpaid;
				} else if (am.amnestyoption != 'WAIVER') {
					itm.receiptno = null;
					itm.datepaid = null;
				}

				if (am?.amnestyoption == 'WAIVER' && am?.iswaiveinterest == 1) {
					itm.paymentschedule = null;
				}
				//payments = ledger_payment.getPaymentsByParentidAndTxndate([parentid: ledger.objid, txndate: it.dtpaid]);
				//if (payments?.size() > 1 && itm.datepaid) {
				//	payments.sort{ o->
				//		o.txndate.toString() + "" + o.refno
				//	}
				//	def xitem = payments[payments.size()-1];
					//println 'it ' + it;
					//println 'xitem ' + xitem;
				//	if (it.refno == xitem.refno) {
					//if (it.objid == xitem.objid) {
				//		if (itm.remarks) itm.remarks += " \n";
				//		itm.remarks += "Total Payment of " + payments.amount.sum();
				//	}
				//}
				//println 'current bal ' + it.balance; 
				prevbal = it.balance;

			} else if (it.state == 'PROCEED' || it.state == 'ADJUSTMENT') {
				itm.paymentschedule = null;
				if (!itm.interestpaid || itm.interestpaid == 0) itm.interestpaid = null;
				if (!itm.penaltycharge || itm.penaltycharge == 0) itm.penaltycharge = null;
				if (it.state == 'ADJUSTMENT') {
					itm.receiptno = null;
					itm.datepaid = null;
				}
				if (it.state == 'PROCEED') {
					if (it.interestbal > 0) {
						if (!itm.remarks) itm.remarks = '';
						else itm.remarks += ' \n';
						itm.remarks += 'lacking interest: ' + it.interestbal;
					}
					if (it.penaltybal > 0) {
						if(!itm.remarks) itm.remarks = '';
						else itm.remarks += ' \n';
						itm.remarks += 'lacking penalty: ' + it.penaltybal;
					}
				}

			}  else if (it.state == 'PREPAIDINTEREST') {
				itm.paymentschedule = null;
				itm.datepaid = null;
				itm.coldate = null;
				itm.partialpayment = null;
				itm.balanceamount = null;
				itm.penaltycharge = null;
			} else {
				if (it.state == 'OFFSET' && it.interestbal != 0 && it.interestbal != null) {
					itm.paymentschedule = null;
				} 
				if (itm.penaltycharge == 0) itm.penaltycharge = null;
				itm.receiptno = null;
				itm.datepaid = null;
				if (itm.partialpayment == 0) {
					itm.partialpayment = null;
					if (it.state != 'AMNESTY') {
						itm.balanceamount = null;
					}
				}
				itm.totalpayment = null;
			}
			if (itm.paymentschedule) {
				def rem = "";
				cal.setTime(itm.paymentschedule);
				if (cal.get(Calendar.DAY_OF_WEEK) == 1) {
					rem = "Sunday";
					/*
					if (!itm.remarks) {
						itm.remarks = "Sunday";
					} else {
						itm.remarks = "Sunday \n" + itm.remarks;
					} 
					*/
				}
				def evt = calendar_event.findByDate([date: itm.coldate]);
				if (evt) {
					if (rem) rem += " \n";
					rem += evt.name;
				}
				if (rem) {
					def rm = itm.remarks;
					itm.remarks = rem;
					if (rm) itm.remarks += ' \n' + rm;
				}
			}
			list.add(itm);
		}

		return list;
	}

	@ProxyMethod
	public def getPageIndex( params ) {
		def list = em.getAmnestyDetails(params);

		def rows = (params.rows? params.rows : 30);
		def a = (list.size()/rows);
		def pageindex = new BigDecimal(a+'').setScale(0, BigDecimal.ROUND_CEILING);
		if (pageindex <= 0) pageindex = 1;
		return pageindex;
	}
}