import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class LoanLedgerNoncashService extends ActiveCrudListService
{
	@Env
	def env;

	@ActiveDB("loan_ledger_noncash")
	def em;

	@ActiveDB("onlinecollection")
	def onlinecollection;

	@ActiveDB("loan_ledger")
	def ledger;

	@Service("DateService")
	def dateSvc;

	@Service("BranchService")
	def branchSvc;

	@Service("SequenceService")
	def seqSvc;

	@Service("LoanLedgerBillingService")
	def billingSvc;

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];
		if (!params.state) cols << [name: 'txnstate', caption: 'Status'];

		cols << [name: 'borrower.name', caption: 'Borrower'];
		cols << [name: 'refno', caption: 'RefNo'];
		cols << [name: 'txndate', caption: 'Date', type: 'date', outputFormat: 'MMM-dd-yyyy'];
		cols << [name: 'amount', caption: 'Amount', type: 'decimal', format: '#,##0.00'];

		if (params.state == 'COLLECTED') {
			cols << [name: 'dtcollected', caption: 'DateCollected'];
			cols << [name: 'collectedby.name', caption: 'CollectedBy'];
		}

		return cols;
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : '') + '%';
		if (params.state) {
			params._listMethod = 'getListByState';
		}
	}

	void afterList( params, list ) {
		list.each{ o->
			o.filtype = 'ledgernoncash';
			if (o.txntype == 'CAPTURE') o.filetype = 'captureledgernoncash';
		}
	}

	@ProxyMethod
	public def getStates() {
		return [
			[caption: 'All'],
			[caption: 'DRAFT', state: 'DRAFT'],
			[caption: 'COLLECTED', state: 'COLLECTED']
		];
	}

	void beforeCreate( data ) {
		data.dtcreated = dateSvc.serverDate;
		data.author = [objid: env.USERID, name: env.NAME];
		data.txntype = 'ONLINE';
	}

	@ProxyMethod
	public def collect( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Ledger non-cash record does not exist or has already been deleted.");

		if (data.txnstate == 'COLLECTED') {
			throw new Exception("Ledger non-cash record has already been collected.");
		}

		data.txnstate = 'COLLECTED';
		em.changeState(data);

		def currdate = dateSvc.getServerDateAsString();
		def collectedby = [objid: env.USERID, name: env.NAME];

		def collector = onlinecollection.read(collectedby, "oc-collector");
		if (!collector) {
			onlinecollection.create(collectedby, "oc-collector");
		}

		def prm = [
			txndate 	: currdate.split(" ")[0], 
			collectorid	: collectedby.objid, 
			state 		: 'DRAFT'
		];

		def col = onlinecollection.findCollectionByDateAndCollectorAndState(prm);
		if (!col || col.state != 'DRAFT') {
			col = [
				objid		: 'OC' + new UID(),
				state		: 'DRAFT',
				txndate 	: currdate,
				dtfiled 	: currdate,
				author		: collectedby,
				collector 	: collectedby,
			];
			onlinecollection.create(col);
		}

		def mledger = ledger.read([objid: data.parentid]);
		if (!mledger) throw new Exception("Ledger record does not exist or has already been deleted.");

		def item = em.findByIdWithInfo(data);
		if (!item) throw new Exception("Non-cash record does not exist or has already been deleted.");

		def refno = billingSvc.getRefno([routecode: item?.route?.code]);

		def detail = onlinecollection.findDetailByNoncashidAndCollectionid([noncashid: data.objid, collectionid: col.objid]);
		if (!detail) {
			detail = [
				objid 		: 'OCD' + new UID(),
				parentid 	: col.objid,
				loanapp 	: item?.loanapp,
				borrower 	: item?.borrower,
				route 		: item?.route,
				dtpaid 		: currdate,
				paidby 		: data.paidby,//item?.borrower?.name,
				refno 		: refno,
				paytype 	: item.paymentmethod,
				payoption 	: 'noncash',
				amount 		: data.amount
			];
			onlinecollection.create(detail, "oc-detail");

			def i = [
				objid 		: data.objid,
				collectionid: col.objid,
				refid 		: detail.objid,
				noncashid 	: data.objid
			];
			em.create(i, "collection-noncash");
		}

		data.dtcollected = currdate;
		data.collectedby = collectedby;
		data.refno = refno;
		data.txndate = currdate;
		em.update(data, "noncash-collect");


		return open(data);
	}
}