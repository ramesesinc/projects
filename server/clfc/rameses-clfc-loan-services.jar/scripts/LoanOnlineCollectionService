import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import com.rameses.rules.common.*;
import java.rmi.server.UID;
import loan.facts.*;
import loan.actions.*;
import java.util.*;
import com.rameses.util.*;
import java.math.MathContext;

class LoanOnlineCollectionService
{
	@Env
	def env;

	@ActiveDB("onlinecollection")
	def collection;

	@ActiveDB("loan_ledger")
	def ledger;

	@ActiveDB('loanapp')
	def loanapp;

	@ActiveDB("ledger_billing")
	def ledger_billing;

	@ActiveDB("loan_exemption")
	def exemption;

	@ActiveDB("loan_ledger_proceeds")
	def ledger_proceeds;

	@ActiveDB("loan_ledger_noncash")
	def ledger_noncash;

	@ActiveDB("voidrequest")
	def void_request;

	@ActiveDB("loan_product_type")
	def product_type;

	@ActiveDB("loan_compromise")
	def compromise;

	@ActiveDB("collection_remittance")
	def col_remittance;

	@ActiveDB("collection_cb")
	def collection_cb;
	
	@ActiveDB("amnesty")
	def amnesty;

	@Service("DateService")
	def dateSvc;

	@Service("SequenceService")
	def seqSvc;

	@Service("CalendarEventService")
	def calendarSvc;

	@Service("LoanPaymentService")
	def paymentSvc;

	@Service("LoanLedgerBillingService")
	def billingSvc;

	@Service("InboxService")
	def inboxSvc;

	@Service("CheckPaymentService")
	def checkPaymentSvc;

	@Service("RuleExecutorService")
	def ruleSvc;

	@Service("NumberService")
	def numSvc;

	@ProxyMethod
	public def create( params ) {
		if (!params.collector) throw new Exception("Please specify collector.");


		def serverdate = dateSvc.getServerDateAsString();
		params.dtpaid = serverdate;
		def date = serverdate.split(" ")[0];
		if (params.date) {
			date = params.date;
			params.dtpaid = date;
		}

		if (params.payoption=='cash') {
			def collector = collection.read(params.collector, "oc-collector");
			if (!collector) {
				collection.create(params.collector, "oc-collector");
			}
			
			def data = collection.findCollectionByDateAndCollectorAndState([txndate: date, collectorid: params.collector.objid, state: 'DRAFT']);
			if (!data || data.state != 'DRAFT') {
				data = [
					objid		: params.parentid,
					state		: 'DRAFT',
					txndate 	: date,
					dtfiled 	: serverdate,
					author		: params.collector,
					collector 	: params.collector,
				];
				collection.create(data);
			} else {
				params.parentid = data.objid;
			}

			collection.create(params, "oc-detail");
		} else if (params.payoption=='check') {
			def check = collection.read([objid: params.objid], "oc-check");
			if (!check) {
				check = [
					objid 		: params.objid,
					dtfiled 	: serverdate,
					author		: [objid: env.USERID, name: env.NAME],
					txndate 	: date,
					loanapp 	: params.loanapp,
					borrower 	: params.borrower,
					routecode 	: params.route.code,
					refno 		: params.refno,
					dtpaid 		: params.dtpaid,
					paidby 		: params.paidby,
					amount 		: params.amount,
					checkno 	: params.check.no,
					checkdate 	: params.check.date,
					bank		: params.bank,
					collector 	: params.collector
				];
				collection.create(check, "oc-check");
			}
			def item = [
				objid 		: 'CHKPYT' + new UID(),
				txndate 	: check.txndate,
				txntype 	: 'ONLINE',
				refid 		: check.objid,
				refno 		: check.refno,
				dtpaid 		: check.dtpaid,
				paidby		: check.paidby,
				amount 		: check.amount,
				checkno 	: check.checkno,
				checkdate	: check.checkdate,
				bank 		: check.bank,
				collector 	: check.collector,
				payor 		: check.borrower
			];
			checkPaymentSvc.create(item)
		}
		//println 'option ' + params.payoption;
		//throw new Exception('stop');
		/*if (params.payoption == 'check') {
			collection.update(params, "oc-detail-check");
		}*/

		return params;
	}

	@ProxyMethod
	public def getPaymentOptions() {
		return ['cash', 'check'];
	}


	@ProxyMethod
	public def computeBilling( params ) {
		def mLedger = ledger.findByAppId([appid: params.loanapp.objid]);
		if (!mLedger) throw new Exception("Record does not exist or has already been deleted.");

		def appc = loanapp.read([objid: mLedger.appid], 'loanapp_capture');

		def billing = [
			ledgerid 		: mLedger.objid,
			loanamount 		: mLedger.totalprincipal,
			dtreleased		: appc?.dtreleased,
			refno			: billingSvc.getRefno([routecode: params.route.code]),//'B'+seqSvc.getCurrentSeries('loanbill-'+params.route.code).toString().padLeft(8, '0'),
			interest 		: mLedger.interestamount,
			dailydue 		: mLedger.dailydue,
			paymentmethod 	: mLedger.paymentmethod,
			term			: mLedger.term,
			overduepenalty 	: mLedger.overduepenalty,
			overpayment 	: mLedger.overpaymentamount,
			dtmatured 		: mLedger.dtmatured,
			//others			: 0.00,
			//producttypeid	: mLedger.producttypeid
		]

		def item = [
			ledgerid 	: mLedger.objid,
			txndate 	: dateSvc.getServerDateAsString().split(" ")[0]
		];

		def facts = [];
		facts << new CurrDate([currentdate: item.txndate]);
		facts << buildLedgerFact(item);
		facts << buildLoanappFact(item);
		facts << buildBillingItemFact(item);
		facts << buildAmnestyFact(item);

		def actions = new RuleAction(); 
		actions.addCommand( "calcInterest", new  CalculateBillingInterest(NS: numSvc) );
		actions.addCommand( "calcPenalty", new  CalculateBillingPenalty(NS: numSvc) );
		actions.addCommand( "calcOthers", new CalculateBillingOthers(NS: numSvc) );
		actions.addCommand( "calcAmountDue", new CalculateBillingAmountDue(NS: numSvc) );
		actions.addCommand( "calcBalance", new CalculateBillingBalance(NS: numSvc) );

		ruleSvc.execute( "loanbilling", facts, actions, null );

		billing.balance = mLedger.balance;
		def billitem = facts.find{ (it instanceof LoanBillingItem) }
		if (billitem) {
			billing.amountdue = billitem.amountdue;
			billing.balance = billitem.balance;
		}
		/*
		def currentDate = dateSvc.serverDate;
		def maturityDate = billing.dtmatured;
		def amt = mLedger.dailydue;
		if (mLedger.paymentmethod == 'over' && mLedger.overpaymentamount > 0) amt = mLedger.overpaymentamount; 
		def days = dateSvc.getDaysDiff(mLedger.dtcurrentschedule, currentDate);
		//println 'days = '+days;
		billing.amountdue = (amt*days)+billing.others;
		if (!mLedger.compromiseid) {					
			if (currentDate > maturityDate) {
				billing.penalty = days*mLedger.overduepenalty;
				def amountdue = new BigDecimal((billing.penalty+(days * billing.interest)+mLedger.balance)+'').setScale(0, BigDecimal.ROUND_CEILING);
				billing.amountdue = new BigDecimal(amountdue+'').setScale(2);
				billing.days = days;
			} else {
				def noofholidays = calendarSvc.getNoOfHolidays([lastscheduledate: mLedger.dtcurrentschedule, item:[trialAndError: 0, totalDays: days]])
				days -= noofholidays;
				def cal = Calendar.getInstance();
				cal.setTime(currentDate);
				if ((cal.get(cal.DAY_OF_WEEK)-1) == 1) days--;
				//days -= exemption.getExemptionsByStartdateAndEnddateAndLedgerid([startdate: mLedger.dtcurrentschedule, enddate: currentDate, ledgerid: mLedger.objid]).size();
				def e = exemption.findTotaldaysExemptedByStartdateAndEnddateAndLedgerid([startdate: mLedger.dtcurrentschedule, enddate: currentDate, ledgerid: mLedger.objid]);
				days -= (e.totaldays? e.totaldays : 0);
				billing.penalty = mLedger.absentpenalty * (days > 0? days-1 : 0);
				billing.amountdue += billing.penalty;
			}
			billing.days = days;
			billing.balance = getBalance(billing, mLedger.balance);
		} else {
			def compromise = ledger_compromise.read([objid: mLedger.compromiseid]);
			def type = compromise.compromisetype;
			if (type == 'WAIVED_INTEREST') {
				billing.penalty = days * mLedger.overduepenalty;
				billing.balance = mLedger.balance + billing.penalty;
			} else if (type == 'WAIVED_PENALTY') {
				billing.balance = mLedger.balance + (days*mLedger.interest);
			}

		}
		*/
		//println 'billing = '+billing;
		return billing;
	}

	private def parse( pattern, date ) {
		if (!pattern) pattern = "yyyy-MM-dd";
		def dt;
		if (date instanceof Date) {
			dt = date;
		} else {
			dt = java.sql.Date.valueOf(date);
		}
		return new java.text.SimpleDateFormat(pattern).format(dt);
	}

	public def buildLedgerFact( params ) {
		def data = ledger.read([objid: params.ledgerid]);
		def lastitem = ledger.findLastLedgerItemByParentId([parentid: params.ledgerid]);
		def item = [
			ledgerid 		: data.objid,
			appid 			: data.appid,
			dtmatured		: data.dtmatured,
			dtrelease 		: DateUtil.add(data.dtstarted, "-1"),
			dtstarted		: data.dtstarted,
			dtlastpaid 		: data.dtlastpaid,
			currentdate 	: params.txndate,
			balance 		: data.balance,
			overduepenalty 	: data.overduepenalty,
			balance 		: data.balance,
			overpayment 	: data.overpaymentamount,
			hasamnesty 		: false,
			paymentmethod 	: data.paymentmethod,
			lackinginterest : lastitem?.interestbal,
			lackingpenalty 	: lastitem?.penaltybal
		];
		def am = amnesty.findActiveAmnestyByLedgeridAndDate([ledgerid: data.objid, date: parse("yyyy-MM-dd", params.txndate)]);
		if (am) item.hasamnesty = true;
		return new LoanLedger(item);
	}

	public def buildLoanappFact( params ) {
		def data = ledger.read([objid: params.ledgerid]);
		def producttype = product_type.read([name: data.producttypeid]);
		def item = [
			appid 			: data.appid,
			principal 		: data.totalprincipal,
			interest 		: data.interestamount,
			absentrate 		: producttype.absentpenalty,
			absentpenalty 	: data.absentpenalty,
			underpytrate 	: producttype.underpaymentpenalty,
			intrate 		: producttype.interestrate,
			schedule 		: data.dailydue,
			term 			: data.term,
			scheduledate 	: data.dtcurrentschedule
		]
		return new LoanApp(item);
	}

	public def buildBillingItemFact( params ) {
		def data = ledger.read([objid: params.ledgerid]);
		
		if (!(params.txndate instanceof Date)) {
			params.txndate = java.sql.Date.valueOf(params.txndate);
		}
		Calendar c = Calendar.getInstance();
		c.setTime(params.txndate);
		def hassunday = false;
		if ((c.get(Calendar.DAY_OF_WEEK) - 1) == 1) 
			hassunday = true;

		def avgamount = data.dailydue;
		if (data.paymentmethod == 'over') {
			def m = ledger_billing.findAvgOverpaymentAmount([parentid: data.objid]);
			avgamount = (m? m.groupbaseamount : data.overpaymentamount);
			if (!avgamount) avgamount = data.dailydue;
		}
		
		def item = [
			ledgerid 		: data.objid,
			hassunday 		: hassunday,
			avgamount 		: avgamount,
			currentdate 	: params.txndate,
			dtschedule 		: data.dtcurrentschedule,
		]

		def days = dateSvc.getDaysDiff(item.dtschedule, item.currentdate);
		item.noofholidays = calendarSvc.getNoOfHolidays([lastscheduledate: item.dtschedule, item:[trialAndError: 0, totalDays: days]]);
		def prm = [startdate: item.dtschedule, enddate: item.currentdate, ledgerid: data.objid];
		def e = exemption.findTotaldaysExemptedByStartdateAndEnddateAndLedgeridWithoutHolidays(prm);
		item.noofdaysexempted =  (e.totaldays? e.totaldays : 0);

		return new LoanBillingItem(item);
	}

	private def buildAmnestyFact( params ) {
		def data = amnesty.findActiveAmnestyByLedgeridAndDate([ledgerid: params.ledgerid, date: parse("yyyy-MM-dd", params.txndate)]);
		def item = [:];
		if (data) {
			item.ledgerid = data.ledgerid;
			item.balance = data.balance;
			item.type = data.amnestyoption;
			item.waivedinterest = (data.iswaiveinterest > 0? true : false);
			item.waivedpenalty = (data.iswaivepenalty > 0? true : false);
		}
		return new Amnesty(item);
	}
	/*
	private def getBalance( params, balance ) {
		def bal = balance? balance : 0.00;
		if (balance == params.loanamount) {
			def producttype = product_type.read([name: params.producttypeid]);
			bal = params.loanamount*(producttype.term/100);
			params.isfirstbill = 1;
		} else {
			def ledgeritem = ledger.findLastLedgerItemByParentId([parentid: params.ledgerid]);
			if (params.overduepenalty > 0) {
				bal += params.days*params.interest;
			} else {
				def avgamount = params.dailydue;
				if (params.paymentmethod == 'over') avgamount = ledger_billing.findAvgOverpaymentAmount([parentid: params.ledgerid]).groupbaseamount;
				BigDecimal b = new BigDecimal(avgamount+'').setScale(2);
				b = b.subtract(new BigDecimal(params.interest+'').setScale(2));
				BigDecimal bd = new BigDecimal(balance+'').setScale(2)
				bd = bd.divide(b, BigDecimal.ROUND_HALF_UP);
				bal += (bd.setScale(0, BigDecimal.ROUND_HALF_UP)*params.interest);
			}
			
			if (ledgeritem.interestbal > 0) {
				params.amountdue += ledgeritem.interestbal;
				bal += ledgeritem.interestbal;
				params.interest += ledgeritem.interestbal;
			}
			if (ledgeritem.penaltybal > 0) {
				params.amountdue += ledgeritem.penaltybal;
				bal += ledgeritem.penaltybal;
				params.penalty += ledgeritem.penaltybal;
			}
			params.isfirstbill = 0;
		}
		if (params.penalty > 0) bal += params.penalty;
		bal = new BigDecimal(bal+'').setScale(0, BigDecimal.ROUND_CEILING);
		bal = new BigDecimal(bal+'').setScale(2);
		return bal;
	}
	*/


	/*
	@ProxyMethod
	public def getCollection( params ) {
		if (!params.collection) throw new Exception("Please specify collection.");
		if (!params.collector) throw new Exception("Please specify collector.");

		def data = collection.read(params.collection);//collection.findDraftCollectionByDateAndCollector(prm);
		if (!data) throw new Exception('No collection for posting.');

		data.payments = collection.getPayments(data);
		def item;
		data.payments.each{ o->
			o.voided = 0;
			o.pending = 0;
			def voidrequest = void_request.findVoidRequestByPaymentid([paymentid: o.objid]);
			if (voidrequest && voidrequest != 'DISAPPROVED') {
				o.voidid = voidrequest.objid;
				if (voidrequest.state == 'APPROVED') {
					o.voided = 1;
				} else if (voidrequest.state == 'FOR_APPROVAL') {
					o.pending = 1;
				}
			}

			o.iscash = true;
			o.isnoncash = false;

			if (o.isnoncash == false && o.payoption=='check') {
				o.iscash = false;
				o.isnoncash = true;

			} else if (o.isnoncash == false) {
				item = ledger_noncash.findCollectionNoncashByRefid([refid: o.objid]);
				if (item) {
					o.iscash = false;
					o.isnoncash = true;
				}
			}
		}

		data.remittance = collection.findRemittanceById(data);
		def prm = [
			collectionid: data.objid,
			groupid		: data.objid,
			grouptype 	: 'online'
		];
		data.cashbreakdown = collection_cb.findCashbreakdown(prm);
		if (data.cashbreakdown) {
			def items = collection_cb.getDetails(data.cashbreakdown);
			data.cashbreakdown.items = items;
		}

		if (data.payments) {
			data.hasCash = false;
			//def cash = data.payments.find{ it.payoption == 'cash'}
			def cash = data.payments.find{ it.voided==0 && it.iscash==true }
			if (cash) data.hasCash = true;
		}

		return data;
	}
	*/

	@ProxyMethod
	public def getCollection( params ) {
		if (!params.collection) throw new Exception('Please specify collection.');
		if (!params.collector) throw new Exception('Please specify collector.');

		def data = collection.read(params.collection);
		if (!data) throw new Exception('No collection for posting.');

		def list = collection.getPayments(data);
		def vr, item;
		list?.each{ o->
			vr = void_request.findVoidRequestByPaymentid([paymentid: o?.objid]);
			//println 'void request ' + vr;
			if (vr) {
				o.voidid = vr.objid;
				if (vr.state == 'APPROVED') {
					o.state = 'VOIDED';
				} else if (vr.state == 'FOR_APPROVAL') {
					o.state = 'PENDING';
				}
			}

			o.iscash = true;
			o.isnoncash = false;

			if (o.isnoncash == false && o.payoption=='check') {
				o.iscash = false;
				o.isnoncash = true;

			} else if (o.isnoncash == false) {
				item = ledger_noncash.findCollectionNoncashByRefid([refid: o.objid]);
				if (item) {
					o.iscash = false;
					o.isnoncash = true;
				}
			}
		}
		
		data.payments = list;

		data.remittance = collection.findRemittanceById(data);

		def cb;
		if (data.remittance) {
			cb = collection_cb.findCashbreakdownByCbsno([cbsno: data.remittance.cbsno]);

			def rem = data.remittance;
			data.state = rem?.state;

			if (rem.state == 'FOR_POSTING') {
				data.alloweditbreakdown = true;
				data.allowpost = true;
			}

		} else {
			def prm = [
				collectionid: data.objid,
				groupid		: data.objid,
				grouptype 	: 'online'
			];
			cb = collection_cb.findCashbreakdown(prm);
		}


		//data.cashbreakdown = collection_cb.findCashbreakdown(prm);
		if (cb) {
			def items = collection_cb.getDetails(cb);
			cb.items = items;

			def s = collection_cb.findCurrentSendbackByState([objid: cb.objid, state: 'DRAFT']);
			if (s) {
				data.alloweditbreakdown = true;
				cb.sendbackremarks = s.remarks;
				cb.allowcbssubmitforverification = true;
			}
		}

		data.cashbreakdown = cb;

		if (data.payments) {
			data.hasCash = false;
			//def cash = data.payments.find{ it.payoption == 'cash'}
			def cash = data.payments.find{ it.state==null && it.iscash==true }
			if (cash) data.hasCash = true;
		}

		return data;
	}

	@ProxyMethod
	public def remit( data ) {
		def m = collection.read(data);
		if (!m) throw new Exception('Collection record does not exist or has already been deleted.');

		def p = data?.payments?.find{ it.state == 'PENDING' }
		if (p) throw new Exception('Cannot remit collection. There are still pending void payment request(s).');


		if (!data.remittance) throw new Exception('Please specify remittance.');

		def remittance = [:];
		remittance.putAll(data.remittance);

		def hascash = (data?.payments?.find{ !it.state && it.iscash==true }? true : false);

		if (hascash==true) {
			def params = [
				collectionid: m.objid,
				groupid		: m.objid,
				grouptype	: 'online'
			];

			def cb = collection_cb.findCashbreakdown(params);
			if (!cb) throw new Exception("No cash breakdown sheet has been created for this collection.");

			def cbsno = remittance?.cbsno?.toUpperCase();

			//println cbsno + " " + remittance.cbsno;
			if (cb.cbsno != cbsno) {
				throw new Exception("CBS No. inputted does not match cbs no. generated for this collection.");
			}

		}

		data.state = 'REMITTED';
		collection.changeState(data);

		remittance.state = 'FOR_POSTING';
		remittance.dtfiled = dateSvc.serverDate;
		remittance.author = [objid: env.USERID, name: env.NAME];
		remittance.txndate = data.txndate;
		remittance.collector = data.collector;
		remittance.collection = [objid: data.objid, type: 'ONLINE'];
		remittance.group = [objid: data.objid, type: 'online'];
		//remittance.totalacctscollected = data?.payments?.payments.size();

		def xlist = [], accts = 0;
		xlist.addAll(data?.payments?.findAll{ !it.state });
		if (xlist) {
			xlist.unique{ it.loanapp.objid }
			accts = xlist?.size();
		}
		remittance.totalacctscollected = accts;

		def amt = data?.payments?.findAll{ !it.state }?.amount?.sum();
		if (!amt) amt = 0;
		remittance.totalamount = amt;

		//remittance.totalamount = data.payments.findAll{ it.voided == 0 }.amount.sum();
		col_remittance.create(remittance);
		col_remittance.create(remittance, "pending-remittance");

		def item;
		def list = data?.payments?.findAll{ !it.state }
		list?.each{ o->
			item = [
				objid 		: 'REMDTL' + new UID(),
				parentid 	: remittance.objid,
				refid 		: o.objid,
				borrower 	: o.borrower,
				loanapp 	: o.loanapp,
				routecode 	: o.route.code,
				refno 		: o.refno,
				amount 		: o.amount,
				paytype 	: o.paytype,
				payoption	: o.payoption,//'cash',
				dtpaid		: o.dtpaid,
				paidby 		: o.paidby,
				tag 		: 'ONLINE'
			];
			col_remittance.create(item, "rem-detail");

			if (item.payoption == 'check') {
				item.bank = o.bank;
				item.check = o.check;
				col_remittance.update(item, "rem-detail-check");
			}
		}

		return getCollection([collection: [objid: data.objid], collector: data.collector]);
	}

	/*	
	@ProxyMethod
	public def remit( data ) {
		if (!data.remittance) throw new Exception("Please specify remittance.");

		def pending = data.payments.find{ it.pending == 1};
		if (pending) throw new Exception("Cannot remit collection. There are still pending void payment request/s.");

		def m = collection.read(data);
		if (!m) throw new Exception("Collection record does not exist or has already been deleted.");

		def remittance = [:];
		remittance.putAll(data.remittance);

		//data.payments = collection.getPayments(data);		
		//def hascash = (data.payments.find{ it.payoption == 'cash'}? true : false);
		def hascash = (data.payments.find{ it.voided==0 && it.iscash==true }? true : false);

		if (hascash==true) {
			def prm = [
				collectionid: m.objid,
				groupid		: m.objid,
				grouptype 	: 'online'
			];
			def cb = collection_cb.findCashbreakdown(prm);
			if (!cb) throw new Exception("No cash breakdown sheet has been created for this collection.");

			def cbsno = remittance.cbsno.toUpperCase();
			//println cbsno + " " + remittance.cbsno;
			if (cb.cbsno != remittance.cbsno) 
				throw new Exception("CBS No. inputted does not match cbs no. generated for this collection.");

		}

		data.state = 'REMITTED';
		collection.changeState(data);

		remittance.state = 'FOR_POSTING';
		remittance.dtfiled = dateSvc.serverDate;
		remittance.author = [objid: env.USERID, name: env.NAME];
		remittance.txndate = data.txndate;
		remittance.collector = data.collector;
		remittance.collection = [objid: data.objid, type: 'ONLINE'];
		remittance.group = [objid: data.objid, type: 'online'];
		remittance.totalacctscollected = data.payments.payments.size();
		remittance.totalamount = data.payments.findAll{ it.voided == 0 }.amount.sum();
		col_remittance.create(remittance);
		col_remittance.create(remittance, "pending-remittance");


		def item;
		def list = data.payments.findAll{ it.voided == 0 }
		list.each{ o->
			item = [
				objid 		: 'REMDTL' + new UID(),
				parentid 	: remittance.objid,
				refid 		: o.objid,
				borrower 	: o.borrower,
				loanapp 	: o.loanapp,
				routecode 	: o.route.code,
				refno 		: o.refno,
				amount 		: o.amount,
				paytype 	: o.paytype,
				payoption	: o.payoption,//'cash',
				dtpaid		: o.dtpaid,
				paidby 		: o.paidby,
				tag 		: 'ONLINE'
			];
			col_remittance.create(item, "rem-detail");

			if (item.payoption == 'check') {
				item.bank = o.bank;
				item.check = o.check;
				col_remittance.update(item, "rem-detail-check");
			}
		}

		data.remittance = col_remittance.read(remittance);
		return getCollection([collection: [objid: data.objid], collector: data.collector]);
	}
	*/

	@ProxyMethod
	public def getCollectors( params ) {
		if (!params.txndate) throw new Exception("Please specify txndate.");

		return collection.getOnlineCollectors(params);
	}

	@ProxyMethod
	public def getRouteList( params ) {
		def list = [];
		if (params.txndate && params.collectorid) {
			list = collection.getCollectionByCollectoridAndDate(params);

			list?.sort{ it.dtfiled }
			list?.eachWithIndex{ itm, idx->
				itm.caption = 'Direct ' + (idx + 1);
			}
		}

		return list;
	}

	@ProxyMethod
	public def getCollections( params ) {
		if (!params.txndate) throw new Exception("Please specify txndate.");
		if (!params.collectorid) throw new Exception("Please specify collectorid.");
		if (!params.collectionid) throw new Exception('Please specify collectionid.');

		def data = [:];
		def item = collection.read([objid: params.collectionid]);
		if (!item) throw new Exception('Online collection record does not or has already been deleted.');

		data.state = item.state;

		def rem = col_remittance.findRemittanceByCollectionid([collectionid: item.objid]);
		if (rem) {
			data.state = rem.state;
		}

		data.payments = collection.getOnlineCollectionsByCollectionid(params);
		data.payments.each{ o->
			o.voided = 0;
			o.pending = 0;
			def voidrequest = void_request.findVoidRequestByPaymentid([paymentid: o.objid]);
			if (voidrequest && voidrequest != 'DISAPPROVED') {
				o.voidid = voidrequest.objid;
				if (voidrequest.state == 'APPROVED') {
					o.voided = 1;
				} else if (voidrequest.state == 'FOR_APPROVAL') {
					o.pending = 1;
				}
			}
		}

		return data;
	}

	@ProxyMethod
	public def getCollectorList( params ) {
		def list = [];

		if (params.txndate) {
			list = collection.getCollectorListByDate([date: params.txndate]);
		}

		return list;
	}

	@ProxyMethod
	public def getCollectors() {
		def list = collection.getCollectors();

		list.each{o->
			o.collectionDates = collection.getCollectionDateByCollector([collectorid: o.objid]);
			o.collectionDates.each{
				it.formatteddate = new java.text.SimpleDateFormat("MMM dd, yyyy").format(it.txndate);
			}
		}

		return list;
	}

	@ProxyMethod
	public def getRoutes( params ) {
		if (!params.collectorid) throw new Exception("Please specify collectorid.");

		return collection.getRoutesByCollectorAndCollectionDate(params);
	}

	@ProxyMethod
	public def saveCashBreakdown( params ) {
		if (!params.cashbreakdown) throw new Exception("Please specify cashbreakdown.");

		println params;
		throw new Exception("stop");

		def cb = [
			objid 		: params.cashbreakdown.objid,
			state 		: 'FOR_VERIFICATION',
			dtfiled 	: dateSvc.serverDate,
			author 		: [objid: env.USERID, name: env.NAME],
			txndate 	: params.remittance.txndate,
			collector 	: params.remittance.collector,
			collection 	: params.remittance.collection,
			group 		: params.remittance.group,
			cbsno 		: params.remittance.cbsno
		];
		collection_cb.create(cb);
		collection_cb.create(cb, "cb-forverification");

		def msginfo = [ 
			objid 		: cb.objid, 
			dtcreated	: cb.dtfiled, 
			refid 		: cb.objid, 
			filetype 	: 'cashbreakdown', 
			message 	: 'For verification CBS No. '+ cb.cbsno, 
			senderid	: env.USERID, 
			sendername 	: env.NAME, 
			recipientid : 'ACCT_ASSISTANT' 
		]; 
		inboxSvc.addMessage( msginfo );

		def items = params.cashbreakdown.items;
		items.each{ o->
			o.objid = 'CBDTL' + new UID();
			o.parentid = params.cashbreakdown.objid;			

			collection_cb.create(o, "cb-detail");
		}

		cb.items = collection_cb.getDetails(cb);
		return cb;
	}

	@ProxyMethod
	public def updateCashBreakdown( params ) {
		if (!params.objid) throw new Exception('Please specify cashbreakdownid.');
		if (!params.items) throw new Exception('Please specify breakdown.');

		def cb = collection_cb.read(params);
		if (!cb) throw new Exception('CBS record does not exist or has already been deleted.');

		def sb = collection_cb.findCurrentSendbackByState([objid: cb.objid, state: 'DRAFT']);
		if (cb.state != 'DRAFT' && !sb) {
			throw new Exception("CBS has already been " + cb.state + ".");
		}

		params.items.each{ o->
			collection_cb.update(o, "cb-detail");
		}
		cb = collection_cb.read([objid: params.objid]);
		cb.items = collection_cb.getDetails(cb);


		def s = collection_cb.findCurrentSendbackByState([objid: cb.objid, state: 'DRAFT']);
		if (s) {
			cb.sendbackremarks = s.remarks;
			cb.allowcbssubmitforverification = true;
		}


		return cb;
	}

	/*
	@ProxyMethod
	public def updateCashBreakdown( params ) {
		if (!params.cashbreakdown) throw new Exception("Please specify cashbreakdown.");

		def cb = collection_cb.read(params.cashbreakdown);
		if (!cb) throw new Exception("Record does not exist or has already been deleted.");

		if (cb.state == 'VERIFIED')
			throw new Exception("CBS has already been verified.");

		collection_cb.update(params.cashbreakdown);
		params.cashbreakdown.items.each{ o->
			collection_cb.update(o, "cb-detail");
		}
		cb = collection_cb.read(params.cashbreakdown);
		cb.items = collection_cb.getDetails(cb);
		return cb;
	}
	*/

	@Async
	@ProxyMethod
	public def postAsync( params ) {
		post(params);
	}

	@ProxyMethod
	public def post( data ) {
		def payments = collection.getPayments(data);
		def vr;
		payments?.each{ o->
			vr = void_request.findVoidRequestByPaymentid([paymentid: o?.objid]);
			//println 'void request ' + vr;
			if (vr) {
				o.voidid = vr.objid;
				if (vr.state == 'APPROVED') {
					o.state = 'VOIDED';
				} else if (vr.state == 'FOR_APPROVAL') {
					o.state = 'PENDING';
				}
			}

		}

		//payments.each{ println it }
		//throw new Exception("stop");

		def p = payments?.find{ it.state=='PENDING' };
		if (p) throw new Exception("Cannot post collection. There are still pending void payment request/s.");

		//def payments = params.payments;
		data.totalcount = payments.size();
		data.totalamount = payments.amount.sum();

		def item;
		payments.each{ o->
			if (!o.state) {
				o.collector = data.collector;
				o.routecode = o.route.code;
				o.appid = o.loanapp.objid;

				o.isproceedcollection  = false;
				item = ledger_proceeds.findCollectionProceedByRefid([refid: o.objid]);
				if (item) {
					o.isproceedcollection = true;
					o.proceedid = item.objid;
				}

				o.isnoncash = false;
				item = ledger_noncash.findCollectionNoncashByRefid([refid: o.objid]);
				if (item) {
					o.isnoncash = true;
					o.noncashid = item.objid;
				}
				//item = ledger_proceeds
				//o.isproceedcollection = (o.isproceedcollection==1? true : false);

				o.payamount = o.amount;
				o.entity = data.remittance;
				paymentSvc.postPayment(o);
			}
		}

		//throw new Exception('stop');

		data.remittance.state = 'POSTED';
		col_remittance.changeState(data.remittance);

		data.remittance.dtposted = dateSvc.serverDate;
		data.remittance.poster = [objid: env.USERID, name: env.NAME];
		col_remittance.update(data.remittance, "post-remittance");
		col_remittance.delete(data.remittance, "pending-remittance");

		def l = collection.getCollectionDateByCollector([collectorid: data.collector.objid]);
		if (!l) {
			collection.delete(data.collector, "oc-collector");
		}

		afterPost(data);
	}

	private void afterPost( params ) {
		//if (!params.cashbreakdown) throw new Exception("Please specify cashbreakdown.");

		if (params.cashbreakdown) {
			def dtfiled = dateSvc.serverDate;
			def cb = collection_cb.read(params.cashbreakdown);

			cb.state = 'FOR_VERIFICATION';
			collection_cb.update(cb);

			def c = collection_cb.read(cb, "cb-forverification");
			if (!c) {
				collection_cb.create(cb, "cb-forverification");
				
				def msginfo = [ 
					objid 		: cb.objid, 
					dtcreated	: dtfiled, 
					refid 		: cb.objid, 
					filetype 	: 'cashbreakdown', 
					message 	: 'For verification CBS No. '+ cb.cbsno, 
					senderid	: env.USERID, 
					sendername 	: env.NAME, 
					recipientid : 'ACCT_ASSISTANT' 
				]; 
				inboxSvc.addMessage( msginfo );
			}
		}
	}

	private void beforeSubmitCbsForVerification( params ) {
		def remittanceid = params?.remittance?.objid;
		def rem = col_remittance.read([objid: remittanceid]);
		if (!rem) throw new Exception('Collection remittance record does not exist or has already exist.');

		def totalcollection = rem.totalamount;

		def cashbreakdownid = params?.cashbreakdown?.objid;
		def cb = collection_cb.read([objid: cashbreakdownid]);
		if (!cb) throw new Exception('Cash breakdown record does not exist or has already been deleted.');

		def details = collection_cb.getDetails(cb);

		//def totalbreakdown = (details? details.amount?.sum() : 0);
		def totalbreakdown = details?.amount?.sum();
		if (!totalbreakdown) totalbreakdown = 0;

		if (totalcollection != totalbreakdown) {
			throw new Exception('Total collection does not match total breakdown.');
		}
	}


	@ProxyMethod
	public def submitCbsForVerification( params ) {
		beforeSubmitCbsForVerification(params);

		def cashbreakdownid = params.cashbreakdown.objid;

		def cb = collection_cb.read([objid: cashbreakdownid]);
		if (!cb) throw new Exception('Cash breakdown record does not exist or has already been deleted.');

		if (cb.state != 'FOR_VERIFICATION') {
			cb = cashbreakdownSvc.submitForVerification(cb);
		}

		def c = collection_cb.read(cb, "cb-forverification");
		if (!c) {
			collection_cb.create(cb, "cb-forverification");
		}

		def sb = collection_cb.findCurrentSendbackByState([objid: cb.objid, state: 'DRAFT']);
		if (sb) {
			sb.state = 'CLOSED';
			collection_cb.update(sb, 'cb-sendback');
		}

		def msginfo = [ 
			objid 		: cb.objid, 
			dtcreated	: dateSvc.serverDate, 
			refid 		: cb.objid, 
			filetype 	: 'cashbreakdown', 
			message 	: 'For verification CBS No. '+ cb.cbsno, 
			senderid	: env.USERID, 
			sendername 	: env.NAME, 
			recipientid : 'ACCT_ASSISTANT' 
		]; 
		inboxSvc.addMessage( msginfo );

		return cb;
	}

}