import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class NewLoanAppService 
{	
	@ActiveDB(value='loanapp')
	def loanapp;

	@ActiveDB(value='loanapp_borrower')
	def loanapp_borrower; 	

	@ActiveDB(value='loan_product_type')
	def productType;

	@ActiveDB(value='borrower')
	def borrower; 	

	@Service('DateService') 
	def dateSvc;

	@Service('SequenceService') 
	def seqSvc;

	@Service('LoanAppUtil')
	def loanAppUtil;

	@Service("BranchService")
	def branchSvc;

	@Env 
	def env;

	@ProxyMethod 
	public def initEntity() { 
        def entity = [
            objid: 'LOAN' + new UID(), 
            borrower: [:], 
            schedule: [:], 
            branch: [:], 
            productTypes: productType.getList([searchtext: '%'])  
        ]; 	
        return entity; 	
	} 

	@ProxyMethod 
	public void checkBorrowerForExistingLoan( params ) {
		loanAppUtil.checkBorrowerForExistingLoan( params ); 
	}


	@ProxyMethod 
	public def create(data) { 
		//verify the borrower first 
		checkBorrowerForExistingLoan([borrowerid: data.borrower.objid]); 

		if (data.clienttype == 'MARKETED' && !data.marketedby) 
			throw new Exception('Please specify marketedby'); 

		def branch = branchSvc.open([:]);

		data.branch = branch;
		data.dtcreated = dateSvc.serverDate.toString();
		data.createdby = env.USERID; 
		data.version = 1;		
		data.state = 'INCOMPLETE'; 

		def seqno = seqSvc.getNextSeries('loan'); 
		data.loanno = data.branch.code + addLeadingChars(seqno,'0',8); 
		data.appno = data.loanno + addLeadingChars(data.version,'0',2); 
		loanapp.create(data); 
		loanapp.create(data, 'loanapp_new'); 

		def log = [
			objid:    'LOG' + new UID(), 
			appid: 	  data.objid, 
			dtposted: data.dtcreated, 
			postedby: data.createdby, 
			remarks:  'NEW LOAN TRANSACTION #'+data.appno 
		];
		loanapp.create(log, 'loanapp_log'); 		

		buildSearchIndex(data); 
		buildBorrower(data);
		return data; 
	} 

	private void buildSearchIndex(data) { 
		def name = new StringBuffer(data.borrower.lastname + ', ' + data.borrower.firstname);
		if (data.borrower.middlename) name.append(' ' + data.borrower.middlename);

		data.fullborrowername = name.toString(); 
		data.dtposted = data.dtcreated;  
		data.postedby = data.createdby; 
		data.branchcode = data.branch.code; 
		data.branchname = data.branch.name; 
		loanapp.create(data, 'loanapp_search'); 

		def searchvalues = [data.appno, data.borrower.name]; 
		for (sval in searchvalues) {
			def o = [
				objid: 'IDX' + new UID(), 
				appid: data.objid, 
				searchtext: sval 
			];
			loanapp.create(o, 'loanapp_search_index'); 		
		} 
	} 

	private void buildBorrower(data) { 
		def o = borrower.findByObjid([objid: data.borrower.objid]); 
		if (o == null) { 
			borrower.create(data.borrower); 
		} else {
			o.putAll(data.borrower); 
			borrower.update(o); 
		}
		
		o = [
			objid: 		  'LB' + new UID(), 
			parentid: 	  data.objid, 
			borrowerid:   data.borrower.objid, 
			borrowername: data.borrower.name, 
			principalid:  data.borrower.objid,
			type:         'PRINCIPAL' 
		];
		loanapp_borrower.create(o); 
	}	

	private String addLeadingChars(value, schar, length) {
		def buffer = new StringBuffer();
		def sval = (value == null? "": value.toString()); 
		def len = length-sval.length();
		for (int i=0; i<len; i++) {
			buffer.append(schar); 
		} 
		buffer.append(sval);
		return buffer.toString(); 
	} 
}
