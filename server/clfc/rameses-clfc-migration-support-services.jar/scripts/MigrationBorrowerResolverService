import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class MigrationBorrowerResolverService extends ActiveCrudListService
{
	@ActiveDB(em="migration", value="borrowerresolver")
	def em;

	@ActiveDB(em="migration", value="loanresolver")
	def loanresolver;

	@ActiveDB(em="migration", value="borrower_merge")
	def borrower_merge;

	@Env
	def env;

	@Service("DateService")
	def dateSvc;

	@Service("LoanTypeService")
	def loanTypeSvc;

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];
		cols << [name: 'borrowername', caption: 'Borrower'];
		cols << [name: 'address', caption: 'Address'];
		cols << [name: 'objid', caption: "ID"];
		if (!params.state) cols << [name: 'state', caption: 'Status'];
		
		return cols;
	}

	@ProxyMethod
	public def getStates() {
		return [
			[caption: 'ALS', state: 'ALS'],
			[caption: 'Unresolved', state: 'UNRESOLVED'],
			[caption: 'Resolved', state: 'RESOLVED'],
			[caption: 'All']
		];
	}

	private void trimFields( data ) {
		if (data.objid) data.objid = data.objid.trim();
		if (data.borrowename) data.borrowername = data.borrowername.trim();
		if (data.address) data.address = data.address.trim();
	}

	private void validate( data ) {
		if (data.type == 'INDIVIDUAL') {
			if (!data.gender) throw new Exception("Please specify gender.");
		}
	}

	void beforeCreate( data ) {
		trimFields(data);
	}

	void beforeUpdate( data ) {
		trimFields(data);
	}

	void afterCreate( data ) {
		updateInfo(data);
	} 

	void afterUpdate( data ) {
		updateInfo(data);
	}

	private void updateInfo( data ) {
		def ext = em.read(data, 'ext-info');
		if (!ext) {
			if (data.type=='INDIVIDUAL') {
				em.create(data, 'ext-info-individual');
			} else if (data.type=='JURIDICAL') {
				em.create(data, 'ext-info-juridical');
			}
		} else {
			if (data.type=='INDIVIDUAL') {
				em.update(data, 'ext-info-individual');
			} else if (data.type=='JURIDICAL') {
				em.update(data, 'ext-info-juridical');
			}
		}
		data.isedited = true;
	}

	void afterOpen( data ) {
		data.isedited = false;
		def r = em.read(data, 'ext-info');
		if (r) {
			data.putAll(r);
			data.isedited = true;
		}

		data.isresolved = false;
		r = em.read(data, 'resolved');
		if (r) {
			data.isresolved = true;
		}

		if (!data.name) {
			if (data.type == 'INDIVIDUAL') {
				data.name = data.lastname + ', ' + data.firstname;
				if (data.middlename) data.name += ' ' + data.middlename;
			} else if (data.type == 'JURIDICAL') {
				data.name = data.companyname;
			}
		}
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : '') + '%';

		def lm;
		switch (params.state) {
			case 'RESOLVED'		: lm = 'getResolvedList'; break;
			case 'UNRESOLVED' 	: lm = 'getUnresolvedList'; break;
			case 'ALS' 			: lm = 'getALSList'; break;
		}
		if (lm) params._listMethod = lm;
	}

	@ProxyMethod
	public def getCivilStatusTypes() {
		return [
            [key:'SINGLE', value:'SINGLE'], 
            [key:'MARRIED', value:'MARRIED'], 
            [key:'COUPLE', value:'COUPLE'], 
            [key:'WIDOW', value:'WIDOW/WIDOWER'], 
            [key:'SEPARATED', value:'SEPARATED']
		]
	}

	@ProxyMethod
	public def getGenderList() {
		return [
			[key: 'M', value: 'Male'],
			[key: 'F', value: 'Female']
		];
	}

	@ProxyMethod
	public def resolve( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Migration borrower record does not exist or has already been deleted.");

		def ext = em.read(data, 'ext-info');
		if (!ext) throw new Exception("Info for this borrower has not yet been resolved.");

		def r = em.read(data, 'resolved');
		if (r) throw new Exception("Borrower has already been resolved.");

		em.create(data, 'resolved');

		return open(data);
	}

	@ProxyMethod
	public def resolveAll( params ) {
		def list = params.list;
		if (!list) list = em.getUnresolvedList([searchtext: '%']);
		def item;
		list.each{ o->
			item = em.read(o, 'ext-info');
			if (item) {
				item = em.read(o, 'resolved');
				if (!item) em.create(o, 'resolved');
			}
		}
	}

	@ProxyMethod
	public def submitForApproval( params ) {
		if (!params.list) throw new Exception("Please specify list.");

		def item = [
			objid 		: 'BM' + new UID(),
			state 		: 'FOR_APPROVAL',
			dtcreated 	: dateSvc.serverDate,
			author		: [objid: env.USERID, name: env.NAME]
		];
		borrower_merge.create(item);

		def xdetail;
		params.list.each{ o->
			xdetail = [
				objid	: 'BMD' + new UID(),
				parentid: item.objid,
				borrower: [objid: o.objid, name: o.borrowername]
			];
			borrower_merge.create(xdetail, 'detail');
		}
		return item;
	}
}