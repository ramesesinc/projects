import com.rameses.common.*;
import com.rameses.annotations.*;

class CancelLoanService
{
	@Env
	def env;

	@ActiveDB('cancel_loanapp')
	def em;

	@ActiveDB('loanapp')
	def loanapp;

	@ActiveDB('loan_ledger')
	def loan_ledger;

	@ActiveDB('loan_route')
	def loan_route;

	@ActiveDB('borrower')
	def borrower;

	@Service('DateService')
	def dateSvc;

	@ProxyMethod
	public def cancelLoan( params ) {
		if (!params.objid) throw new Exception('Please specify objid.');
		def appid = params.objid;

		def data = loanapp.read([objid: appid]);
		if (!data) throw new Exception('Loanapp record does not exist or has already been deleted.');

		def currentdate = dateSvc.serverDate;
		def user = [objid: env.USERID, name: env.NAME];

		def ledger = loan_ledger.findByAppId([appid: appid]);
		if (ledger) {
			data.dtmatured = ledger.dtmatured;
			ledger.state = 'CLOSE';
			loan_ledger.update(ledger);
			/*
			em.removeSegregationByLedgerid([ledgerid: ledger.objid]);
			loan_ledger.delete(ledger);
			*/
		}

		def list = em.getSearchIndexByAppid([appid: appid]);
		list?.each{ o->
			//println 'si ' + o;
			loanapp.delete(o, 'loanapp_search_index');
		}

		def i = loanapp.read([objid: appid], 'loanapp_search');
		if (i) {
			loanapp.delete(i, 'loanapp_search');
		}

		i = loanapp.read([objid: appid], 'loanapp_capture_open');
		if (i) {
			loanapp.delete(i, 'loanapp_capture_open');
		}

		data.appno = 'CO-' +  data.appno;
		data.state = 'CANCELLED_OUT';
		loanapp.update(data);

		i = loanapp.read([objid: appid], 'loanapp_close');
		if (!i) {
			i = [
				objid	: appid,
				dtclosed: currentdate,
				closedby: user,
				remarks	: 'Cancelled out'
			];
			loanapp.create(i, 'loanapp_close');
		}

		/*
		i = loanapp.read([objid: appid], 'loanapp_capture');
		if (i) {
			data.dtreleased = i.dtreleased;
			loanapp.delete(i, 'loanapp_capture');
		}
		*/

		//loanapp.delete([objid: appid]);

		data.dtcancelled = currentdate;//dateSvc.serverDate;
		data.cancelledby = user;//[objid: env.USERID, name: env.NAME];
		em.create(data);

		return data;
	}

	@ProxyMethod
	public def openLoan( params ) {
		def data = loanapp.read([objid: params.objid]);
		if (!data) throw new Exception('Loan application record does not exist or has already been deleted.');

		def appc = loanapp.read([objid: data.objid], 'loanapp_capture');
		if (appc) {
			data.dtreleased = appc.dtreleased;
		}

		def ledger = loan_ledger.findByAppId([appid: data.objid]);
		if (ledger) {
			data.dtmatured = ledger.dtmatured;
		}

		def r = loan_route.read([code: data.route.code]);
		if (r) {
			r.name = r.description + ' '  + r.area;
			data.route = r;
		}

		def b = borrower.read([objid: data.borrower.objid]);
		if (b) {
			data.borrower.address = b.address;
		}

		return data;
	}

}