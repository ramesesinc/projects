import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class CloseLoanService extends ActiveCrudListService
{
	@Env
	def env;

	@ActiveDB("close_loanapp")
	def em;

	@ActiveDB("close_ledger")
	def close_ledger;

	@ActiveDB("datatxnlog")
	def txnlog;

	@ActiveDB("loan_ledger")
	def loan_ledger;

	@ActiveDB("loanapp")
	def loanapp;

	@Service("DateService")
	def dateSvc;

	@Service("InboxService")
	def inboxSvc;

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];
		if (!params.state) cols << [name: 'txnstate', caption: 'Status'];

		cols << [name: 'txndate', caption: 'DateRequested', type: 'date', outputFormat: 'MMM-dd-yyyy'];
		cols << [name: 'author.name', caption: 'RequestedBy'];

		if (params.state == 'APPROVED') {
			cols << [name: 'dtposted', caption: 'DateApproved', type: 'date', outputFormat: 'MMM-dd-yyyy'];
			cols << [name: 'poster.name', caption: 'ApprovedBy'];
		} else if (params.state == 'DISAPPROVED') {
			cols << [name: 'dtposted', caption: 'DateDisapproved', type: 'date', outputFormat: 'MMM-dd-yyyy'];
			cols << [name: 'poster.name', caption: 'DisapprovedBy'];
		}

		return cols;
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : '') + '%';
		if (params.state) {
			params._listMethod = 'getListByState';
		}
	}

	@ProxyMethod
	public def getStates() {
		return [
			[caption: 'All'],
			[caption: 'DRAFT', state: 'DRAFT'],
			[caption: 'FOR APPROVAL', state: 'FOR_APPROVAL'],
			[caption: 'APPROVED', state: 'APPROVED'],
			[caption: 'DISAPPROVED', state: 'DISAPPROVED']
		];
	}

	private void validate( data ) {
		if (!data.items) throw new Exception("At least 1 loan to close is required.");
	}

	void beforeCreate( data ) {
		validate(data);
		data.dtcreated = dateSvc.serverDate;
		data.author = [objid: env.USERID, name: env.NAME];
		data.txndate = data.dtcreated;
		if (!data.txnstate) data.txnstate = 'DRAFT';
	}

	void beforeUpdate( data ) {
		validate(data);
	}

	void afterCreate( data ) {
		updateInfo(data);
	}

	void afterUpdate( data ) {
		updateInfo(data);
	}

	private void updateInfo( data ) {
		data._removed.each{ o->
			em.delete(o, 'detail');
		}

		data._added.each{ o->
			em.create(o, 'detail');
		}

		data.items.each{ o->
			if (o._edited == true) em.update(o, 'detail');
		}
	}

	void afterOpen( data ) {
		data.items = em.getItems(data);
	}

	@ProxyMethod
	public def submitForApproval( params ) {
		def data = changeState(params, 'FOR_APPROVAL');

		def msginfo = [ 
			objid 		: data.objid, 
			dtcreated	: dateSvc.serverDate, 
			refid 		: data.objid, 
			filetype 	: 'closeloanapp', 
			message 	: 'For approval Loan App. close request by ' + data.author.name, 
			senderid	: env.USERID, 
			sendername 	: env.NAME, 
			recipientid : 'BRANCH_MANAGER' 
		]; 
		inboxSvc.addMessage( msginfo );

		msginfo.objid += 1;
		msginfo.recipientid = 'ASST_BRANCH_MANAGER';
		inboxSvc.addMessage( msginfo );

		return data;
	}

	private def changeState( params, state ) {
		def data = em.read(params);
		if (!data) throw new Exception("Close loanapp request record does not exist or has already been deleted.");

		if (data.txnstate == state) {
			throw new Exception("Close loanapp request record already ${state}.");
		}

		data.txnstate = state;
		em.changeState(data);

		def message;
		switch (state) {
			case 'FOR_APPROVAL'	: message = 'For approval Loan App. close request by '+ data.author.name; break;
			case 'APPROVED'    	: message = 'Approved Loan App. close request by ' + data.author.name; break;
			case 'DISAPPROVED' 	: message = 'Disapproved Loan App. close request by ' + data.author.name; break;
		}

		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : dateSvc.serverDate, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: state, 
			remarks : message
		]; 
		txnlog.create( loginfo );

		return open(data);
	}

	@ProxyMethod
	public def approveDocument( params ) {
		def data = approveImpl(params, 'APPROVED');

		if (!data.items) data.items = em.getItems(data);

		def item = [
			dtclosed 	: data.dtposted,
			remarks 	: data.remarks
		];
		def ledger, xitem;
		data.items.each{ o->
			ledger = loan_ledger.findByAppId([appid: o.loanapp.objid]);
			if (ledger) {
				xitem = close_ledger.read([objid: ledger.objid]);
				if (!xitem) {
					item.objid = ledger.objid;
					item.closedby = data.poster.name;
					close_ledger.create(item);
				}
				ledger.state = 'CLOSE';
				loan_ledger.changeState(ledger);
			}

			xitem = loanapp.read([objid: o.loanapp.objid], 'loanapp_close');
			if (!xitem) {
				item.objid = o.loanapp.objid;
				item.closedby = data.poster;
				loanapp.create(item, 'loanapp_close');
			}

			loanapp.update([objid: o.loanapp.objid, state: 'CLOSED']);
			xitem = loanapp.read([objid: o.loanapp.objid], 'loanapp_search');
			if (xitem) {
				xitem.state = 'CLOSED';
				loanapp.update(xitem, 'loanapp_search');
			}
		}

		return data;
	}

	@ProxyMethod
	public def disapprove( params ) {
		return approveImpl(params, 'DISAPPROVED');
	}

	private def approveImpl( params, state ) {
		def data = changeState(params, state);

		data.dtposted = dateSvc.serverDate;
		data.poster = [objid: env.USERID, name: env.NAME];
		em.update(data, 'post');

		inboxSvc.removeMessageByRefid([refid: data.objid]); 

		return open(data);
	}
}