import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;

class DeleteLedgerProceedsService extends ActiveCrudListService
{
	@ActiveDB("delete_ledger_proceed")
	def em;

	@ActiveDB("loan_ledger_proceeds")
	def ledger_proceeds;

	@ActiveDB("loan_ledger")
	def loan_ledger;

	@Service("DateService")
	def dateSvc;

	@Env
	def env;

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];
		if (!params.state) cols << [name: 'state', caption: 'Status'];

		cols << [name: 'loanapp.appno', caption: 'AppNo'];
		cols << [name: 'borrower.name', caption: 'Borrower'];
		cols << [name: 'refno', caption: 'RefNo'];
		cols << [name: 'amount', caption: 'Amount'];

		if (params.state=='APPROVED') {
			cols << [name: 'dtposted', caption: 'DateApproved', type: 'date', outputFormat: 'MMM-dd-yyyy'];
			cols << [name: 'poster_name', caption: 'ApprovedBy'];
		}
		if (params.state=='DISAPPROVED') {
			cols << [name: 'dtposted', caption: 'DateDisapproved', type: 'date', outputFormat: 'MMM-dd-yyyy'];
			cols << [name: 'poster_name', caption: 'DisapprovedBy'];
		}
		return cols;
	}

	void beforeCreate( data ) {
		data.dtfiled = dateSvc.serverDate;
		data.author = [objid: env.USERID, name: env.NAME];
		if (!data.state) data.state = 'DRAFT';
	}

	@ProxyMethod
	public def getStates() {
		return [
			[caption: 'All'],
			[caption: 'DRAFT', state: 'DRAFT'],
			[caption: 'FOR APPROVAL', state: 'FOR_APPROVAL'],
			[caption: 'APPROVED', state: 'APPROVED'],
			[caption: 'DISAPPROVED', state: 'DISAPPROVED'],
		]
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : '') + '%';
		if (params.state) {
			params._listMethod = 'getListByState';
		}
	}

	@ProxyMethod
	public def submitForApproval( params ) {
		return changeState(params, 'FOR_APPROVAL');
	}

	private def changeState( params, state ) {
		def data = em.read(params);
		if (!data) throw new Exception("Record does not exist or has already been deleted.");

		if (data.state == state) {
			throw new Exception("Record already " + state + ".");
		}

		data.state = state;
		em.changeState(data);

		return open(data);
	}


	private def approveImpl( params, state ) {
		def data = changeState(params, state);

		data.dtposted = dateSvc.serverDate;
		data.poster = [objid: env.USERID, name: env.NAME];
		em.update(data, 'post');

		return open(data);
	}

	@ProxyMethod
	public def approveDocument( params ) {
		def data = approveImpl(params, 'APPROVED');

		def p = ledger_proceeds.read([objid: data.proceeds.objid]);
		if (p) {
			ledger_proceeds.delete(p);
			loan_ledger.delete([objid: p.refid], 'payment');
		}

		return data;
	}

	@ProxyMethod
	public def disapprove( params ) {
		return approveImpl(params, 'DISAPPROVED');
	}

}