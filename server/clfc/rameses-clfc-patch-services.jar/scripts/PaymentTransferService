import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class PaymentTransferService
{
	@Env
	def env;

	@ActiveDB("payment_transfer")
	def em;

	@ActiveDB("loan_ledger")
	def loan_ledger;

	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public void transfer( params ) {
		if (!params.current) throw new Exception("Please specify current ledger.");
		if (!params.receiving) throw new Exception("Please specify receiving ledger.");
		if (!params.payments) throw new Exception('Please specify payments to transfer.');

		def list = params.remove('payments');
		def item;
		list?.each{ o->
			item = loan_ledger.read(o, 'payment');
			if (item) {
				item.parentid = params.receiving.objid;
				loan_ledger.update(item, 'payment');
			}
		}

		/*
		def m = [
			objid 	: params.current.objid,
			fromdate: params.fromdate,
			todate 	: params.todate
		];
		def list = em.getPaymentsByParentidBetweenFromdateAndTodate(m);
		def item;
		list.each{ o->
			item = loan_ledger.read(o, 'payment');
			if (item) {
				item.parentid = params.receiving.objid;
				loan_ledger.update(item, 'payment');
			}
		}
		*/

		item = [
			objid		: 'PT' + new UID(),
			dtfiled 	: dateSvc.serverDate,
			author		: [objid: env.USERID, name: env.NAME],
			ledgerid 	: params.receiving.objid,
			prevledgerid: params.current.objid,
			fromdate 	: params.fromdate,
			todate 		: params.todate,
			remarks 	: params.remarks
		];
		em.create(item);
	}

	@ProxyMethod
	public def getPayments( params ) {
		if (!params.ledgerid) throw new Exception('Please specify ledgerid.');
		if (!params.fromdate) throw new Exception('Please specify fromdate.');
		if (!params.todate) throw new Exception('Please specify todate.');

		def m = [objid: params.ledgerid, fromdate: params.fromdate, todate: params.todate];

		def list = em.getPaymentsByParentidBetweenFromdateAndTodate(m);
		def xlist = [], item;
		list?.each{ o->
			item = loan_ledger.read(o, 'payment');
			if (item) {
				xlist << item;
			}
		}
		return xlist;

	}
}
