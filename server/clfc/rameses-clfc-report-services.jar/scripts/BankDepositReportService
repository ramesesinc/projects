import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.text.SimpleDateFormat;

class BankDepositReportService
{
	
	@Env
	def env;

	@ActiveDB("deposit")
	def em;

	@ActiveDB("user")
	def user;

	@ActiveDB("teller")
	def teller;

	@Service("DateService")
	def dateSvc;

	@Service("BranchService")
	def branchSvc;

	@ProxyMethod
	public def getReportDataByDepositid( params ) {
		def item = em.read(params);

		def rep = teller.read(item.representative1);
		def representative1;
		if (rep) representative1 = rep.firstname + " " + rep.lastname;

		rep = teller.read(item.representative2);
		def representative2;
		if (rep) representative2 = rep.firstname + ' ' + rep.lastname;

		rep = user.read(item.author);
		def preparedby;
		if (rep) preparedby = rep.firstname + " " + rep.lastname;

		def items = em.getReportDataByDepositid([depositid: item.objid]);
		items?.each{ o->			
			o.cbs = em.getDepositSlipCBSReportDataByDepositSlipid([depositslipid: o.objid]);
			o.hascbs = (o.cbs? true : false);

			o.checks = em.getDepositSlipCheckReportDataByDepositSlipid([depositslipid: o.objid]);
			o.haschecks = (o.checks? true : false);
		}
		/*
		def xitems = em.getReportDataByDepositid([depositid: item.objid]);;
		def items = xitems.findAll{ it.isencashed==0 }
		def prevslipno;
		items.each{ o->
			o.prevslipno = prevslipno;
			prevslipno = o.slipno;
		}
		*/
		def dateTimeFormat = new SimpleDateFormat("MMM-dd-yyyy hh:mm:ss a");
		def branch = branchSvc.open([:]);
		def data = [
			date_period 		: new SimpleDateFormat("yyyy-MMM-dd").format(item.txndate),
			dtprinted			: dateTimeFormat.format(dateSvc.serverDate),
			printedby 			: env.NAME,
			representative1_name: representative1,
			representative2_name: representative2,
			preparedby_name		: preparedby,
			items				: items
		];
		branch.each{ k, v->
			data["branch_"+k] = v;
		}

		//println 'data ' + data;
		return data;
	}

}
