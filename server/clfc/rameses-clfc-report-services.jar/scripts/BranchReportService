import com.rameses.common.*;
import com.rameses.annotations.*;
import java.text.SimpleDateFormat;
import java.rmi.server.UID;

class BranchReportService
{
	@Env
	def env;

	@PersistenceContext("main")
	def em;

	@ActiveDB("branch_report_criteria")
	def report_criteria;

	@ActiveDB("branch_report_generated")
	def report_generated;

	@ActiveDB("branch_report_type")
	def report_type;

	@ActiveDB("branch_report")
	def report;

	@Service("DateService")
	def dateSvc;

	@Service("BranchService")
	def branchSvc;

	@ProxyMethod
	public def getCriteria() {
		return report_criteria.getList([searchtext: '%']);
	}

	private void validate( params ) {
		def sd = parseDate(params.startdate);
		def ed = parseDate(params.enddate);

		if (sd.compareTo(ed) > 0) {
			throw new Exception("Start date must not be greater than end date.");
		}
	}

	@ProxyMethod
	public def getReportData( params ) {
		if (!params.startdate) throw new Exception("Please specify start date.");
		if (!params.enddate) throw new Exception("Please specify end date.");
		validate(params);

		def df = new SimpleDateFormat("MMM-dd-yyyy");

		def typelist = report_type.getList([searchtext: '%']);
		def list = [], xitem;
		if (!params.criteria) {
			def xlist2, itm;
			typelist.each{ o->
				xitem = [reporttype: o.code];
				itm = report_type.read([code: o.code]);
				if (itm) {
					xlist2 = em.sqlContext.createQuery(itm.sqlquery).resultList;
					xitem.list = xlist2;
					list.add(xitem);
				}
			}
		} else {
			def criteria = report_criteria.read([code: params.criteria]);
			if (!criteria) throw new Exception("Report criteria record does not exist or has already been deleted.");

			def itm, xlist2, sql;
			typelist.each{ o->
				xitem = [reporttype: o.code];
				itm = report_type.read([code: o.code]);
				if (itm && itm.criteria) {
					itm.criteria.each{ c->
						if (c.criteria.code == criteria.code && c.sqlquery) {
							xlist2 = em.sqlContext.createQuery(c.sqlquery).resultList;							
							xitem.list = xlist2;//xlist2.each{ println it }
							list.add(xitem);
						}
					}
				}
			}
		}

		def currdate = dateSvc.serverDate;
		def txndate = new SimpleDateFormat("yyyy-MM-dd").format(currdate);
		def user = [objid: env.USERID, name: env.NAME];
		def rpt;
		list.each{ o->
			rpt = [
				objid		: 'BR' + new UID(),
				dtcreated 	: currdate,
				author 		: user,
				txndate 	: txndate,
				reporttype 	: o.reporttype,
				criteria 	: params.criteria,
				value 		: o.list
			];
			report.create(rpt);
		}

		def sd = df.format(parseDate(params.startdate));
		def ed = df.format(parseDate(params.enddate));

		def xlist2;
		if (params.criteria) {
			xlist2 = report.getListByStartDateAndEndDateWithCriteria(params);
		} else {
			xlist2 = report.getListByStartDateAndEndDateWithoutCriteria(params);
		}

		list = [];
		typelist.each{ o->
			
		}

		if (!list) {
			throw new Exception("No expiries from " + sd + " TO " + ed + ".");
		}

		def branch = branchSvc.open([:]);
		def data = [
			date_period 		: sd + " TO " + ed,//new SimpleDateFormat("yyyy-MMM-dd").format(java.sql.Date.valueOf(params.txndate+"")),
			dtprinted			: new SimpleDateFormat("MMM-dd-yyyy hh:mm:ss a").format(currdate),
			printedby 			: env.NAME,
			items				: []//list
		];
		branch.each{ k, v->
			data["branch_"+k] = v;
		}

		def item = [
			objid		: 'RG' + new UID(),
			dtcreated 	: data.dtprinted,
			author		: [objid: env.USERID, name: env.NAME],
			reporttype	: 'BRANCHREPORT',
			reportdata 	: data
		];
		report_generated.create(item);


		return data;
	}

	private def parseDate( date ) {
		if (!date) return null;
		if (date instanceof Date) {
			return date;
		} else {
			return java.sql.Date.valueOf(date);
		}
	}

} 