import com.rameses.common.*;
import com.rameses.annotations.*;
import java.text.SimpleDateFormat;

class CollectionNACReportService
{
	@Env
	def env;

	@ActiveDB('collection_report')
	def em;

	@ActiveDB('usergroupmember')
	def usermember; 

	@Service('DateService')
	def dateSvc;

	@Service('BranchService')
	def branchSvc;

	@ProxyMethod
	public def getReportData( params ) {
		def df = new SimpleDateFormat("yyyy-MMM-dd");

		def startdate = df.format(parseDate(params.startdate));
		def enddate = df.format(parseDate(params.enddate));
		if (startdate.compareTo(enddate) < 0) {
			throw new Exception("Start Date must not be greater than End Date.");
		}

		params.filter = "WHERE r.state = 'POSTED' AND r.txndate BETWEEN '${params.startdate}' AND '${params.enddate}'";
		def filter = startdate + " TO " + enddate;
		if (params.route) {
			filter += "\nRoute: " + params.route.description;
			params.filter += " AND ";
			if (params.route.type == 'route') {
				params.filter += " r.group_objid = '${params.route.objid}'"
			} else {
				params.filter += " r.group_type = '${params.route.type}'"
			}
		}
		if (params.collector) {
			filter += "\nCollector: " + params.collector.name;
			params.filter += " AND r.collector_objid = '${params.collector.objid}'";
		}
		def xlist = em.getReportData(params);
		if (!xlist) throw new Exception("No collections from " + startdate + " TO " + enddate + ".");

		def item, type;
		xlist?.each{ o->
			item = em.findTotalAccountsCollected([objid: o.objid]);
			if (item) {
				o.acctcollected = item.count;
			}

			item = em.findTotalAmountCollected([objid: o.objid]);
			if (item) {
				o.totalamountcollected = item.totalamount;
			}

			type = o.group?.type;
			if (type) {
				switch (type) {
					case 'route'	: item = em.findToBeCollectedForRouteType([objid: o.objid]); break;
					case 'online'	: item = em.findToBeCollectedForOnlineType([objid: o.objid]); break;
					case 'followup'	: item = em.findToBeCollectedForFollowupAndSpecialType([objid: o.objid]); break;
					case 'special'	: item = em.findToBeCollectedForFollowupAndSpecialType([objid: o.objid]); break;
				}
				if (item) {
					o.accttobecollected = item.count;
					o.totalamountobecollected = item.totalamount;
				}
			}
			o.description = o.description?.toUpperCase();
		}

		def list = [];
		xlist.each{ o->
			def i = list.find{ o.txndate == it.txndate}
			if (!i) {
				i = [txndate: o.txndate];
				list.add(i);
			}
		}
		list.unique{ it.txndate }
		list.sort{ it.txndate }

		def mlist, totaltobecollected = 0, totalcollected = 0;
		list?.each{ o->
			mlist = [];
			mlist.addAll(xlist.findAll{ o.txndate == it.txndate });

			if (mlist) {
				mlist?.sort{ it.description + it.dtfiled }
				def amt = mlist?.totalamountobecollected?.sum();
				if (!amt) amt = 0;
				totaltobecollected += amt;

				amt = mlist?.totalamountcollected?.sum();
				if (!amt) amt = 0;
				totalcollected += amt;

				o.list = mlist;
			}
		}

		def df2 = new SimpleDateFormat("yyyy-MM-dd hh:mm a");
		def branch = branchSvc.open([:]);
		def data = [
			filter 				: filter,
			//date_period : date,
			dtprinted			: df2.format(dateSvc.serverDate),
			printedby 			: env.NAME,
			items				: list,
			totaltobecollected 	: totaltobecollected,
			totalcollected 		: totalcollected
		];
		branch.each{ k, v->
			data["branch_"+k] = v;
		}
		return data;
	}

	private def parseDate( date ) {
		def dt;
		if (date instanceof Date) {
			dt = date;
		} else {
			dt = java.sql.Date.valueOf(date);
		}
		return dt;
	}

	@ProxyMethod
	public def getRoutes( params ) {
		params.searchtext = (params.searchtext? param.searchtext : '') + '%';
		def currdate = dateSvc.getServerDateAsString().split(" ")[0];
		if (!params.startdate) params.startdate = currdate;
		if (!params.enddate) params.enddate = currdate;

		def list = [];
		def xlist = em.getListByStartdateAndEnddate(params);
		def route = xlist.findAll{ it.group.type == 'route' }
		route.unique{ it.group.objid }
		def item;
		route.each{ o->
			item = o.group;
			item.description = o.description;
			list.add(item);
		}

		def nonroute = xlist.findAll{ it.group.type != 'route' }
		nonroute.unique{ it.group.type }
		nonroute.each{ o->
			item = o.group;
			item.description = item.type.toUpperCase();
			if (item.type == 'online') {
				item.description = 'DIRECT';
			}
			list.add(item);
		}

		list.sort{ it.description }

		return list;
	}

	@ProxyMethod
	public def getCollectors( params ) {
		params.searchtext = (params.searchtext? params.searchtext: '')+'%'; 
		params.roles = "'CASHIER','FIELD_COLLECTOR'";
		return usermember.getMembersByRole( params );
	}
}