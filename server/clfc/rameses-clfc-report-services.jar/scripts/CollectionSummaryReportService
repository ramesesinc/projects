import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.text.SimpleDateFormat;

class CollectionSummaryReportService
{	
	@Env
	def env;

	@ActiveDB(value="collection_remittance")
	def em;

	@ActiveDB(value="loan_route")
	def loan_route;

	@Service("DateService")
	def dateSvc;

	@Service("BranchService")
	def branchSvc;

	def dateFormat = new SimpleDateFormat('yyyy-MMM-dd');

	@ProxyMethod
	public def getReportData( params ) {
		//def startdate = new SimpleDateFormat("yyyy-MMM-dd").format(java.sql.Date.valueOf(params.startdate+""));
		//def enddate = new SimpleDateFormat("yyyy-MMM-dd").format(java.sql.Date.valueOf(params.enddate+""))

		def startdate = dateFormat.format(parseDate(params.startdate));
		def enddate = dateFormat.format(parseDate(params.enddate));
		def list = em.getPostedCollectionsByStartdateAndEnddate(params);
		if (!list) throw new Exception("No collections from " + startdate + " TO " + enddate + ".");
		list.each{ o->
			//o.date = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a").format(o.txndate);
			o.series = o.startseries.toString().padLeft(6, "0") + " - " + o.endseries.toString().padLeft(6, "0");
		}

		def branch = branchSvc.open([:]);
		def data = [
			date_period : startdate + " TO " + enddate,
			dtprinted	: new SimpleDateFormat("MMM-dd-yyyy hh:mm:ss a").format(dateSvc.serverDate),
			printedby 	: env.NAME,
			items		: list
		];
		branch.each{ k, v->
			data["branch_"+k] = v;
		}
		return data;
	}

	def parseDate( date ) {
		if (!date) return null;

		if (date instanceof Date) {
			return date;
		} else {
			return java.sql.Date.valueOf(date);
		}
	}

	@ProxyMethod
	public def getRoutes( params ) {

	}
}