import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.text.SimpleDateFormat;

class DailyCollectionReportService
{	
	@Env
	def env;

	@ActiveDB("collection_remittance")
	def em;

	@ActiveDB("loan_route")
	def loan_route;

	@ActiveDB('usergroupmember')
	def usermember; 

	@Service("DateService")
	def dateSvc;

	@Service("BranchService")
	def branchSvc;

	@ProxyMethod
	public def getReportData( params ) {
		if (params.enddate?.toString().compareTo(params.startdate?.toString()) < 0)
			throw new Exception("Start Date must not be greater than End Date.");

		def df = new SimpleDateFormat("yyyy-MMM-dd");
		//def date = new SimpleDateFormat("yyyy-MMM-dd").format(java.sql.Date.valueOf(params.txndate+""))
		def startdate = df.format(parseDate(params.startdate));
		def enddate = df.format(parseDate(params.enddate));
		params.filter = "WHERE r.state = 'POSTED' AND r.txndate BETWEEN '${params.startdate}' AND '${params.enddate}'";
		def filter = startdate + " TO " + enddate;
		if (params.route) {
			filter += "\nRoute: " + params.route.description;
			params.filter += " AND ";
			if (params.route.type == 'route') {
				params.filter += " r.group_objid = '${params.route.objid}'"
			} else {
				params.filter += " r.group_type = '${params.route.type}'"
			}
		}
		if (params.collector) {
			filter += "\nCollector: " + params.collector.name;
			params.filter += " AND r.collector_objid = '${params.collector.objid}'";
		}
		if (params.client) {
			filter += "\nClient: " + params.client.name;
			params.filter += " AND d.borrower_objid = '${params.client.objid}'";
		}
		if (params.paymentmethod) {
			filter += "\nPayment: " + params.paymentmethod.caption;
			params.filter += " AND l.paymentmethod = '${params.paymentmethod.value}'";
		}
		if (params.refno) {
			filter += "\nRefNo.: " + params.refno;
			params.filter += " AND d.refno = '${params.refno}'";
		}
		params.filter += " GROUP BY r.objid";

		def xlist = em.getReportData(params);
		if (!xlist) throw new Exception("No collections from " + startdate + " TO " + enddate + ".");

		def list = [];
		xlist.each{ o->
			def i = list.find{ o.txndate == it.txndate}
			if (!i) {
				i = [txndate: o.txndate];
				list.add(i);
			}
		}
		list.unique{ it.txndate }
		list.sort{ it.txndate }
		def mlist, mlist2, prm = [filter: ''];
		def df2 = new SimpleDateFormat("yyyy-MM-dd hh:mm a");
		list.each{ o->
			mlist = [];
			mlist.addAll(xlist.findAll{ o.txndate == it.txndate && it.group.type == 'route' });
			//o.list = [];
			o.routes = [];
			mlist.unique{ it.group.objid }
			mlist.each{ i->
				def f = o.routes.find{ it.objid == i.group.objid }
				if (!f) {
					f = i.group;
					f.description = i.description.toUpperCase();
					f.list = [];
					o.routes << f;
				}
				prm.filter = "WHERE c.group_objid = '${i.group.objid}' AND c.txndate = '${o.txndate}'";
				//prm.filter = " WHERE d.parentid = '${i.objid}'";
				if (params.client) prm.filter += " AND d.borrower_objid = '${params.client.objid}'";
				if (params.paymentmethod) prm.filter += " AND l.paymentmethod = '${params.paymentmethod.value}'";
				if (params.refno) prm.filter += " AND d.refno = '${params.refno}'";
				//prm.filter += " ORDER BY d.refno";
				prm.filter += " ORDER BY d.dtpaid, d.loanapp_appno";
				//println 'filter ' + prm.filter;
				mlist2 = em.getReportDataDetail(prm);
				def xitem;
				mlist2.each{ u->
					u.txndate = o.txndate;
					u.description = f.description;
					u.date = df2.format(u.dtpaid);
					xitem = [:];
					xitem.putAll(u);
					u.item = xitem;
					f.list << u;
				}
				//o.list.addAll();
			}
			mlist = [];
			mlist.addAll(xlist.findAll{ o.txndate == it.txndate && it.group.type != 'route' });
			mlist.unique{ it.group.type }
			mlist.each{ i->
				def f = o.routes.find{ it.type == i.group.type }
				if (!f) {
					f = i.group;
					f.description = i.description.toUpperCase();
					f.list = [];
					o.routes << f;
				}
				prm.filter = "WHERE c.group_type = '${i.group.type}' AND c.txndate = '${o.txndate}'";
				if (params.client) prm.filter += " AND d.borrower_objid = '${params.client.objid}'";
				if (params.paymentmethod) prm.filter += " AND l.paymentmethod = '${params.paymentmethod.value}'";
				if (params.refno) prm.filter += " AND d.refno = '${params.refno}'";
				//prm.filter += " ORDER BY d.refno";
				prm.filter += " ORDER BY d.dtpaid, d.loanapp_appno";
				//println 'filter ' + prm.filter;
				mlist2 = em.getReportDataDetail(prm);
				def xitem;
				mlist2.each{ u->
					u.txndate = o.txndate;
					u.description = f.description;
					u.date = df2.format(u.dtpaid);
					xitem = [:];
					xitem.putAll(u);
					u.item = xitem;
					f.list << u;
				}
			}
			o.routes.sort{ it.description }
			//o.routes.each{ r->
				//mlist = r.list;
				//r.list.sort{ it.refno }
				//r.list = mlist.sort{ it.refno }.reverse();
			//}
		}
		//list.each{ println it }
		//throw new Exception('stop');

		//list.each{ println it }
		//throw new Exception('stop');

		def branch = branchSvc.open([:]);
		def data = [
			filter 		: filter,
			//date_period : date,
			dtprinted	: df2.format(dateSvc.serverDate),
			printedby 	: env.NAME,
			items		: list
		];
		branch.each{ k, v->
			data["branch_"+k] = v;
		}
		return data;
	}

	private def parseDate( date ) {
		def dt;
		if (date instanceof Date) {
			dt = date;
		} else {
			dt = java.sql.Date.valueOf(date);
		}
		return dt;
	}


	@ProxyMethod
	public def getRoutes( params ) {
		params.searchtext = (params.searchtext? param.searchtext : '') + '%';
		def currdate = dateSvc.getServerDateAsString().split(" ")[0];
		if (!params.startdate) params.startdate = currdate;
		if (!params.enddate) params.enddate = currdate;

		def list = [];
		def xlist = em.getListByStartdateAndEnddate(params);
		def route = xlist.findAll{ it.group.type == 'route' }
		route.unique{ it.group.objid }
		def item;
		route.each{ o->
			item = o.group;
			item.description = o.description;
			list.add(item);
		}

		def nonroute = xlist.findAll{ it.group.type != 'route' }
		nonroute.unique{ it.group.type }
		nonroute.each{ o->
			item = o.group;
			item.description = item.type.toUpperCase();
			if (item.type == 'online') {
				item.description = 'DIRECT';
			}
			list.add(item);
		}

		list.sort{ it.description }

		return list;
	}

	@ProxyMethod
	public def getCollectors( params ) {
		params.searchtext = (params.searchtext? params.searchtext: '')+'%'; 
		params.roles = "'CASHIER','FIELD_COLLECTOR'";
		return usermember.getMembersByRole( params );
	}
}