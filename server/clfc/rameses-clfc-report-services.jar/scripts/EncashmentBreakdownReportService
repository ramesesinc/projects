import com.rameses.common.*;
import com.rameses.annotations.*;
import java.text.SimpleDateFormat;

class EncashmentBreakdownReportService
{		
	@Env
	def env;

	@ActiveDB("encashment")
	def em;

	@ActiveDB("loan_route")
	def loan_route;

	@Service("DateService")
	def dateSvc;

	@Service("BranchService")
	def branchSvc;

	def dateFormat = new SimpleDateFormat('yyyy-MMM-dd');

	@ProxyMethod
	public def getReportData( params ) {
		def item = em.read(params);
		if (!item) throw new Exception('Encashment record does not exist or has already been deleted.');

		def cb = em.read(item, 'encashment-cb');

		def branch = branchSvc.open([:]);
		/*
		def change = em.getChange(encashment);
		def changeamount = change? change.amount.sum() : 0;
		if (!changeamount) changeamount = 0;
		*/
		if (cb?.breakdown) {
			resolveDenomination(cb.breakdown);
		}
		def data = [
			date_period	: dateFormat.format(parseDate(item.txndate)),
			collector	: item?.author?.name,
			checkedby	: item?.poster?.name,
			cbsno 		: cb?.cbsno,
			items 		: cb?.breakdown,
			//changeamount: changeamount,
			showchange	: false
		];
		branch.each{ k, v->
			data["branch_"+k] = v;
		}
		return data;
	}

	private void resolveDenomination( breakdown ) {
		breakdown?.each{ b->
			b.denomination = new BigDecimal(b.denomination.toString()).setScale(2);
			b.qty = new BigDecimal(b.qty.toString()).setScale(0);
			b.amount = new BigDecimal(b.amount.toString()).setScale(2);
		}
	}

	private def parseDate( date ) {
		if (!date) return null;

		if (date instanceof Date) {
			return date;
		} else {
			return java.sql.Date.valueOf(date);
		}
	}
}