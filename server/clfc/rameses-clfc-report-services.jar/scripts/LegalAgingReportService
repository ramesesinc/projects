import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.UID;
import java.text.SimpleDateFormat;

class LegalAgingReportService
{
	@Env
	def env;

	@ActiveDB("legal_report")
	def em;

	@ActiveDB("user")
	def sys_user;

	@Service("DateService")
	def dateSvc;

	@Service("BranchService")
	def branchSvc;

	@ProxyMethod
	public def getCriteria( params ) {
		def list = [
			[key: 'amount', caption: 'As to Amount'],
			[key: 'account', caption: 'As to Account']
		]
		list.sort{ it.caption }
		return list;
	}

	@ProxyMethod
	public def getReportData( params ) {
		if (!params.criteria) throw new Exception("Please specify criteria.");

		def list = em.getAgingList();
		switch (params.criteria) {
			case 'amount'	: list = resolveListAsToAmount(list); break;
			case 'account'	: list = resolveListAsToAccount(list); break;
		}

		def currdate = dateSvc.serverDate;
		def user = [objid: env.USERID, name: env.NAME];

		def notedby;
		def usr = sys_user.read([objid: params.notedby?.objid]);
		if (usr) {
			notedby = [objid: usr.objid, title: usr.jobtitle];
			notedby.name = usr.lastname + ', ' + usr.firstname;
			if (usr.middlename) notedby.name += ' ' + usr.middlename;
		}

		def preparedby;
		usr = sys_user.read([objid: env.USERID]);
		if (usr) {
			preparedby = [objid: usr.objid, title: usr.jobtitle];
			preparedby.name = usr.lastname + ', ' + usr.firstname;
			if (usr.middlename) preparedby.name += ' ' + usr.middlename;
		}


		def branch = branchSvc.open([:]);
		def data = [
			date_period 	: new SimpleDateFormat("yyyy-MMM-dd").format(currdate),
			dtprinted		: new SimpleDateFormat("MMM-dd-yyyy hh:mm:ss a").format(currdate),
			printedby 		: env.NAME,
			items			: list,
			preparedby 		: preparedby,
			notedby 		: notedby
		];
		branch.each{ k, v->
			data["branch_"+k] = v;
		}

		return data;
	}

	private def resolveListAsToAccount( src ) {
		def list = [];

		if (src) {
			list.addAll(src.collect{ it.route });
			list.unique{ it.code }.sort{ it.description }

			def xlist;
			list?.each{ r->
				xlist = [];
				xlist.addAll(src.findAll{ it.route.code == r.code });
				if (xlist) {
					xlist.unique{ it.loanapp.objid }
					def d30list = xlist.findAll{ it.daysaged > 0 && it.daysaged <= 30 }
					r.d30 = 0;
					if (d30list) r.d30 = d30list.size();

					def d60list = xlist.findAll{ it.daysaged > 30 && it.daysaged <= 60 }
					r.d60 = 0;
					if (d60list) r.d60 = d60list.size();

					def d90list = xlist.findAll{ it.daysaged > 60 && it.daysaged <= 90 }
					r.d90 = 0;
					if (d90list) r.d90 = d90list.size();

					def d120list = xlist.findAll{ it.daysaged > 90 && it.daysaged <= 120 }
					r.d120 = 0;
					if (d120list) r.d120 = d120list.size();

					def overd120list = xlist.findAll{ it.daysaged > 120 }
					r.overd120 = 0;
					if (overd120list) r.overd120 = overd120list.size();

					r.totalaccounts = xlist.size();
				}
			}

			list?.sort{ it.description }
		}

		return list;
	}

	private def resolveListAsToAmount( src ) {
		def list = [];

		if (src) {
			list.addAll(src.collect{ it.route });
			list.unique{ it.code }.sort{ it.description }

			def xlist;
			list?.each{ r->
				xlist = [];
				xlist.addAll(src.findAll{ it.route.code == r.code });
				if (xlist) {
					xlist.unique{ it.loanapp.objid }
					def d30list = xlist.findAll{ it.daysaged > 0 && it.daysaged <= 30 }
					r.d30 = 0;
					if (d30list) {
						r.d30 = d30list.loanapp.balance.sum();
						if (!r.d30) r.d30 = 0;
					}

					def d60list = xlist.findAll{ it.daysaged > 30 && it.daysaged <= 60 }
					r.d60 = 0;
					if (d60list) {
						r.d60 = d60list.loanapp.balance.sum();
						if (!r.d60) r.d60 = 0;
					}

					def d90list = xlist.findAll{ it.daysaged > 60 && it.daysaged <= 90 }
					r.d90 = 0;
					if (d90list) {
						r.d90 = d90list.loanapp.balance.sum();
						if (!r.d90) r.d90 = 0;
					}

					def d120list = xlist.findAll{ it.daysaged > 90 && it.daysaged <= 120 }
					r.d120 = 0;
					if (d120list) {
						r.d120 = d120list.loanapp.balance.sum();
						if (!r.d120) r.d120 = 0;
					}

					def overd120list = xlist.findAll{ it.daysaged > 120 }
					r.overd120 = 0;
					if (overd120list) {
						r.overd120 = overd120list.loanapp.balance.sum();
						if (!r.overd120) r.overd120 = 0;
					}

					r.totalamount = xlist.loanapp.balance.sum();
					if (!r.totalamount) r.totalamount = 0;
				}
			}

			list?.sort{ it.description }
		}
		return list;
	}
}