import com.rameses.common.*;
import com.rameses.annotations.*;
import java.rmi.server.UID;
import java.text.*;

class LoanMasterListReportService
{
	@Env
	def env;

	@ActiveDB("loan_route")
	def loan_route;

	@ActiveDB("loanapp")
	def loanapp;

	@ActiveDB('loan_ledger_payment')
	def loan_ledger_payment;

	@ActiveDB("amnesty")
	def amnesty;

	@ActiveDB("loan_report")
	def loan_report;

	@ActiveDB("loan_ledger_segregationtype")
	def ledger_segregationtype;

	@ActiveDB("loan_ledger_segregation")
	def ledger_segregation;

	@Service("DateService")
	def dateSvc;

	@Service("BranchService")
	def branchSvc;

	@ProxyMethod
	public def getRoutes() {
		def list = loan_route.getList([searchtext: '%']);
		if (list) list.sort{ it.description }
		return list;
	}

	@ProxyMethod
	public def getCategories() {
		def list = ledger_segregationtype.getListByStateAndCategory([state: 'ACTIVATED', category: 'PAYMENTSTATE']);
		if (list) list.sort{ it.name }
		return list;
	}

	@ProxyMethod
	public def getReportData( params ) {
		def routes = [];
		if (!params.routecode) {
			routes = loan_route.getList([searchtext: '%']);
		} else {
			def r = loan_route.read([code: params.routecode]);
			if (r) routes.add(r);
		}

		def currdate = dateSvc.getServerDateAsString().split(" ")[0];

		def paymentsegregation = [];
		if (!params.categoryid) {
			paymentsegregation = ledger_segregationtype.getListByStateAndCategory([state: 'ACTIVATED', category: 'PAYMENTSTATE']);
		} else {
			def p = ledger_segregationtype.read([objid: params.categoryid]);
			if (p) paymentsegregation.add(p);
		}

		def list = [];
		routes?.each{ r->
			r.list = [];
			paymentsegregation?.each{ ps->
				def xlist = loan_report.getLoansByRouteAndSegregationType([routecode: r.code, typeid: ps.objid]);
				if (xlist) {
					xlist?.each{ o->
						def am = amnesty.findActiveAmnestyByLedgeridAndDate([ledgerid: o.loanapp.ledgerid, date: currdate]);
						if (am) {
							o.amnesty = [
								objid 		: am?.objid,
								amount 		: am?.grantedoffer?.amount,
								dtstarted 	: am?.dtstarted,
								dtended 	: am?.dtended,
								option 		: am?.amnestyoption,
								balance 	: am?.balance
							];
						}
						/*
						def lp = loan_ledger_payment.findLastPayment([parentid: o.loanapp.ledgerid]);
						if (lp) {
							o.lastpayment = [
								objid	: lp.objid,
								txndate : lp.txndate,
								amount 	: lp.amount,
								refno	: lp.refno
							];
						}
						*/
					}
					r.list.add([objid: ps.objid, name: ps.name, list: xlist]);
				}
			}
			list.add(r);
			/*
			def xlist = loan_report.getLoansByRoute([routecode: r.code]);
			println 'size ' + xlist?.size();
			if (xlist) {
				xlist.each{ o->
					def item = o;
					def am = amnesty.findActiveAmnestyByLedgeridAndDate([ledgerid: o.objid, date: currdate]);
					if (am) {
						item.amnesty = [
							amount 		: am?.grantedoffer?.amount,
							dtstarted 	: am?.dtstarted,
							dtended 	: am?.dtended,
							option 		: am?.amnestyoption,
							balance 	: am?.balance
						]
					}
				}
				r.list = xlist;
				list.add(r);
			}
			*/
		}

		//println 'size ' + list?.size();

		def branch = branchSvc.open([:]);
		def data = [
			date_period 		: new SimpleDateFormat("yyyy-MMM-dd").format(parseDate(currdate)),
			dtprinted			: new SimpleDateFormat("MMM-dd-yyyy hh:mm:ss a").format(dateSvc.serverDate),
			printedby 			: env.NAME,
			items				: list
		];
		branch.each{ k, v->
			data["branch_"+k] = v;
		}

		//println 'data ' + data;
		return data;
	}

	private def parseDate( date ) {
		if (!date) return null;
		if (date instanceof Date) {
			return date;
		} else {
			return java.sql.Date.valueOf(date);
		}
	}
}