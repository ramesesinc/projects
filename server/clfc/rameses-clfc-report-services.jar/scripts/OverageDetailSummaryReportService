import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.text.SimpleDateFormat;

class OverageDetailSummaryReportService
{
	@Env
	def env;

	@ActiveDB("overage")
	def em;

	@ActiveDB("collection_remittance")
	def remittance;

	@ActiveDB("user")
	def user;

	@ActiveDB("loan_route")
	def loan_route;

	@Service("DateService")
	def dateSvc;

	@Service("BranchService")
	def branchSvc;

	@ProxyMethod
	public def getReportData( params ) {
		def overage = em.findOverageByRefno(params);
		if (!overage || overage.state != 'APPROVED') throw new Exception("No overage document for Ref No. " + params.refno + ".");

		def rem = remittance.read([objid: overage.remittanceid]);
		def route;
		if (rem) {
			if (rem.group.type == 'route') {
				def r = loan_route.read([code: rem.group.objid]);
				if (r) route = r.description + ' ' + r.area;
			} else {
				def t = rem.group.type.toLowerCase();
				switch (t) {
					case 'followup': route = "FOLLOW-UP"; break;
					case 'special' : route = 'SPECIAL'; break;
				}
			}
		}

		def branch = branchSvc.open([:]);
		def preparedby = user.read(overage.author);
		def approvedby = user.read(overage.poster);
		def data = [
			date_period		: new SimpleDateFormat("yyyy-MMM-dd").format(overage.txndate),
			dtprinted 		: new SimpleDateFormat("MMM-dd-yyyy hh:mm:ss a").format(dateSvc.serverDate),
			printedby 		: env.NAME,
			refno 			: overage.refno,
			collector		: overage.collector.name,
			route 			: route,
			amount 			: overage.amount,
			remarks 		: overage.remarks,
			preparedby_name : preparedby.firstname + " " + preparedby.lastname,
			verifiedby_name : params.verifier.name,
			approvedby_name : approvedby.firstname + " " + approvedby.lastname
		];
		branch.each{ k, v->
			data["branch_"+k] = v;
		}
		return data;
	}

	@ProxyMethod
	public def getReportDataByOverageid( params ) {
		def item = em.read(params);
		if (!item) throw new Exception("Overage record does not exist or has already been deleted.");

		def rem = remittance.read([objid: item.remittanceid]);
		def route;
		if (rem) {
			if (rem.group.type == 'route') {
				def r = loan_route.read([code: rem.group.objid]);
				if (r) route = r.description + ' ' + r.area;
			} else {
				def t = rem.group.type.toLowerCase();
				switch (t) {
					case 'followup': route = "FOLLOW-UP"; break;
					case 'special' : route = 'SPECIAL'; break;
				}
			}
		}		
		def branch = branchSvc.open([:]);
		def preparedby = user.read(item.author);
		def approvedby = user.read(item.poster);
		def data = [
			date_period		: new SimpleDateFormat("yyyy-MMM-dd").format(item.txndate),
			dtprinted 		: new SimpleDateFormat("MMM-dd-yyyy hh:mm:ss a").format(dateSvc.serverDate),
			printedby 		: env.NAME,
			refno 			: item.refno,
			collector		: item.collector.name,
			route 			: route,
			amount 			: item.amount,
			remarks 		: item.remarks,
			preparedby_name : preparedby.firstname + " " + preparedby.lastname,
			//verifiedby_name : params.verifier.name,
			approvedby_name : approvedby.firstname + " " + approvedby.lastname
		];
		branch.each{ k, v->
			data["branch_"+k] = v;
		}
		return data;
	}
}