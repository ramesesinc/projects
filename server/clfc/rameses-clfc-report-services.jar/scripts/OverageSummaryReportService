import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.text.SimpleDateFormat;

class OverageSummaryReportService
{	
	@Env
	def env;

	@ActiveDB('overage')
	def em;

	@ActiveDB('loan_route')
	def loan_route;

	@Service("DateService")
	def dateSvc;

	@Service("BranchService")
	def branchSvc;

	def dateFormat = new SimpleDateFormat('yyyy-MMM-dd');
	def dateFormat2 = new SimpleDateFormat('MMM-dd-yyyy');

	@ProxyMethod
	public def getReportData( params ) {
		//def startdate = dateFormat.format(java.sql.Date.valueOf(params.startdate.toString()));
		//def enddate = dateFormat.format(java.sql.Date.valueOf(params.enddate.toString()));
		def startdate = dateFormat.format(parseDate(params.startdate));
		def enddate = dateFormat.format(parseDate(parseDate(params.enddate)));
		def items = em.getOveragesByStartdateAndEnddate(params);
		if (!items) throw new Exception("No overages from " + startdate + " TO " + enddate + ".");

		def list = [];
		def item;
		items?.each{ o->
			if (!o.amount) o.amount = 0;
			if (!o.balance) o.balance = 0;
			o.withdrawnamount = o.amount - o.balance;
			//o.date = new SimpleDateFormat("").format(java.sql.Date.valueOf(o.txndate.toString()));
			o.date = dateFormat2.format(parseDate(o.txndate));
			item = list.find{ it.route == o.route }
			if (!item) {
				item = [:];
				item.putAll(o);
				//list.add(item);
				list << item;
			}
		}

		def l;
		list?.each{ o->
			o.list = [];
			l = items.findAll{ it.route == o.route }
			l?.each{
				item = [:];
				item.putAll(it);
				//o.list.add(item);
				o.list << item;
			}
			o.total = l?.amount?.sum();
			if (!o.total) o.total = 0;
			o.list?.sort{ it.txndate }
		}

		list?.sort{ it.route }

		def branch = branchSvc.open([:]);
		def data = [
			date_period : startdate + " TO " + enddate,
			dtprinted	: new SimpleDateFormat("MMM-dd-yyyy hh:mm:ss a").format(dateSvc.serverDate),
			printedby 	: env.NAME,
			items		: list
		];
		branch.each{ k, v->
			data["branch_"+k] = v;
		}

		return data;
	}

	def parseDate( date ) {
		if (!date) return null;

		if (date instanceof Date) {
			return date;
		} else {
			return java.sql.Date.valueOf(date);
		}
	}
}