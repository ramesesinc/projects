import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.text.SimpleDateFormat;

class VaultCheckoutReportService
{	
	@Env
	def env;

	@ActiveDB("checkout")
	def em;

	@ActiveDB("user")
	def user;

	@Service("DateService")
	def dateSvc;

	@Service("BranchService")
	def branchSvc;

	@ProxyMethod
	public def getReportData( params ) {
		def txndate = new SimpleDateFormat("yyyy-MMM-dd").format(java.sql.Date.valueOf(params.txndate+""));
		//params.starttime = params.txndate + " 00:00:00";
		//params.endtime = params.txndate + " 23:59:59";
		def list = []//em.getCheckoutByTxndate(params);
		if (!list) throw new Exception("No vault check-outs for " + txndate + ".");

		def dateTimeFormat = new SimpleDateFormat("MMM-dd-yyyy hh:mm:ss a");
		def prepby;
		def rep;

		def mList = [];
		def item;
		list.each{ o->
			rep = user.read(o.representative1);
			o.representative_name = rep.firstname + " " + rep.lastname;

			rep = user.read(o.representative2);
			if (rep) o.representative2_name = rep.firstname + " " + rep.lastname;

			o.time = dateTimeFormat.format(o.dtcheckedout);

			item = mList.find{ it.time == o.time };
			if (!item) {
				item = [ time: o.time ];
				mList.add(item);
			}
		}

		mList.each{ o->
			o.list = list.findAll{ it.time == o.time }
			o.list?.sort{ it.slipno }
			o.total = (o.list? o.list.amount.sum() : 0);
		}
		/*def item = em.findByTxndateAndTxntype(params);
		if (!item) throw new Exception("No vault deposits for " + txndate + ".");

		def list = em.getDetailsWithInfo(item);
		def rep1 = user.read(item.representative1);
		def rep2 = user.read(item.representative2);
		def author = user.read(item.author);*/

		def branch = branchSvc.open([:]);
		def data = [
			date_period 		: txndate,
			dtprinted			: dateTimeFormat.format(dateSvc.serverDate),
			printedby 			: env.NAME,
			items				: mList
		];
		branch.each{ k, v->
			data["branch_"+k] = v;
		}

		//println 'data ' + data;
		return data;
	}


	@ProxyMethod
	public def getReportDataByCheckoutid( params ) {
		def item = em.read(params);
		if (!item) throw new Exception("Check-out record does not exist or has already been deleted.");

		def rep = user.read(item.representative1);
		def representative1;
		if (rep) representative1 = rep.firstname + " " + rep.lastname;
		if (!representative1) representative1 = item.representative1.name;

		rep = user.read(item.representative2);
		def representative2;
		if (rep) representative2 = rep.firstname + " " + rep.lastname;
		if (!representative2) representative2 = item.representative2.name;

		rep = user.read(item.author);
		def preparedby;
		if (rep) preparedby = rep.firstname + " " + rep.lastname;
		if (!preparedby) preparedby = item.author.name;

		def items = em.getReportDataByCheckoutid([checkoutid: item.objid]);
		items?.each{ o->			
			o.cbs = em.getDepositSlipCBSReportDataByDepositSlipid([depositslipid: o.objid]);
			o.hascbs = (o.cbs? true : false);

			o.checks = em.getDepositSlipCheckReportDataByDepositSlipid([depositslipid: o.objid]);
			o.haschecks = (o.checks? true : false);
		}

		items?.each{ println it }

		/*
		def xitems = em.getReportDataByCheckoutid([checkoutid: item.objid]);
		def items = xitems.findAll{ it.isencashed==0 }
		def prevslipno;
		items.each{ o->
			o.prevslipno = prevslipno;
			prevslipno = o.slipno;
		}
		*/
		def dateTimeFormat = new SimpleDateFormat("MMM-dd-yyyy hh:mm:ss a");
		def branch = branchSvc.open([:]);
		def data = [
			date_period 		: new SimpleDateFormat("yyyy-MMM-dd").format(item.txndate),
			dtprinted			: dateTimeFormat.format(dateSvc.serverDate),
			printedby 			: env.NAME,
			representative1_name: representative1,
			representative2_name: representative2,
			preparedby_name		: preparedby,
			items				: items
		];
		branch.each{ k, v->
			data["branch_"+k] = v;
		}

		//println 'data ' + data;
		return data;
	}
}