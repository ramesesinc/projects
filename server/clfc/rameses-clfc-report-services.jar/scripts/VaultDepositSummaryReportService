import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.text.SimpleDateFormat;

class VaultDepositSummaryReportService
{	
	@Env
	def env;

	@ActiveDB(value="deposit")
	def em;

	@ActiveDB(value="user")
	def user;

	@Service("DateService")
	def dateSvc;

	@Service("BranchService")
	def branchSvc;

	@ProxyMethod
	public def getReportData( params ) {
		params.txntype = 'vault';
		def dateFormat = new SimpleDateFormat("yyyy-MMM-dd");
		def startdate = dateFormat.format(java.sql.Date.valueOf(params.startdate + ""));
		def enddate = dateFormat.format(java.sql.Date.valueOf(params.enddate + ""));
		def list = em.getListByTxntypeAndStartdateAndEnddateWithInfo(params);
		if (!list) throw new Exception("No vault deposits from " + startdate + " TO " + enddate + ".");

		def preparedby;
		def representative;
		def dateFormat2 = new SimpleDateFormat("MMM-dd-yyyy");
		def mList = [];
		def item;
		list.each{ o->
			preparedby = user.read(o.author);
			o.preparedby_name = preparedby.firstname + " " + preparedby.lastname;

			representative = user.read(o.representative1);
			o.representative_name = representative.firstname + " " + representative.lastname;

			o.date = dateFormat2.format(java.sql.Date.valueOf(o.txndate.toString()));
			item = mList.find{ it.date == o.date }
			if (!item) {
				item = [ date: o.date ];
				mList.add(item);
			}
		}

		mList.each{ o->
			o.list = list.findAll{ it.date == o.date }
			o.list?.sort{ it.slipno }
			o.total = (o.list? o.list.amount.sum() : 0);
		}
		
		def branch = branchSvc.open([:]);
		def data = [
			date_period 		: startdate + " TO " + enddate,//new SimpleDateFormat("yyyy-MMM-dd").format(java.sql.Date.valueOf(params.txndate+"")),
			dtprinted			: new SimpleDateFormat("MMM-dd-yyyy hh:mm:ss a").format(dateSvc.serverDate),
			printedby 			: env.NAME,
			items				: mList
		];
		branch.each{ k, v->
			data["branch_"+k] = v;
		}
		return data;
	}
}