import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class AmnestyService extends ActiveCrudListService
{
	@Env
	def env;

	@ActiveDB("amnesty")
	def em;

	@ActiveDB("amnesty_history")
	def history;

	@ActiveDB("amnesty_extension")
	def extension;

	@ActiveDB("borrower")
	def borrower;

	@ActiveDB("datatxnlog")
	def txnlog; 

	@ActiveDB("loan_ledger")
	def ledger;

	@Service("DateService")
	def dateSvc;

	@Service("SequenceService")
	def seqSvc;

	@Service("InboxService")
	def inboxSvc;

	@Service("UserRoleService")
	def roleSvc;

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];
		if (!params.state) cols << [name: 'txnstate', caption: 'Status'];
		if (!params.state || params.state != 'DISAPPROVED') 
			cols << [name: 'txntype', caption: 'Txntype'];
		cols << [name: 'refno', caption: 'RefNo'];
		cols << [name: 'dtstarted', caption: 'DateStarted', type: 'date', outputFormat: 'MMM-dd-yyyy'];
		cols << [name: 'dtended', caption: 'DateEnded', type: 'date', outputFormat: 'MMM-dd-yyyy']
		if (!params.ledgerid) cols << [name: 'borrower.name', caption: 'Borrower'];
		cols << [name: 'amnestyoption', caption: 'Option'];

		return cols;
	}

	@ProxyMethod
	public def getNodes( params ) {
		def list = [
			[caption: 'Search', index: 0],
			[caption: 'DRAFT', state: 'DRAFT', index: 1],
			[caption: 'FOR APPROVAL', state: 'FOR_APPROVAL', index: 2],
			[caption: 'APPROVED', state: 'APPROVED', index: 3],
			[caption: 'DISAPPROVED', state: 'DISAPPROVED', index: 4],
			[caption: 'CLOSED', state: 'CLOSED', index: 5],
		];
		list.sort{ it.index }
		return list;
	}


	@ProxyMethod
	public def getOptions() {
		return [
			[caption: 'DRAFT', state: 'DRAFT'],
			[caption: 'FOR APPROVAL', state: 'FOR_APPROVAL'],
			[caption: 'APPROVED', state: 'APPROVED'],
			[caption: 'DISAPPROVED', state: 'DISAPPROVED'],
			[caption: 'CLOSED', state: 'CLOSED'],
		]
	}

	private void validate( data ) {
		if (data.amnestyoption=='FIX') {
			if (!data.recommendation) throw new Exception("Please specify recommendations.");
		} else if (data.amnestyoption=='WAIVER') {
			if (!data.iswaivepenalty && !data.iswaiveinterest)
				throw new Exception("Please select at least 1 option to waive.");
		}
	}

	private void resolve( data ) {
		if (data.amnestyoption=='FIX') {
			data.iswaivepenalty = 0;
			data.iswaiveinterest = 0;
		} else if (data.amnestyoption=='WAIVER') {
			data.grantedoffer = [:];
			data.recommendation = [];
		}
	}

	void beforeCreate( data ) {
		def date = dateSvc.parseCurrentDate();
		data.dtcreated = date.date;
		data.author = [objid: env.USERID, name: env.NAME];
		if (!data.txndate) data.txndate = data.dtcreated;
		if (!data.version) data.version = 1;

		def year = date.year + "";
		def seqname = 'amnesty' + year;
		def prefix = 'AMNESTY' + year[2] + year[3];
		data.refno = prefix + seqSvc.getNextFormattedSeriesA(seqname, 6);

		validate(data);
		resolve(data);
		/*
		if (data.amnestyoption=='FIX') {
			data.iswaivepenalty = 0;
			data.iswaiveinterest = 0;
		} else if (data.amnestyoption=='WAIVER') {
			data.grantedoffer = [:];
		}
		*/
		/*if (!data.amended) {
			data.version = 1;
		} else {
			data.version = data.amended.version + 1;
		}*/
	}

	void afterCreate( data ) {
		updateAmnestyDetail(data);
		/*
		if (data.amnestyoption == 'WAIVER') {
			em.removeOffers(data);
		} else if (data.amnestyoption == 'FIX') {
			data._removedoffers.each{ o->
				em.delete(o, "amnesty-offer");
			}
			data._addedoffers.each{ o->
				em.create(o, "amnesty-offer");
			}
			data.offers.each{ o->
				if (o._edited == true) em.update(o, "amnesty-offer");
			}
		}
		data.offers = em.getOffers(data);
		*/
	} 

	void beforeUpdate( data ) {
		validate(data);
		resolve(data);
		/*
		if (data.amnestyoption=='FIX') {
			data.iswaivepenalty = 0;
			data.iswaiveinterest = 0;
		} else if (data.amnestyoption=='WAIVER') {
			data.grantedoffer = [:];
		}
		*/
	}

	void afterUpdate( data ) {
		updateAmnestyDetail(data);
		/*
		if (data.amnestyoption == 'WAIVER') {
			em.removeOffers(data);
		} else if (data.amnestyoption == 'FIX') {
			data._removedoffers.each{ o->
				em.delete(o, "amnesty-offer");
			}
			data._addedoffers.each{ o->
				em.create(o, "amnesty-offer");
			}
			data.offers.each{ o->
				if (o._edited == true) em.update(o, "amnesty-offer");
			}
		}
		data.offers = em.getOffers(data);
		*/
	}

	void updateAmnestyDetail( data ) {
		/*
		if (data.amnestyoption == 'WAIVER') {
			em.removeOffers(data);
		} else if (data.amnestyoption == 'FIX') {
			data._removedoffers.each{ o->
				em.delete(o, "amnesty-offer");
			}
			data._addedoffers.each{ o->
				em.create(o, "amnesty-offer");
			}
			data.offers.each{ o->
				if (o._edited==true) em.update(o, "amnesty-offer");
			}
		}
		data.offers = em.getOffers(data);*/
		resolveOfferTerm(data.recommendation);
	}

	private void resolveOfferTerm( list ) {
		//def decformat = new java.text.DecimalFormat("#,##0.00");
		def dateformat = new java.text.SimpleDateFormat("MMM-dd-yyyy");
		def date;
		list?.each{ o->
			if (o.isspotcash == 1) {
				//o.term = 'Spot cash ' + decformat.format(o.amount) + ' ' + dateformat.format(o.date);
				date = parseDate(o.date);
				o.term = 'Spot cash until ' + dateformat.format(date);
			} else if (o.isspotcash == 0) {
				o.term = '';//decformat.format(o.amount);
				if (o.days > 0) o.term += ' ' + o.days + ' day(s)';
				if (o.months > 0) o.term += ' ' + o.months + ' month(s)';
				if (o.days==0 && o.months==0) o.term += ' No maturity date';
			}
		}
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : '') + '%';

		if (params.state) {
			params._listMethod = 'getListByState';
		}
		if (params.state == 'ACTIVE') {
			params._listMethod = 'getActiveList';
		}
		if (params.ledgerid) {
			params._listMethod = 'getListByLedgerid';
		}
	}

	void afterList( params, list ) {		
		def roles = roleSvc.getRolesByUser([userid: env.USERID]);

		def isadmin = (roles.find{ it.role == 'ADMIN_SUPPORT' && it.domain == 'ADMIN' }? true : false);//roles.containsKey('ADMIN');
		def isadminsupport = (roles.find{ it.role == 'ADMIN' && it.domain == 'ADMIN' }? true : false);
		def xlist = [];
		if (isadmin==false || isadminsupport==false) {
			xlist = list.findAll{ it.txnstate=='CLOSED' }
			xlist.each{ list.remove(it); }
		}
		def currdate = dateSvc.serverDate;
		def enddate, ac;
		list.each{ o->
			ac = (em.read([objid: o.objid], "amnesty-active")? true : false);
			if (ac == true) {
				o.txnstate = 'ACTIVE';
			} else if (o.txntype == 'REJECT') {
				o.txnstate = 'REJECTED';
			}
			enddate = o.dtended;
			if (enddate) {
				if (((currdate.compareTo(parseDate(enddate))) > 0) && ac == true) {
					o.txnstate = 'EXPIRED';
				}
			}
		}
		//def xlist = list.findAll{ it.txnstate == 'CLOSED' }
		//list.each{ o->
		//	o.filetype = 'amnesty';
		//	if (o.txnmode == 'CAPTURE') o.filetype = 'amnestycapture';
		//}
	}

	@ProxyMethod
	public def getStates() {
		def roles = roleSvc.getRolesByUser([userid: env.USERID]);

		def isadmin = (roles.find{ it.role == 'ADMIN_SUPPORT' && it.domain == 'ADMIN' }? true : false);//roles.containsKey('ADMIN');
		def isadminsupport = (roles.find{ it.role == 'ADMIN' && it.domain == 'ADMIN' }? true : false);
		def states = [
			[caption: 'All'],
			[caption: 'DRAFT', state: 'DRAFT'],
			[caption: 'FOR APPROVAL', state: 'FOR_APPROVAL'],
			[caption: 'APPROVED', state: 'APPROVED'],
			[caption: 'DISAPPROVED', state: 'DISAPPROVED'],
			[caption: 'FOR VERIFICATION', state: 'FOR_VERIFICATION'],
			[caption: 'SEND BACK', state: 'SEND_BACK'],
			[caption: 'ACTIVE', state: 'ACTIVE']
		];
		if (isadmin==true && isadminsupport==true) {
			states << [caption: 'CLOSED', state: 'CLOSED'];
		}
		return states;
	}

	void afterOpen( data ) {
		resolveOfferTerm(data.recommendation);
		if (data.txnstate != 'DRAFT') {
			data.offers = em.getOffers(data);
			if (!data.offers) data.offers = data.recommendation;
			resolveOfferTerm(data.offers);
		}
		/*
		def decformat = new java.text.DecimalFormat("#,##0.00");
		def dateformat = new java.text.SimpleDateFormat("MMM-dd-yyyy");
		data.offers.each{ o->
			if (o.isspotcash == 1) {
				o.term = 'Spot cash ' + decformat.format(o.amount) + ' ' + dateformat.format(o.date);
			} else if (o.isspotcash == 0) {
				o.term = decformat.format(o.amount);
				if (o.days > 0) o.term += ' ' + o.days + ' day(s)';
				if (o.months > 0) o.term += ' ' + o.months + ' month(s)';
			}

		}
		*/
		
		def decformat = new java.text.DecimalFormat("#,##0.00");
		def dateformat = new java.text.SimpleDateFormat("MMM-dd-yyyy");
		def amountavailed;
		def offer = data.grantedoffer;
		if (offer.isspotcash==1) {
			amountavailed = decformat.format(offer.amount) + " Spot cash until " + dateformat.format(offer.date);
		} else if (offer.isspotcash==0) {
			amountavailed = decformat.format(offer.amount);
			if (offer.days > 0) amountavailed += " " + offer.days + " day(s)";
			if (offer.months > 0) amountavailed += " " + offer.months + " month(s)";
			if (offer.days==0 && offer.months==0) amountavailed += " No maturity date";
		}
		data.amountavailed = amountavailed;

		//def b = borrower.read(data.borrower);
		//if (!b) throw new Exception("Borrower record does not exist or has already been deleted.");

		//data.borrower.address = b.address;
		/*if (data.info) {
			def info = em.serializer.read(data.info);
			data.borrower.address = info.borrower_address;
			def ledger = [
				loanamount 	: info.ledger_loanamount,
				dtreleased	: info.ledger_dtreleased,
				dtmatured	: info.ledger_dtmatured,
				balance 	: info.ledger_balance
			];
			data.ledger = ledger;
			data.rejectionremarks = info.rejectionremarks;
			data.remove('info');
		}*/

		//println 'data ' + data;
		/*
		def l = ledger.read([objid: data.ledgerid]);
		if (!l) throw new Exception("Ledger record does not exist or has already been deleted.");

		def amnesty = em.findLatestAmnestyByLedgerid([ledgerid: l.objid]);
		if (data.objid == amnesty?.objid && l.state == 'OPEN') data.foramend = true;
		*/
		data.foramend = false;
	}

	@ProxyMethod
	public def submitForApproval( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Record does not exist or has already been deleted.");

		data.txnstate = 'FOR_APPROVAL';
		em.changeState(data);

		def msginfo = [ 
			objid 		: data.objid, 
			dtcreated	: dateSvc.serverDate, 
			refid 		: data.objid, 
			filetype 	: 'amnesty', 
			message 	: 'For approval amnesty for Ref. No. '+ data.refno, 
			senderid	: env.USERID, 
			sendername 	: env.NAME, 
			recipientid : 'FLA_OFFICER' 
		]; 
		inboxSvc.addMessage( msginfo );

		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : msginfo.dtcreated, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'FOR_APPROVAL', 
			remarks : 'Submit for approval amnesty for Ref. No. ' + data.refno
		]; 
		txnlog.create( loginfo ); 

		return open(data);
	}

	void validateBeforeApproval( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Record does not exist or has already been deleted.");

		//check for amnesty overlapping
	} 

	@ProxyMethod
	public def approveDocument( params ) {
		validateBeforeApproval(params);
		def data = em.read(params);

		data.txnstate = 'APPROVED';
		em.changeState(data);

		data.offers.each{ o->
			em.update(o, "amnesty-offer");
		}

		data.dtposted = dateSvc.serverDate;
		data.poster = [objid: env.USERID, name: env.NAME, remarks: params.posterremarks];
		em.update(data, "amnesty-post");

		if (data.amnestyoption == 'WAIVER') {
			data.dtstarted = data.dtposted;
			em.update(data);
			em.create(data, "amnesty-active");
		} else if (data.amnestyoption == 'FIX') {
			def item;
			params.offers.each{ o->
				if (!o.usedate) o.usedate = o.isspotcash;
				item = em.read(o, "amnesty-offer");
				if (item) {
					em.update(o, "amnesty-offer");
				} else {
					em.create(o, "amnesty-offer");
				}
			}
		}


		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : data.dtposted, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'APPROVE', 
			remarks : 'Approve amnesty with Ref. No. ' + data.refno
		]; 
		txnlog.create( loginfo ); 
		
		inboxSvc.removeMessageByRefid([refid: data.objid]); 

		return open(data);
	}

	@ProxyMethod
	public def disapprove( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Record does not exist or has already been deleted.");

		data.txnstate = 'DISAPPROVED';
		em.changeState(data);

		data.dtposted = dateSvc.serverDate;
		data.poster = [objid: env.USERID, name: env.NAME, remarks: params.posterremarks];
		em.update(data, "amnesty-post");

		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : data.dtposted, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'DISAPPROVE', 
			remarks : 'Disapprove amnesty with Ref. No. ' + data.refno
		]; 
		txnlog.create( loginfo ); 

		inboxSvc.removeMessageByRefid([refid: data.objid]); 

		return open(data);
	}

	@ProxyMethod
	public def amend( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Record does not exist or has already been deleted.");

		def offer = params.grantedoffer;
		def amount = (data.grantedoffer.amount? data.grantedoffer.amount : 0);

		if (amount > offer.amount) throw new Exception("Offer must be greater than previous offer.");

		data.offers = em.getOffers(data);
		data.objid = 'AH' + new UID();
		data.dtamended = dateSvc.serverDate;
		data.amendedby = [objid: env.USERID, name: env.NAME];
		history.create(data);

		def extensions = extension.getExtensionsByAmnestyid([amnestyid: params.objid]);
		extensions.each{ o->
			o.amnesty.objid = data.objid;
			extension.update(o);
		}

		data = em.read(params);
		data.grantedoffer = params.grantedoffer;
		
		Calendar c = Calendar.getInstance();
		if (offer.isspotcash == 0) {
			c.setTime(data.dtstarted);
			if (offer.days) c.add(Calendar.DATE, offer.days);
			if (offer.months) c.add(Calendar.MONTH, offer.months);
		} else if (offer.isspotcash == 1) {
			c.setTime(offer.date);
		}

		data.dtended = dateSvc.parse('yyyy-MM-dd', c.getTime());
		data.version++;
		data.extendeddate = null;
		em.update(data, "amnesty-amend");

		params.offers.each{ o->
			if (o._edited == true) em.update(o, "amnesty-offer");
		}

		return open(params);
	}

	@ProxyMethod
	public def avail( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Record does not exist or has already been deleted.");

		if (!data.grantedoffer) throw new Exception("Please specify offer.");

		data.txntype = 'AVAIL';
		data.grantedoffer = params.grantedoffer;
		data.balance = data.grantedoffer.amount;
		data.dtstarted = dateSvc.serverDate.toString().split(" ")[0];
		def offer = data.grantedoffer;
		if (offer.isspotcash == 1 && !offer.date) throw new Exception("Please specify date for spot cash.");
		if (offer.date && (offer.date.toString().compareTo(data.dtstarted) < 0)) throw new Exception("Spot cash date should be greater than or equal to current date.");

		/*
		Calendar c = Calendar.getInstance();
		if (offer.isspotcash == 0) {
			c.setTime(java.sql.Date.valueOf(data.dtstarted));
			if (offer.days) c.add(Calendar.DATE, offer.days);
			if (offer.months) c.add(Calendar.MONTH, offer.months);
		} else if (offer.isspotcash == 1) {
			c.setTime(offer.date);
		}
		*/

		def c = Calendar.getInstance();
		def hasenddate = false;
		if (offer.isspotcash == 0) {
			c.setTime(parseDate(data.dtstarted));
			if (offer.days > 0) {
				c.add(Calendar.DATE, offer.days);
				hasenddate = true;
			}
			if (offer.months > 0) {
				c.add(Calendar.MONTH, offer.months);
				hasenddate = true;
			}
		} else if (offer.isspotcash == 1) {
			c.setTime(parseDate(offer.date));
			hasenddate = true;
		}

		def enddate;
		if (hasenddate == true) {
			data.dtended = dateSvc.parse('yyyy-MM-dd', c.getTime());
			enddate = data.dtended;
		}

		if (!enddate) enddate = dateSvc.getServerDateAsString().split(" ")[0];

		def m = em.findOverlapping([startdate: data.dtstarted, enddate: enddate, ledgerid: data.ledgerid]);
		if (m) {
			def startdate = new java.text.SimpleDateFormat("MMM-dd-yyyy").format(m.dtstarted);
			if (!m.dtended) m.dtended = dateSvc.serverDate;
			enddate = new java.text.SimpleDateFormat("MMM-dd-yyyy").format(m.dtended);
			throw new Exception("Amnesty overlaps amnesty with term ${startdate} - ${enddate}.");
		}

		//data.dtended = dateSvc.parse('yyyy-MM-dd', c.getTime());
		em.update(data, "amnesty-avail");
		//em.create(data, "amnesty-active");

		//afterAvail(data);

		return open(data);
	}

	void afterVerify( data ) {
		def ledgeritem = ledger.findLastLedgerItemByParentId([parentid: data.ledgerid]);
		def offer = data.grantedoffer;
		def remarks = new java.text.DecimalFormat("#,##0.00").format(offer.amount);
		if (offer.isspotcash == 1) {
			remarks += " spot cash " + new java.text.SimpleDateFormat("MMM-dd-yyyy").format(offer.date);
		} else {
			if (offer.days > 0) remarks += " " + offer.days + " day(s)";
			if (offer.months > 0) remarks += " " + offer.months + " month(s)";
		}
		def detail = [
			objid			: 'LLD' + new UID(),
			parentid		: data.ledgerid,
			state 			: 'AMNESTY',
			amtdue 			: 0.00,
			interestdue 	: 0.00,
			penaltydue		: 0.00,
			amtpaid 		: 0.00,
			interestpaid 	: 0.00,
			penaltypaid 	: 0.00,
			amtbal 			: 0.00,
			interestbal 	: 0.00,
			penaltybal 		: 0.00,
			day 			: ledgeritem.day,
			balance 		: ledgeritem.balance,
			partialpayment 	: 0.00,
			txndate 		: dateSvc.serverDate,
			baseamount 		: ledgeritem.baseamount,
			groupbaseamount : ledgeritem.groupbaseamount,
			amnestyid 		: data.objid,
			remarks 		: remarks
		];
		ledger.create(detail, "detail");

		detail.parentid = data.objid;
		em.create(detail, "amnesty-detail");
	}

	@ProxyMethod
	public def reject( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Amnesty record does not exist or has already been deleted.");

		if (data.txntype=='REJECT')
			throw new Exception("Amnesty record has already rejected the offer(s).");

		data.txntype = 'REJECT';
		data.dtrejected = dateSvc.serverDate;
		data.rejectedby = [objid: env.USERID, name: env.NAME];
		data.rejectionremarks = params.rejectionremarks;
		em.update(data);

		return open(data);
	}

	@ProxyMethod
	public def submitForVerification( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Amnesty record does not exist or has already been deleted.");

		if (data.txnstate == 'FOR_VERIFICATION')
			throw new Exception("Amnesty record has already been submitted for verification.");


		data.txnstate = 'FOR_VERIFICATION';
		em.changeState(data);

		def msginfo = [ 
			objid 		: data.objid, 
			dtcreated	: dateSvc.serverDate, 
			refid 		: data.objid, 
			filetype 	: 'amnesty', 
			message 	: 'For verification amnesty for Ref. No. '+ data.refno, 
			senderid	: env.USERID, 
			sendername 	: env.NAME, 
			recipientid : 'APPROVER' 
		]; 
		inboxSvc.addMessage( msginfo );

		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : dateSvc.serverDate, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'FOR VERIFICATION', 
			remarks : 'Submitted for verification amnesty with Ref. No. ' + data.refno
		]; 
		txnlog.create( loginfo ); 

		def sb = em.findSendBackByParentidAndState([parentid: data.objid, state: 'OPEN']);
		if (sb) {
			sb.state = 'CLOSED';
			em.update(sb, 'amnesty-sendback');
		}

		return open(data);
	}


	@ProxyMethod
	public def verify( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Amnesty record does not exist or has already been deleted.");

		if (data.txnstate == 'VERIFIED')
			throw new Exception("Amnesty record has already been verified.");

		data.txnstate  = 'VERIFIED';
		em.changeState(data);

		data.dtverified = dateSvc.serverDate;
		data.verifier = [objid: env.USERID, name: env.NAME];
		em.update(data, 'amnesty-verify');
		def a = em.read(data, 'amnesty-active')
		if (!a) em.create(data, 'amnesty-active');

		inboxSvc.removeMessageByRefid([refid: data.objid]);

		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : data.dtverified, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'VERIFY', 
			remarks : 'Verified amnesty with Ref. No. ' + data.refno
		]; 
		txnlog.create( loginfo ); 

		afterVerify(data);

		return open(data);
	}

	@ProxyMethod
	public def sendBack( params ) {
		if (!params.sendbackremarks) throw new Exception("Please specify remarks.");

		def data = em.read(params);
		if (!data) throw new Exception("Amnesty record does not exists or has already been deleted.");

		if (data.txnstate == 'SEND_BACK')
			throw new Exception("Amnesty record has already been sent back.");

		data.txnstate = 'SEND_BACK';
		em.changeState(data);

		def offer = data.grantedoffer;
		offer.amount = null;
		offer.days = null;
		offer.months = null;
		offer.isspotcash = null;
		offer.date = null;

		data.txntype = null;
		data.dtstarted = null;
		data.dtended = null;
		data.balance = null;
		data.grantedoffer = offer;
		em.update(data);
		inboxSvc.removeMessageByRefid([refid: data.objid]);

		def sb = em.findSendBackByParentidAndState([parentid: data.objid, state: 'OPEN']);
		if (!sb) {
			sb = [
				objid		: 'ASB' + new UID(),
				parentid 	: data.objid,
				dtcreated 	: dateSvc.serverDate,
				author		: [objid: env.USERID, name: env.NAME],
				state 		: 'OPEN',
				remarks 	: params.sendbackremarks
			];
			em.create(sb, 'amnesty-sendback');

			def loginfo = [
				objid 	: 'TLOG' + new UID(), 
				txndate : sb.dtcreated, 
				txnid   : data.objid, 
				user    : [objid: env.USERID, username: env.USER], 
				action	: 'SEND BACK', 
				remarks : 'Send back amnesty with Ref. No. ' + data.refno
			]; 
			txnlog.create( loginfo ); 
		}

		return open(data);
	}


	private def parseDate( date ) {
		if (date instanceof Date) {
			return date;
		} else { 
			return java.sql.Date.valueOf(date);
		}
	}
}