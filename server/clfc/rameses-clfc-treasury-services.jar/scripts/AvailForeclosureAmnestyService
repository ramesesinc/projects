import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;

class AvailForeclosureAmnestyService extends ActiveCrudListService
{
	@Env
	def env;

	@ActiveDB('ledgeramnesty_foreslosure')
	def em;

	@Service('DateService')
	def dateSvc;

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];
		if (!params.state) cols << [name: 'txnstate', caption: 'Status'];

		cols << [name: 'dtcreated', caption: 'Date Created'];
		cols << [name: 'author.name', caption: 'Created By'];
		cols << [name: 'loanapp.appno', caption: 'App. No.'];
		cols << [name: 'borrower.name', caption: 'Borrower'];

		if (params.state == 'APPROVED') {
			cols << [name: 'dtposted', caption: 'Date Approved'];
			cols << [name: 'poster.name', caption: 'Approved By'];
		} else if (params.state == 'DISAPPROVED') {
			cols << [name: 'dtposted', caption: 'Date Disapproved'];
			cols << [name: 'poster.name', caption: 'Disapproved By'];
		}

		return cols;
	}

	@ProxyMethod
	public def getStates() {
		return [
			[caption: 'All'],
			[caption: 'DRAFT', state: 'DRAFT'],
			[caption: 'FOR APPROVAL', state: 'FOR_APPROVAL'],
			[caption: 'APPROVED', state: 'APPROVED'],
			[caption: 'DISAPPROVED', state: 'DISAPPROVED']
		];
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : '') + '%';
		if (params.state) {
			params._listMethod = 'getListByState';
		}
	}

	void beforeCreate( data ) {
		data.dtcreated = dateSvc.serverDate;
		data.author = [objid: env.USERID, name: env.NAME];
		if (data.txnstate) data.txnstate = 'DRAFT';
	}



}

