import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class BankService extends ActiveCrudListService 
{	
	@ActiveDB('bank')
	def em; 

	@ActiveDB('datatxnlog')
	def txnlog; 	

	@Service('DateService')
	def dateSvc;

	@Env 
	def env;
	
	@ProxyMethod
	public def getColumns( params ) {
		return [
			[name:"code", caption:"Bank Code"], 
			[name:"name", caption:"Bank Name"], 
			[name:"address", caption:"Address"], 
			[name:"branchname", caption:"Branch Name"], 
			[name:"dtcreated", caption:"Date Created"], 
			[name:"txnstate", caption:"Status"]
		];
	}

	void beforeCreate( data ) { 
		if (!data.txnstate) data.txnstate = 'ACTIVATED';

		data.dtcreated = dateSvc.serverDate.toString(); 
		data.author = [objid: env.USERID, username: env.USER];  		
	} 

	void afterCreate( data ) {
		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : data.dtcreated, 
			txnid   : data.objid, 
			user    : data.author, 
			action	: 'CREATE', 
			remarks : 'New Bank '+ data.code 
		]; 
		txnlog.create( loginfo ); 
	}

	void afterUpdate( data ) {
		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : dateSvc.serverDate, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'UPDATE', 
			remarks : 'Updated Bank (code='+ data.code + ', name='+data.name+')' 
		]; 
		txnlog.create( loginfo ); 
	}

	void afterRemoveEntity( data ) {
		if (!data.remarks) data.remarks = 'Deleted bank record'; 

		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : dateSvc.serverDate, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'DELETE', 
			remarks : data.remarks 
		]; 
		txnlog.create( loginfo ); 
	}	

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext: '')+'%'; 
		if (params.state) {
			params._listMethod = 'getListByState';
		}
	}

	@ProxyMethod 
	public def activate( params ) {
		params.txnstate = 'ACTIVE';
		return changeState( params ); 
	} 

	@ProxyMethod 
	public def deactivate( params ) {
		params.txnstate = 'DEACTIVATED';
		return changeState( params ); 
	}

	private def changeState( params ) {
		if (!params.objid) throw new Exception('Please specify objid'); 
		if (!params.txnstate) throw new Exception('Please specify txnstate'); 

		def data = em.read(params); 
		if (!data) throw new Exception("'"+params.objid+"' bank record not found"); 

		data.txnstate = params.txnstate;
		em.update(data);

		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : dateSvc.serverDate, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'CHANGE_STATE', 
			remarks : data.txnstate 
		]; 
		txnlog.create( loginfo ); 
		return data; 
	} 
} 