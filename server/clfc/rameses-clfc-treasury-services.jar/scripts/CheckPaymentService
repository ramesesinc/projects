import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class CheckPaymentService extends ActiveCrudListService
{	
	@ActiveDB('checkpayment')
	def em; 

	@ActiveDB('checkaccount')
	def checkaccount;

	@ActiveDB('datatxnlog') 
	def txnlog; 

	@ActiveDB('passbook') 
	def passbook; 

	@Service('DateService')
	def dateSvc;

	@Env 
	def env;
	
	def STATES = [
		FOR_CLEARING: 'FOR_CLEARING',
		POSTED		: 'POSTED', 
		REJECTED	: 'REJECTED',
		CLEARED 	: 'CLEARED'
	];

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];

		if (!params.state) cols << [name: 'state', caption: 'Status'];

		cols << [name: 'dtpaid', caption: 'Date Paid'];
		cols << [name: 'checkno', caption: 'Check No.'];
		cols << [name: 'checkdate', caption: 'Check Date', type: 'date', outputFormat: 'MMM-dd-yyyy'];
		cols << [name: 'amount', caption: 'Amount', type: 'decimal', format: '#,##0.00'];

		if (params.state == 'CLEARED') {
			cols << [name: 'dtcleared', caption: 'Date Cleared'];
			cols << [name: 'clearedby.name', caption: 'Cleared By'];
		} else if (params.state == 'REJECTED') {
			cols << [name: 'posting.date', caption: 'Date Rejected'];
			cols << [name: 'posting.username', caption: 'Rejected By'];
		}

		return cols;
		/*
		return [
			[name:"dtpaid", caption:"DatePaid"], 
			[name:"checkno", caption:"CheckNo"], 
			[name:"checkdate", caption:"CheckDate"], 
			[name:"amount", caption:"Amount"], 
			[name:"bank.objid", caption:"Bank"], 
			[name:"collector.name", caption:"Collector"], 
			[name:"payor.name", caption:"Payor"] 
		];
		*/
	}

	@ProxyMethod
	public def getStates() {
		return [
			[caption: 'All'],
			[caption: 'FOR CLEARING', state: 'FOR_CLEARING'],
			[caption: 'CLEARED', state: 'CLEARED'],
			[caption: 'REJECTED', state: 'REJECTED']
		]
	}

	void beforeCreate( data ) {
		data.dtcreated = dateSvc.serverDate;
		data.author = [objid: env.USERID, name: env.NAME];
		data.state = STATES.FOR_CLEARING;
	}

	void afterCreate( data ) {
		updateInfo(data);
	}

	void afterUpdate( data ) {
		updateInfo(data);
	}

	private void updateInfo( data ) {
		def i = em.read(data, 'active');
		if (!i) {
			em.create(data, 'active');
		}

		def ca = checkaccount.read([objid: data.objid]);
		if (!ca) {
			ca = [
				objid 		: data.objid,
				state 		: data.state,
				reftype 	: 'COLLECTION',
				refid 		: data.objid,
				dtcreated 	: data.dtcreated,
				author		: data.author,
				checkno 	: data.checkno,
				txndate 	: data.checkdate,
				amount 		: data.amount,
				bank 		: data.bank
			];
			checkaccount.create(ca);
		}

	}

	/*
	@ProxyMethod 
	public def create( data ) { 
		data.dtcreated = dateSvc.serverDate;
		data.author = [objid: env.USERID, name: env.NAME];
		data.state = STATES.FOR_CLEARING;
		em.create( data ); 
		em.create( data, 'active' );

		def ca = checkaccount.read([objid: data.objid]);
		if (!ca) {
			ca = [
				objid 		: data.objid,
				state 		: data.state,
				reftype 	: 'COLLECTION',
				refid 		: data.objid,
				dtcreated 	: data.dtcreated,
				author		: data.author,
				checkno 	: data.checkno,
				txndate 	: data.checkdate,
				amount 		: data.amount,
				bank 		: data.bank
			];
			checkaccount.create(ca);
		}

		def logdata = [
			objid 	: 'TLOG' + new UID(), 
			txndate : data.dtcreated, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: data.state,  
			remarks : 'Submitted check for clearing' 
		]; 
		txnlog.create( logdata ); 



		return data; 
	}
	*/

	/*
	@ProxyMethod 
	public def open( params ) { 
		if (!params.objid) throw new Exception('Please specify objid'); 

		def data = em.read( params ); 
		if (data) {
			attachReferences( data ); 
			return data; 
		} 
		throw new Exception("'"+params.objid+"' checkpayment record not found"); 
	}
	*/

	void afterOpen( data ) {
		attachReferences(data);
	}

	private void attachReferences( data ) {
		if (data.state == STATES.POSTED) {
			def pbk = passbook.read([objid: data.posting?.passbookid]); 
			if (pbk) data.posting.passbook = pbk; 
		} 
	} 

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : '') + '%';
		if (params.state) {
			params._listMethod = 'getListByState';
		}
	}

	private def changeState( params, state ) {
		def data = em.read(params);
		if (!data) throw new Exception('Check record does not exist or has already been deleted.');

		if (data.state == state) {
			throw new Exception('Check record has already been ' + state + '.');
		}

		data.state = state;
		em.changeState(data);

		def action, remarks;
		switch (state) {
			case STATES.FOR_CLEARING	: action = 'For Clearing';
										  remarks = 'Submit check For Clearing';
										  break;
			case STATES.CLEARED 		: action = 'Cleared';
										  remarks = 'Check Cleared';
										  break;
			case STATES.REJECTED 		: action = 'Rejected';
										  remarks = 'Check Rejected';
										  break;
		}

		if (action && remarks) {
			def logdata = [
				objid 	: 'TLOG' + new UID(), 
				txndate : dateSvc.serverDate,
				txnid   : data.objid, 
				user    : [objid: env.USERID, username: env.USER], 
				action	: action,  
				remarks : remarks
			]; 
			txnlog.create( logdata ); 				
		}

		return open(data);
	}

	@ProxyMethod
	public def cleared( params ) {
		def data = changeState(params, STATES.CLEARED);

		data.dtcleared = dateSvc.serverDate;
		data.clearedby = [objid: env.USERID, name: env.NAME];
		em.update(data);

		def i = em.read(data, 'active');
		if (i) {
			em.delete(data, 'active');
		}

		def ca = checkaccount.read([objid: data.objid]);
		if (ca) {
			ca.state = data.state;
			checkaccount.update(ca);

			ca.dtcleared = data.dtcleared;
			ca.clearedby = data.clearedby;
			checkaccount.update(ca, 'clear');
		}

		return open(data);
	}

	@ProxyMethod 
	public def reject( params ) {
		/*
		if (!params.objid) throw new Exception('Please specify objid'); 
		if (!params.remarks) throw new Exception('Please specify remarks'); 

		def data = em.read( params, 'reject' );
		if (!data) throw new Exception("'"+params.objid+"' check payment record not found"); 
		*/
		def data = changeState(params, STATES.REJECTED);

		def currentdate = dateSvc.serverDate;
		data.posting = [
			date 	: currentdate,//dateSvc.serverDate.toString(), 
			remarks : params.remarks,
			userid 	: env.USERID,
			username: env.USER
		]; 
		data.passbook = null; 
		data.dtresolved = null; 
		em.update(data, 'reject');

		def i = em.read(data, 'active');
		if (i) {
			em.delete(data, 'active');	
		}

		def ca = checkaccount.read([objid: data.objid]);
		if (ca) {
			ca.state = data.state;
			checkaccount.update(ca);

			ca.dtrejected = currentdate;
			ca.rejectedby = [objid: env.USERID, name: env.NAME];
			checkaccount.update(ca, 'reject');
		}

		return open( params ); 
	}


	/*
	@ProxyMethod 
	public def getList( params ) {
		params.searchtext = (params.searchtext? params.searchtext: '')+'%'; 

		if (params.state == STATES.FOR_CLEARING) {
			return em.getList( params ); 
		} else {
			return em.getListByState( params );
		}
	} 
	*/

	/*
	@ProxyMethod
	public def cleared( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Check payment record does not exist or has already been deleted.");

		data.state = STATES.CLEARED;
		data.dtcleared = dateSvc.serverDate;
		data.clearedby = [objid: env.USERID, name: env.NAME];
		em.update(data);
		em.delete(data, 'active');
		
		def ca = checkaccount.read([objid: data.objid]);
		if (ca) {
			ca.state = data.state;
			checkaccount.update(ca);
		}

		def logdata = [
			objid 	: 'TLOG' + new UID(), 
			txndate : data.dtcleared,
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'CLEAR',  
			remarks : 'Check cleared'
		]; 
		txnlog.create( logdata ); 	

		return open(data);
	}

	@ProxyMethod 
	public def post( params ) {
		if (!params.objid) throw new Exception('Please specify objid'); 
		if (!params.remarks) throw new Exception('Please specify remarks'); 
		if (!params.passbook) throw new Exception('Please specify passbook'); 
		if (!params.dtresolved) throw new Exception('Please specify dtresolved'); 

		def data = em.read( params, 'post' );
		if (!data) throw new Exception("'"+params.objid+"' check payment record not found"); 

		data.state = STATES.POSTED;
		data.passbook = params.passbook;
		data.dtresolved = params.dtresolved;		
		data.posting = [
			date 	: dateSvc.serverDate.toString(), 
			userid 	: env.USERID,
			username: env.USER,
			remarks : params.remarks
		];
		em.update(data, 'post'); 
		em.delete(data, 'active');

		def ca = checkaccount.read([objid: data.objid]);
		if (ca) {
			ca.state = data.state;
			checkaccount.update(ca);
		}

		def logdata = [
			objid 	: 'TLOG' + new UID(), 
			txndate : data.posting.date,
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'POST',  
			remarks : data.posting.remarks 
		]; 
		txnlog.create( logdata ); 		
		return open( params ); 
	} 

	@ProxyMethod 
	public def reject( params ) {
		if (!params.objid) throw new Exception('Please specify objid'); 
		if (!params.remarks) throw new Exception('Please specify remarks'); 

		def data = em.read( params, 'reject' );
		if (!data) throw new Exception("'"+params.objid+"' check payment record not found"); 

		data.state = STATES.REJECTED;
		data.posting = [
			date 	: dateSvc.serverDate.toString(), 
			remarks : params.remarks,
			userid 	: env.USERID,
			username: env.USER 			
		]; 
		data.passbook = null; 
		data.dtresolved = null; 
		em.update(data, 'reject'); 
		em.delete(data, 'active');

		def ca = checkaccount.read([objid: data.objid]);
		if (ca) {
			ca.state = data.state;
			checkaccount.update(ca);
		}

		def logdata = [
			objid 	: 'TLOG' + new UID(), 
			txndate : data.posting.date,
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'REJECT',  
			remarks : data.posting.remarks 
		]; 
		txnlog.create( logdata ); 		
		return open( params ); 
	}
	*/	

}  