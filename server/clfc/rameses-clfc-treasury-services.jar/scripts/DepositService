import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class DepositService extends ActiveCrudListService
{
	@Env
	def env;

	@ActiveDB("deposit")
	def em;

	@ActiveDB("depositslip")
	def depositslip;

	@ActiveDB("collection_cb")
	def collection_cb;

	@ActiveDB("datatxnlog")
	def txnlog; 

	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];

		if (!params.state) cols << [name: 'txnstate', caption: 'Status'];

		cols << [name: 'txndate', caption: 'Prepared Date', type: 'date', outputFormat: 'MMM-dd-yyyy'];
		cols << [name: 'depositto', caption: 'Deposit'];
		cols << [name: 'representative1.name', caption: 'Representative #1'];
		cols << [name: 'representative2.name', caption: 'Representative #2'];

		if (params.state == 'CONFIRMED') {
			cols << [name: 'dtconfirmed', caption: 'Date Confirmed'];
			cols << [name: 'confirmedby.name', caption: 'Confirmed By'];
		}

		return cols;
	}

	@ProxyMethod
	public def getOptions() {
		return [
			[caption: 'Bank', txntype: 'bank'],
			[caption: 'Vault', txntype: 'vault'],
		]
	}

	@ProxyMethod
	public def getStates() {
		return [
			[caption: 'All'],
			[caption: 'DRAFT', state: 'DRAFT'],
			[caption: 'CONFIRMED', state: 'CONFIRMED'],
		]
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : '') + '%';
		if (params.state) {
			params._listMethod = 'getListByState';
		}
	}

	void validate( data ) {
		if (!data.depositslips) throw new Exception("At least 1 deposit slip to deposit is required.");
	}

	void beforeCreate( data ) {
		validate(data);
		data.dtcreated = dateSvc.serverDate;
		data.author = [objid: env.USERID, name: env.NAME];
	}

	void beforeUpdate( data ) {
		validate(data);
	}


	void afterCreate( data ) {
		updateInfo(data);
	}

	void afterUpdate( data ) {
		updateInfo(data);
	}

	void updateInfo( data ) {
		data._removedds?.each{ o->
			em.delete(o, 'deposit-detail');
		}

		data._addedds?.each{ o->
			em.create(o, 'deposit-detail');
		}
	}

	void xafterCreate( data ) {
		def reftype = ((data.txntype == 'bank')? 'DEPOSIT' : 'SAFE_KEEP');

		def item;
		data?.depositslips?.each{ o->
			em.create(o, "deposit-detail");

			item = depositslip.read([objid: o.refid]);
			if (item) {
				item.state = 'CLOSED';
				item.reftype = reftype;
				depositslip.update(item);

				def cbslist = depositslip.getCbs(item);
				def itm;
				cbslist?.each{ cbs->
					itm = [objid: cbs.cbsid, state: 'DEPOSITED'];
					collection_cb.changeState(itm);
					collection_cb.delete(itm, "cb-active");
					collection_cb.delete(itm, "cb-forencashment");
					collection_cb.create(itm, "cb-deposited");
				}
			}
		}
	}

	/*
	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : '') + '%';
		if (params.txntype) {
			params._listMethod = "getListByTxntype";
		}
	}
	*/

	void afterOpen( data ) {
		data.depositslips = em.getDetails(data);
		//println 'data ' + data;
	}	

	void beforeConfirm( params ) {
		if (!params.representative1 || !params.representative1.objid) 
			throw new Exception('Please specify representative #1.');

	}

	@ProxyMethod
	public def confirm( params ) {
		beforeConfirm(params);
		def data = changeState(params, 'CONFIRMED');

		data.dtconfirmed = dateSvc.serverDate;
		data.confirmedby = [objid: env.USERID, name: env.NAME];
		em.update(data, 'confirm');

		def list = data.remove('depositslips');


		def reftype;
		switch (data.txntype) {
			case 'bank' : reftype = 'DEPOSIT'; break;
			case 'vault': reftype = 'SAFE_KEEP'; break;
		}

		def item, cbslist, itm;
		list?.each{ o->
			item = depositslip.read([objid: o.refid]);
			if (item) {
				item.state = 'CLOSED';
				item.reftype = reftype;
				depositslip.update(item);

				cbslist = depositslip.getCbs(item);
				cbslist?.each{ cbs->
					itm = [objid: cbs.cbsid, state: 'DEPOSITED'];
					collection_cb.changeState(itm);

					def i = collection_cb.read(itm, 'cb-active');
					if (i) {
						collection_cb.delete(itm, 'cb-active');
					}

					i = collection_cb.read(itm, 'cb-forencashment');
					if (i) {
						collection_cb.delete(itm, 'cb-forencashment');
					}

					i = collection_cb.read(itm, 'cb-deposited');
					if (!i) {
						collection_cb.create(itm, 'cb-deposited');
					}
				}
			}
		}


		return open(data);
	}

	private def changeState( params, state ) {
		def data = em.read(params);
		if (!data) throw new Exception('Deposit record does not exist or has already been deleted.');

		if (data.txnstate == state) {
			throw new Exception('Deposit record has already been ' + state + '.');
		}

		data.txnstate = state;
		em.changeState(data);

		def action, remarks;
		switch (state) {
			case 'CONFIRMED'	: action = 'Confirm';
								  remarks = 'Deposit Confirmed';
								  break;
		}


		if (action && remarks) {
			def logdata = [
				objid 	: 'TLOG' + new UID(), 
				txndate : dateSvc.serverDate,
				txnid   : data.objid, 
				user    : [objid: env.USERID, username: env.USER], 
				action	: action,  
				remarks : remarks
			]; 
			txnlog.create( logdata ); 				
		}


		return  open(data);
	}
}