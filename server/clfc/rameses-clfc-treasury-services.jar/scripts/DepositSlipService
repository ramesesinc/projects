import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class DepositSlipService extends ActiveCrudListService
{
	@Env
	def env;

	@ActiveDB("depositslip")
	def em;

	@ActiveDB("collection_cb")
	def collection_cb;

	@Service("DateService")
	def dateSvc;

	@Service("SequenceService")
	def seqSvc;

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];

		if (!params.state) cols << [name: 'state', caption: 'Status'];

		cols << [name: 'controlno', caption: 'Control No.'];
		cols << [name: 'reftype', caption: 'Ref. Type'];
		cols << [name: 'txndate', caption: 'Date', type: 'date', outputFormat: 'MMM-dd-yyyy'];
		cols << [name: 'passbook.acctno', caption: 'Acct. No.'];
		cols << [name: 'passbook.acctname', caption: 'Acct. Name'];

		return cols;
	}

	@ProxyMethod
	public def getStates() {
		return [
			[caption: 'All'],
			[caption: 'DRAFT', state: 'DRAFT'],
			[caption: 'APPROVED', state: 'APPROVED'],
			[caption: 'CLOSED', state: 'CLOSED']
		]
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : '') + '%';
		if (params.state) {
			params._listMethod = 'getListByState';
		}
	}

	void validate( data ) {
		if (data.type == 'check' && !data.checks) 
			throw new Exception("At least 1 check is required.");

		if (data.type == 'cash' && !data.cbs)
			throw new Exception("At least 1 cash breakdown sheet is required.");
	}

	void beforeCreate( data ) {
		//validate(data);

		data.dtcreated = dateSvc.serverDate;
		data.author = [objid: env.USERID, name: env.NAME];
		//def year = dateSvc.getServerYear().toString();
		//def seqname = "depositslip" + year;
		//data.controlno = "DS" + year[2] + year[3] + seqSvc.getNextFormattedSeriesA(seqname, 7);
	}

	void beforeUpdate( data ) {
		//validate(data);
	}

	void afterCreate( data ) {
		addInfo(data);
	}

	void afterUpdate( data ) {
		addInfo(data);
	}

	private void addInfo( data ) {
		data._removedcbs?.each{ o->
			em.delete(o, 'cbs');
		}

		data._addedcbs?.each{ o->
			em.create(o, 'cbs');
		}

		data._removedcheck?.each{ o->
			em.delete(o, 'check');
		}

		data._addedcheck?.each{ o->
			em.create(o, 'check');
		}
		/*
		data._cbsdeleted.each{ o->
			em.delete(o, "cbs");
		}
		data._cbsadded.each{ o->
			em.create(o, "cbs");
		}
		data._checkdeleted.each{ o->
			em.delete(o, "check");
		}
		data._checkadded.each{ o->
			em.create(o, "check");
		}
		*/


		/*if (data.type == 'cash') {
			def cb = collection_cb.read(data.cashbreakdown);
			if (!cb) {
				cb = [
					objid 		: data.cashbreakdown.objid,
					dtfiled 	: dateSvc.serverDate,
					author		: [objid: env.USERID, name: env.NAME],
					txndate 	: data.txndate,
					collector	: [objid: env.USERID, name: env.NAME],
					collection 	: [objid: data.objid, type: 'DEPOSIT'],
					group		: [objid: data.objid, type: 'deposit'],
					cbsno 		: 'CBS' + data.controlno
				];
				collection_cb.create(cb);
			}

			def items = data.cashbreakdown.items;
			def detail;
			items.each{ o->
				detail = collection_cb.read([objid: (o.objid? o.objid : '')], "cb-detail");
				if (!detail) {
					detail = [
						objid 		: 'CBDTL' + new UID(),
						parentid	: cb.objid,
						denomination: o.denomination,
						qty			: o.qty,
						amount		: o.amount
					];
					collection_cb.create(detail, "cb-detail");
				}
			}
		} else if (data.type == 'check') {
			def item;
			data.checks.each{ o->
				item = em.read(o, "check");
				if (!item) em.create(o, "check");
			}
		}*/
	}

	private void validateBeforeApprove( params ) {
		if (!params.checks && !params.cbs) {
			throw new Exception('Please specify at least 1 check or 1 cash breakdown sheet.')
		}
		/*
		if (params.type == 'check' && !params.checks) {
			throw new Exception("At least 1 check is required.");
		}

		if (params.type == 'cash' && !params.cbs) {
			throw new Exception("At least 1 cash breakdown sheet is required.");
		}
		*/
	}

	@ProxyMethod
	public def approveDocument( params ) {
		validateBeforeApprove(params);
		def data = changeState(params, 'APPROVED');

		addInfo(params);
		//throw new Exception('stopping');

		return open(data);
	}

	private def changeState( params, state ) {
		def data = em.read(params);
		if (!data) throw new Exception('Deposit slip record does not exist or has already been deleted.');

		if (data.state == state) {
			throw new Exception('Deposit slip record already ' + state + '.');
		}

		data.state = state;
		em.update(data);

		return open(data);
	}

	void afterOpen( data ) {
		data.checks = em.getChecks(data);
		data.cbs = em.getCbs(data);

		data.items = [];

		data?.cbs?.each{ o->
			//o._filetype = "cashbreakdown";
			if (o.isencashed == 0) {
				o.items = collection_cb.getDetails([objid: o.cbsid]);
				def m;
				o.items.each{ i->
					m = data.items.find{ it.denomination == i.denomination }
					if (!m) {
						data.items.add(i);
					} else {
						m.qty += i.qty;
						m.amount += i.amount;
					}
				}
			}
		}
		//data.items.each{ println it; }
		/*if (data.type == 'cash') {
			def params = [
				collectionid: data.objid,
				groupid		: data.objid,
				grouptype 	: 'deposit'
			]
			data.cashbreakdown = collection_cb.findCashbreakdown(params);

			if (data.cashbreakdown) {
				def items = collection_cb.getDetails(data.cashbreakdown);
				data.cashbreakdown.items = items;
			}
		} else if (data.type == 'check') {
			data.checks = em.getChecks(data);
			data.cashbreakdown = [items: []];
		}*/


	}

	/*
	@ProxyMethod
	public def safekeep( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Record does not exist or has already been deleted.");

		data.state = 'CLOSED';
		data.reftype = 'SAFE_KEEP';
		em.update(data);

		data.dtsafekeeped = dateSvc.serverDate;
		data.safekeepedby = [objid: env.USERID, name: env.NAME];
		em.create(data, "safekeep");

		return open(data);
	}

	@ProxyMethod
	public def checkout( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Record does not exist or has already been deleted.");

		data.state = 'APPROVED';
		data.reftype = null;
		em.update(data);
		em.delete(data, "safekeep");

		return open(data);
	}

	@ProxyMethod
	public def deposit( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Record does not exist or has already been deleted.");

		data.state = 'CLOSED';
		data.reftype = 'DEPOSIT';
		em.update(data);

		data.dtdeposited = dateSvc.serverDate;
		data.depositedby = [objid: env.USERID, name: env.NAME];
		data.teller = params.teller;
		em.create(data, "deposit");
		//em.delete(data, "")

		return open(data);
	}

	@ProxyMethod
	public def reinstate( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Record does not exist or has already been deleted.");

		data.state = 'APPROVED';
		data.reftype = null;
		em.update(data);
		em.delete(data, "deposit");

		return open(data);
	}
	*/
}