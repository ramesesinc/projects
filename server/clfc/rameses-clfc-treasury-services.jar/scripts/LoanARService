import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class LoanARService extends ActiveCrudListService
{
	@Env
	def env;

	@ActiveDB("loan_ar")
	def em;

	@ActiveDB("receivable")
	def receivable;

	@ActiveDB('datatxnlog')
	def txnlog; 

	@ActiveDB('var')
	def var;

	@Service("DateService")
	def dateSvc;

	@Service("InboxService")
	def inboxSvc;

	@Service("BranchService")
	def branchSvc;

	@Service("SequenceService")
	def seqSvc;

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];
		if (!params.state) cols << [name: 'txnstate', caption: 'Status'];
		cols << [name: 'txndate', caption: 'Date', type: 'date', outputFormat: 'MMM-dd-yyyy'];
		cols << [name: 'refno', caption: 'RefNo'];
		cols << [name: 'check.no', caption: 'CheckNo'];
		cols << [name: 'check.date', caption: 'CheckDate', type: 'date', outputFormat: 'MMM-dd-yyyy'];
		cols << [name: 'totalamount', caption: 'Total', type: 'decimal', format: '#,##0.00'];
		return cols;
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : '') + '%';
		if (params.txnstate) {
			params._listMethod = 'getListByState';
		}
	}

	private void validate( data ) {
		if (!data.items) throw new Exception("At least 1 item is required.");
		/*
		def pettycashthreshold = getPettyCashThreshold();
		if (data.totalamount > pettycashthreshold) {
			if (!data.check || !data.check.no)
				throw new Exception("Please specify check info.")
		}
		*/
	}

	private void resolve( data ) {
		def pettycashthreshold = getPettyCashThreshold();
		if (data.totalamount <= pettycashthreshold) {
			data.check = [:];
		}
	}

	void beforeCreate( data ) {
		validate(data);
		def date = dateSvc.getServerDateAsString();
		data.dtcreated = date;
		data.author = [objid: env.USERID, name: env.NAME];
		if (!data.txnstate) data.txnstate = 'DRAFT';
		if (!data.txndate) data.txndate = date.split(" ")[0];


		def branch = branchSvc.open([:]);

		data.branchid = branch.code;

		def year = dateSvc.getServerYear().toString();//date.year + "";
		def seqname = 'loanar' + year;
		def prefix = 'AR' + (branch? branch.code : '') + year[2] + year[3];
		data.refno = prefix + seqSvc.getNextFormattedSeriesA(seqname, 6);

		//resolve(data);
	}

	void afterCreate( data ) {
		updateItems(data);
	}

	void beforeUpdate( data ) {
		validate(data);
		//resolve(data);
	}

	void afterUpdate( data ) {
		updateItems(data);
	}

	private void updateItems( data ) {
		data._removed.each{ o->
			em.delete(o, 'ar-detail');
		}

		data._added.each{ o->
			if (!o.objid) o.objid = 'LARD' + new UID();
			if (!o.parentid) o.parentid = data.objid;
			em.create(o, 'ar-detail');
		}

		data.items.each{ o->
			if (o._edited==true) em.update(o, 'ar-detail');
		}
	}

	@ProxyMethod
	public def getOptionList() {
		return ["cash", "check"];
	}

	/*
	private void updateDetail( data ) {
		data._removed.each{ o->
			em.delete(o, "ar-detail");
		}

		data._added.each{ o->
			if (!o.objid) o.objid = 'LARD' + new UID();
			if (!o.parentid) o.parentid = data.objid;
			em.create(o, "ar-detail");
		}

		data.items.each{ o->
			if (o._edited==true) em.update(o, 'ar-detail');
		}

		data.items = em.getItems(data);
	}
	*/

	void afterOpen( data ) {
		data.items = em.getItems(data);
	}

	@ProxyMethod
	public def submitForApproval( params ) {
		def data = changeState(params, 'FOR_APPROVAL');

		def message = 'For approval of AR Request with RefNo. ' + data.refno;
		if (data.check?.no) {
			message += ' - CheckNo. ' + data.check.no + ' ' + data.check.date;
		}
		message += '.';

		def msginfo = [ 
			objid 		: data.objid, 
			dtcreated	: dateSvc.serverDate, 
			refid 		: data.objid, 
			filetype 	: 'loanar', 
			message 	: message,
			senderid	: env.USERID, 
			sendername 	: env.NAME, 
			recipientid : 'APPROVER' 
		]; 
		inboxSvc.addMessage( msginfo );

		return data;
	}


	private def changeState( params, state ) {
		def data = em.read(params);
		if (!data) throw new Exception("AR request record does not exist or has already been deleted.");

		if (data.txnstate == state)
			throw new Exception("AR already ${state}.");

		data.txnstate = state;
		em.changeState(data);

		def action, remarks;
		switch (state.toUpperCase()) {
			case 'APPROVED'		: 	action = 'APPROVE';
									remarks = 'AR approved.';
									break;
			case 'DISAPPROVED' 	: 	action = 'DISAPPROVE';
									remarks = 'AR disapproved.';
									break;
			case 'FOR_APPROVAL' : 	action = 'FOR APPROVAL';
									remarks = 'AR submitted for approval';
									break;
			case 'FOR_VERIFICATION':action = 'FOR VERIFICATION';
									remarks = 'AR submitted for verification';
									break;
			case 'VERIFIED'		: 	action = 'VERIFY';
									remarks = 'AR verified';
									break;
			case 'FOR_LIQUIDATION': action = 'FOR LIQUIDATION';
									remarks = "AR submitted for liquidation";
									break;
		}

		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : dateSvc.serverDate, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: action, 
			remarks : remarks
		]; 
		txnlog.create( loginfo ); 

		return open(data);
	}

	@ProxyMethod
	public def approveDocument( params ) {
		return postImpl(params, 'APPROVED');
		/*
		def data = postImpl(params, 'APPROVED');

		def item, detail;
		data.items.each{ o->
			item = receivable([objid: o.objid]);
			if (!item) {
				item = [
					objid	: o.objid,
					refid 	: o.objid,
					reftype : data.txntype,
					totaldr : o.amount,
					totalcr : 0,
					balance	: o.amount
				];
				receivable.create(item);
			}

			detail = receivable.read([objid: o.objid], 'detail');
			if (!detail) {
				detail = [
					objid	: o.objid,
					parentid: item.objid,
					txndate : data.txndate,
					txnrefid: o.objid,
					txnrefno: data.refno,
					dr 		: o.amount,
					cr 		: 0
				];
				receivable.create(detail, 'detail');
			}
		}

		return data;
		*/
	}

	@ProxyMethod
	public def disapprove( params ) {
		return postImpl(params, 'DISAPPROVED');
	}

	private def postImpl( params, state ) {
		def data = changeState(params, state);

		data.dtposted = dateSvc.serverDate;
		data.poster = [objid: env.USERID, name: env.NAME];
		em.update(data, 'ar-post');

		inboxSvc.removeMessageByRefid([refid: data.objid]); 

		return open(data);
	}

	@ProxyMethod
	public def submitForLiquidation( params ) {
		def data = changeState(params, 'FOR_LIQUIDATION');
		if (data.txntype == 'check') {
			data.check = params.check;
			if (!data.check) throw new Exception("Please specify check information.");
			em.update(data, 'ar-check');
		}
		return open(data);
	}

	@ProxyMethod
	public def verify( params ) {
		def data = changeState(params, 'VERIFIED');

		data.dtverified = dateSvc.serverDate;
		data.verifier = [objid: env.USERID, name: env.NAME];
		em.update(data, 'ar-verify');

		inboxSvc.removeMessageByRefid([refid: data.objid]); 

		return open(data);
	}

	/*
	@ProxyMethod
	public def getPettyCashThreshold() {
		def sysvar = var.read([name: 'petty_cash_threshold']);
		if (!sysvar && !sysvar.value) return 0;

		def val;
		try {
			val = new BigDecimal(sysvar.value).setScale(2);
		} catch (Throwable t) {
			val = 0;
		}
		return (val? val : 0);
	}
	*/
}