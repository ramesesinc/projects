import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class LoanReceivableService extends ActiveListService
{
	@ActiveDB("loanapp_receivable")
	def em;

	@ActiveDB("loanapp")
	def loanapp;

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];
		if (!params.state) cols << [name: 'txnstate', caption: 'Status'];
		cols << [name: 'loanapp.appno', caption: 'AppNo'];
		cols << [name: 'borrower.name', caption: 'Borrower'];
		cols << [name: 'description', caption: 'Description'];
		cols << [name: 'amount', caption: 'Amount', type: 'decimal', format: '#,##0.00'];
		return cols;
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : '') + '%';
		if (params.txnstate) {
			params._listMethod = 'getListByState';
		}
	}

	void afterList( params, list ) {
		list.each{ o->
			o.filetype = 'loanreceivable';
			if (o.txntype=='CAPTURE') o.filetype = 'loanreceivablecapture';
		}
	}

	@ProxyMethod
	public def open( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Receivable record does not exist or has already been deleted.");

		def app = loanapp.read([objid: data.loanappid]);
		if (!app) throw new Exception("Loanapp record does not exist or has already been deleted.");

		data.loanapp = [objid: app.objid, appno: app.appno];
		data.borrower = app.borrower;

		return data;
	}

	/*

	private def changeState( params, state ) {
		if (data.txnstate == state)
			throw new Exception("AR Request Liquidation already ${state}.");

		data.txnstate = state;
		em.changeState(data);

		def action, remarks;
		switch (state.toUpperCase()) {
			case 'VOID_PENDING'	: 	action = 'VOID REQUEST';
									remarks = 'Receivable void request for approval';
									break;
			case 'VOIDED'		: 	action = 'VOIDED';
									remarks = 'Receivable voided';
									break;
			case 'ACTIVE'		: 	action = 'ACTIVE';
									remarks = 'Receivable activated';
									break;
		}

		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : dateSvc.serverDate, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: action, 
			remarks : remarks
		]; 
		txnlog.create( loginfo ); 

		return open(data);
	}
	*/
}