import com.rameses.common.*;
import com.rameses.annotations.*;
import java.text.*;

class AmnestyTask
{
	@ActiveDB('amnesty')
	def em; 

	@ActiveDB("loan_ledger")
	def ledger;

	@ActiveDB("loan_ledger_payment")
	def ledger_payment;

	@ActiveDB("loanapp")
	def loanapp;

	@ActiveDB("loan_ledger_proceeds")
	def proceeds;

	@ActiveDB('ledgeramnesty')
	def ledgeramnesty;

	@ActiveDB('ledgeramnesty_fix')
	def ledgeramnesty_fix;

	@Service('DateService')
	def dateSvc;

	@Service("LoanPaymentService")
	def paymentSvc;


	private def dateFormat = new SimpleDateFormat('yyyy-MM-dd');

	//@Schedule(interval=15) 
	public void updateExpiredAmnesty( task ) {
		def currentdate = dateSvc.serverDate;

		def cal = Calendar.getInstance();
		cal.setTime(currentdate);
		cal.add(Calendar.DATE, -1);
		def date = dateFormat.format(cal.getTime());

		def list = ledgeramnesty.getActiveAmnestyByEndDateAndType([enddate: date, type: 'FIX']);
		list?.each{ o->
			if (o.type == 'FIX') {
				processFix(o);
			}

		}
	}

	public void processFix( amnesty ) {
		def am = ledgeramnesty_fix.read([objid: amnesty.refid]);
		if (am) {
			def list = ledgeramnesty_fix.getItems(am);
			def item = list?.find{ it.objid == am.refid }
			if (item) {
				def xlist = list?.findAll{ it.index > item.index }
				if (xlist) {
					xlist?.sort{ it.index }
					def xitem = xlist[0];
					if (xitem) {
						xitem = ledgeramnesty_fix.read(xitem, 'item');

						am.refid = xitem.objid;
						am.type = xitem.type;
						am.description = xitem.description;

						def amtpaid = am.amount - am.balance;
						if (!amtpaid) amtpaid = 0;

						am.amount = xitem.amount;
						am.balance = am.amount - amtpaid;

						def cal = Calendar.getInstance();
						cal.setTime(parseDate(am.dtstarted));

						if (xitem.usedate == 1) {
							cal.setTime(parseDate(xitem.date));
						} else {
							if (xitem.months > 0) cal.add(Calendar.MONTH, xitem.months);
							if (xitem.days > 0) cal.add(Calendar.DATE, xitem.days);
						}

						am.dtended = dateFormat.format(cal.getTime());

						ledgeramnesty_fix.update(am);

						amnesty.dtstarted = am.dtstarted;
						amnesty.dtended = am.dtended;
						amnesty.description = am.description;
						ledgeramnesty.update(amnesty, 'active');
					}

				}
			}
		}
	}

	private def parseDate( date ) {
		if (!date) return null;

		if (date instanceof Date) {
			return date;
		} else {
			return java.sql.Date.valueOf(date);
		}
	}


	//@Schedule(interval=1, timeUnit="DAYS", immediate=true) 
	public void removeExpiredAmnesty( task ) {	
		println 'removing expired amnesty';
		/*def list = em.getActiveExpiredAmnesty();
		list.each{ o->
			ledger.removeLedgerDetailByParentidAndAmnestyid([parentid: o.ledgerid, amnestyid: o.objid]);

			rebuild([objid: o.ledgerid]);
		}*/
		/*def params = [_start:0, _limit: 25]; 
		def list = em.getActiveExpiredList( params ); 
		list.each { 
			em.delete(it, 'active'); 
			def info = em.read(it); 
			info.state = 'CLOSED';
			info.dtposted = dateSvc.serverDate;
			info.postedby = 'SYSTEM'; 
			info.postedremarks = 'SYSTEM CLOSED';
			em.update(info); 
		}*/

	} 

	/*
	private void rebuild( data ) {
		def l = ledger.read(data);
		ledger.removeLedgerDetail([parentid: l.objid]);
		
		l.state = 'OPEN';
		l.balance = l.loanamount;
		l.overpaymentamount = 0.00;
		l.overduepenalty = 0.00;
		l.dtlastpaid = null;
		l.dtcurrentschedule = l.dtstarted
		ledger.update(l);
		loanapp.update([objid: l.appid, state: 'RELEASED']);
		loanapp.update([objid: l.appid, state: 'RELEASED'], 'loanapp_search');

		def payments = ledger_payment.getList(l);
		def info;
		payments.each{ o->
			info = em.serializer.read(o.info);
			if (info) o.putAll(info);
		}

		def adjustments = adjustment.getListByLedgerid([ledgerid: ledger.objid]);
		adjustments.each{ o->
			def item = [
				txndate		: o.txndate,
				amount 		: o.amount,
				isadjustment: true	
			];
			payments.add(item);
		}

		payments.sort{ it.txndate.toString()+''+(it.refno? it.refno : '') }
		payments.each{
			//println it;
			def itm = [
			    appno 		: l.appno,
			    appid 		: l.appid,
			    borrowername: l.acctname,
			    refid 		: it.objid,
			    refno 		: it.refno,
			    txndate 	: it.txndate,
			    payamount 	: it.amount,
			    isadjustment: (it.isadjustment? it.isadjustment : false)
			]
			//println itm;
			def i = proceeds.findByRefid([refid: it.objid]);
			if (i) itm.isproceedcollection = true;
			paymentSvc.postPayment(itm);
			//if (!it.parentid) it.parentid = data.objid;
			//if (it._edited) ledgerdb.update(it, "payment");
			/*if (it._edited) {
				it.remove('_edited');
				em.updateLedgerPayment(it);
				//em.save(it, "payment");	
			}
		}
		//data.ledgerid = data.objid;
		// = ledgerSvc.open(data);
		//data.payments = getList(data);
		//return data;
	}
	*/
}