import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;

class AklanTerminalCollectionTypeInterceptor 
{
	@ActiveDB('collectiontype_account')
	def acct;

	
	@Service('ReportParameterService')
	def paramSvc;

	@Service('AklanTerminalTicketService')
	def ticketSvc;

	@Service('DateService')
	def dateSvc;


	@After(pattern="CashReceiptService.init", index=300, eval="#{result.collectiontype.handler == 'aklanterminal'}")
	public def initNew(def evt) { 
		def r = evt.result;
		def z = acct.findAccount([objid: r.collectiontype.objid] );
		if( !z)
			throw new Exception("Account not found for aklanterminal handler. Please define at least one account in collection type")
		def item = [objid:'RCTITEM'+new UID(), item:z.account, amount: 0];
		r.items << item;
		r.paidbyaddress = paramSvc.getStandardParameter().LGUADDRESS;
		r.numadult = 0;
		r.numchildren = 0;
		r.paidby = 'GUEST';
		r.rate = z.defaultvalue;
		if(!r.rate) 
			throw new Exception("Please indicdate default value in collection type account");
	}

	@After(pattern="CashReceiptService.post", eval="#{result.collectiontype.handler == 'aklanterminal'}")
	public def postCashReceipt(def evt) { 
		def r = evt.args[0];
		def d = dateSvc.getServerDate();

		if( r.numadult > 0 ) {
			(1..r.numadult).each {
				def z = [:];
				z.guesttype = 'A';
				z.dtfiled = d;
				z.refid = r.objid;
				z.reftype = 'cashreceipt';
				ticketSvc.create( z );
			}	
		}
		if( r.numchildren > 0 ) {
			(1..r.numchildren).each {
				def z = [:];
				z.guesttype = 'C';
				z.dtfiled = d;
				z.refid = r.objid;
				z.reftype = 'cashreceipt';
				ticketSvc.create( z );
			}	
		}
	}
	



}
