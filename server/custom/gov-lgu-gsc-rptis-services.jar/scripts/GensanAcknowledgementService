import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class GensanAcknowledgementService
{
	@Service('SequenceService')
	def seqSvc

	@Service('OrgService')
	def orgSvc 	

	@DataContext('rptacknowledgement_item')
	def em_tracking

	@DataContext('faas_list')
	def em_faas_list


	@ProxyMethod
	public def getNextAcknowledgementSeries() {
		def orgcode =  getRootCode() 
		def key = 'RPTACKNOWLEDGEMENT-' + orgcode
		return  'RA' + orgcode + seqSvc.getNextFormattedSeries(key)
	}

	@ProxyMethod
	public def getNextTrackingSeries() {
		def orgcode =  getRootCode() 
		def key = 'RPTTRACKING-' + orgcode
		return  'RT' + orgcode + seqSvc.getNextFormattedSeries(key)
	}

	@ProxyMethod
	public def getRootCode() {
		def org = orgSvc.getRoot()
		return org.code.replaceAll('-','') 
	}	

	@ProxyMethod
	public def assignTracking(param) {
		def tracking = em_tracking.find([trackingno: param.trackingno]).first()
		if (!tracking) {
			throw new Exception('Tracking ' + param.trackingno + ' does not exist.')
		}
		if (tracking.ref && tracking.ref.objid) {
			throw new Exception('Tracking ' + param.trackingno + ' is already assigned to ' + param.reftype + ' ' + param.refno + '.')
		}
		tracking.ref = param.ref
		tracking.reftype = param.reftype 
		tracking.refno = param.refno 
		em_tracking.update(tracking)
		if (param.reftype == 'faas') {
			tracking.newfaas = tracking.ref 
			em_tracking.update(tracking)
			em_faas_list.find([objid: tracking.newfaas.objid]).update([trackingno: tracking.trackingno])
		}
		return tracking 
	}
	
}

