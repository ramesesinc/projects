import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class GensanRPTTrackingInterceptor
{
	@Service('GensanAcknowledgementService')
	def svc

	@DataContext('rptacknowledgement')
	def em_acknowledgement

	@DataContext('rptacknowledgement_item')
	def em_tracking

	@DataContext('faas_previous')
	def em_faas_previous

	@DataContext('faas_list')
	def em_faas_list

	@DataContext('subdivision')
	def em_subdivision

	@DataContext('subdivision_motherland')
	def em_motherland


	/*========================================================
	** FAAS 
	========================================================*/
	
	@After(pattern='FAASService.initOnlineTransaction', index=1000000)
	public void afterCreateFaas(evt){
		def faas = evt.result
		
		faas.previousfaases.each {
			def tracking = em_tracking.find([ref_objid: it.prevfaasid]).first() 
			if (tracking) {
				tracking.newfaas = [objid: faas.objid]
				em_tracking.update(tracking)
				em_faas_list.find([objid: faas.objid]).update([trackingno: tracking.trackingno])
			}
		}
	}


	@Before(pattern='FAASService.deleteFaas', index=1000000)
	public void beforeDeleteFaas(evt){
		def faas = evt.args[0]

		em_faas_previous.find([faasid: faas.objid]).list().each {
			em_tracking.find([ref_objid: it.prevfaasid]).update([newfaas_objid: null])	
		}
	}


	/*========================================================
	** SUBDIVISION
	========================================================*/
	@After(pattern='SubdivisionService.addMotherLand', index=1000000)
	public void addMotherLand(evt){
		def land = evt.result
		
		//load motherland tracking info
		def tracking = em_tracking.find([ref_objid: land.landfaasid]).first()
		if (tracking) {
			def subdivision = em_subdivision.find([objid: land.subdivisionid]).first()
			def subtracking = em_tracking.find([ref_objid: subdivision.objid]).first()
			if (!subtracking) {
				//add tracking for the subdivision
				tracking.objid = null
				tracking.reftype = 'subdivision'
				tracking.refno = subdivision.txnno
				tracking.trackingno = svc.getNextTrackingSeries()
				tracking.ref = [objid: subdivision.objid]
				tracking.newfaas = null
				em_tracking.create(tracking)
			}

		}

	}

	@After(pattern='SubdivisionService.createSubdividedLand', index=1000000)
	public void createSubdividedLand(evt){
		def land = evt.result

		def motherland = em_motherland.find([subdivisionid: land.subdivisionid]).first()
		if (motherland) {
			//load motherland tracking info
			def tracking = em_tracking.find([ref_objid: motherland.landfaasid]).first()
			if (tracking) {
				//add tracking for the subdividedland 
				tracking.objid = null
				tracking.reftype = 'faas'
				tracking.refno = 'NEW'
				tracking.trackingno = svc.getNextTrackingSeries()
				tracking.ref = [objid: land.newfaasid]
				tracking.newfaas = [objid: land.newfaasid]
				em_tracking.create(tracking)
				em_faas_list.find([objid: land.newfaasid]).update([trackingno: tracking.trackingno])
			}
		}

	}

	@Before(pattern='SubdivisionService.deleteSubdividedLand', index=1000000)
	public void deleteSubdividedLand(evt){
		def land = evt.args[0]
		em_tracking.find([ref_objid: land.newfaasid]).delete()
	}
	
}

