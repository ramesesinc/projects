import com.rameses.annotations.*;
import com.rameses.common.*;

class BPApplicationListingReportService {
	
	@Service('NumberService')
	def numSvc;
	
	@ActiveDB("bpreport")
	def em;

	@ActiveDB("bpapplication_report")
	def bpapplication_report; 

	@Service("LOVService")
    def LOV;

    @Async
	@ProxyMethod
	public def getReport( params ) { 
		params.filter = ''; 

		def buffer = []; 
		if ( params.state_info ) { 
			params.state_info = 'INFO'; 
			buffer << '''$P{state_info}''';
		} 
		if ( params.state_assessment ) { 
			params.state_assessment = 'ASSESSMENT'; 
			buffer << '''$P{state_assessment}''';
		} 
		if ( params.state_payment ) { 
			params.state_payment = 'PAYMENT'; 
			buffer << '''$P{state_payment}''';
		} 
		if ( params.state_release ) { 
			params.state_release = 'RELEASE'; 
			buffer << '''$P{state_release}''';
		} 
		if ( params.state_completed ) { 
			params.state_completed = 'COMPLETED'; 
			buffer << '''$P{state_completed}''';
		} 
		if ( buffer ) {
			params.filter += " AND a.state IN (" + buffer.join(',') + ")"; 
		} 

		buffer.clear();
		if ( params.type_new ) {
			params.type_new = 'NEW';
			buffer << '''$P{type_new}''';
		} 
		if ( params.type_renew ) {
			params.type_renew = 'RENEW';
			buffer << '''$P{type_renew}''';
		} 	
		if ( params.type_retire ) {
			params.type_retire = 'RETIRE';
			buffer << '''$P{type_retire}''';
		} 				
		if ( buffer ) {  
			params.filter += " AND alob.assessmenttype IN (" + buffer.join(',') + ")";
		} 

		if( params.barangay?.objid ) {
			params.barangayid = params.barangay.objid;
			params.filter = ''' AND ba.barangay_objid = $P{barangayid} ''';
		}
		if( params.classification?.objid ) {
			params.classificationid =  params.classification.objid;
			params.filter += ''' AND lob.classification_objid = $P{classificationid} ''';
		}
		if( params.lob?.objid ) {
			params.lobid = params.lob.objid;
			params.filter += ''' AND lob.objid = $P{lobid} ''';
		}
		if ( params.permittype?.objid ) { 
			params.permittypeid = params.permittype.objid; 
			params.filter += ''' AND b.permittype = $P{permittypeid} '''; 	
		} 

		def zlist = bpapplication_report.getList( params );
		if ( !zlist ) throw new Exception('No records found.');

		return zlist;	
	} 

	@ProxyMethod
	public def getApplicationStates() {
		return LOV.BUSINESS_APPLICATION_STATES*.key
	}

}