import com.rameses.annotations.*; 

class BPDelinquencyReportService {
	
	@DataContext('report_bpdelinquency') 
	def reportdb; 

	@Env 
	def env; 

	@Service('DateService') 
	def dateSvc; 

	@ProxyMethod
	public def getStatus() { 
		return [
			current : reportdb.find([ state: 'APPROVED' ]).orderBy('dtfiled desc').first(), 
			pending : reportdb.find([ state: 'DRAFT' ]).orderBy('dtfiled desc').first() 
		]; 		
	} 

	@ProxyMethod 
	public def init( params ) { 
		def o = [ 
			username : (env.FULLNAME ? env.FULLNAME : params.username),  
			userid   : (env.USERID ? env.USERID : params.userid), 
			objid    : 'REPORT'+ new java.rmi.server.UID(), 
			dtfiled  : dateSvc.getServerDate(),
			state    : 'DRAFT' 
		]; 
		reportdb.create( o ); 
		return o; 
	} 

	@ProxyMethod 
	public def build( params ) { 
		if ( !params.reportid ) throw new Exception('reportid parameter is required');

		def o = reportdb.find([ objid: params.reportid ]).first(); 
		if ( !o ) throw new Exception('Report data does not exist'); 

		o.reportid = params.reportid; 
		reportdb.build( o ); 
		o.barangays = reportdb.getBarangays(); 
		return o; 
	} 

}