import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

public class ChangeBusinessAddressApplicationInterceptor {

	@Env
	def env;

	@Service("DateService")
	def dateSvc;

	@Service("BusinessMasterService")
	def bizSvc;

	@Service("BusinessAddressService")
	def bizAddress;

	@ActiveDB("business_application")
	def business_application;

	@After(pattern="BusinessApplicationService.initNew", eval="#{ args[0].apptype == 'CHANGE_BUSINESS_ADDRESS' }")
	public void initNew(def evt) { 
		def app = evt.result;

		def apps = business_application.getOpenApplications( [businessid: app.business.objid, filter: '' ] );
		if(apps.size() > 0 ) app.has_processing = true; 

		app.objid = 'BCHGADDR' + new UID();
		app.txnmode = 'ONLINE';

		if(!app.business.objid) throw new Exception("Please specify a business");

		//retrieve business first
        def b = bizSvc.open(app.business);

		def currentYear = dateSvc.getServerYear();
		def activeYear = b.activeyear;

		if(activeYear<(currentYear-1))
			throw new Exception("This business has delinquency for previous years. Please got to Assessor's office to process delinquency first");

		if( b.state == 'CANCELLED') 
			throw new Exception("Business already cancelled");	

		if( b.state == 'RETIRED') 
			throw new Exception("Business already retired");	

		app.business =  b;
        app.appyear = dateSvc.getServerYear();
        app.old_address = b.address.text;
	}

	@Before(pattern="BusinessApplicationService.create", eval="#{ args[0].apptype == 'CHANGE_BUSINESS_ADDRESS'  }")
	public void beforeCreate(def evt) { 
		def app = evt.args[0];
		if(app.old_address == app.business.address.text )
			throw new Exception("There are no changes made. Application not saved");

		def b = bizSvc.open(app.business);
		app.appno = b.bin +  "-" + b.appcount + 'CA';
		app.state = 'COMPLETED';
		app.remarks = 'CHANGE ADDRESS:' + app.old_address + " to " + app.business.address.text; 
		bizSvc.updateOnApply( b );
	}

	@After(pattern="BusinessApplicationService.create", eval="#{ args[0].apptype == 'CHANGE_BUSINESS_ADDRESS' }")
	public void afterCreate(def evt) { 
		def o = evt.result;
		if(o.changetype == 'new') {
			o.business.address.businessid = o.business.objid;
			def a = bizAddress.create( o.business.address );
			o.business.address = a;
		}
		else {
			bizAddress.update( o.business.address );			
		}
		business_application.updateOpenApplicationsBusinessAddress([businessid: o.business.objid, businessaddress: o.business.address.text]);	
		bizSvc.update(o.business);
	}



}