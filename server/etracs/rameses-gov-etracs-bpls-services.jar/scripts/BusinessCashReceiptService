import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*

public class BusinessCashReceiptService  {

	@ActiveDB("business_receivable")
	def receivable;

	@Service("BusinessBillingService")
	def billingSvc;
	
	@Service("BusinessLobService")
	def lobSvc;
	
	@Service("BusinessTaxCreditService")
	def taxCreditSvc;

	@ActiveDB("business")
	def business;

	@ActiveDB("business_application")
	def app;

	@Service("NumberService")
	def numSvc;

	@Service("DateService")
	def dateSvc;


	@ProxyMethod
	public def getBusinessList(o) {
		if(!o.bin && !o.businessname && !o.ownername) return [];

		def sb = new StringBuilder();
		if( o.bin ) {
			o.bin += "%";
			sb.append( ''' AND b.bin LIKE $P{bin} ''' );
		}	
		if( o.businessname ) {
			o.businessname += "%";
			sb.append( ''' AND b.businessname LIKE $P{businessname} ''' );
		}
		if( o.ownername ) {
			o.ownername += "%";
			sb.append( ''' AND b.owner_name LIKE $P{ownername} ''' );
		}
		o.filter = sb.toString();
		return receivable.getBusinessListForBilling( o );
	}

	@ProxyMethod
	public def getAppList( params ) { 
		if ( !params.businessid ) throw new Exception("businessid must not be null"); 

		return receivable.getAppListForBilling( params ); 
	} 

	@ProxyMethod 
	public def findInfo( param ) { 
		def info = null; 
		if ( param.appno ) { 
			if (param.appno.contains('-')) { 
				info = app.findInfoByAppno( param ); 
			} else { 
				info = app.findInfoByBIN([ bin: param.appno ]); 
			} 
		} else if ( param.applicationid ) {
			info = app.findInfoByAppid( param ); 
		} 

		if (!info.state.toLowerCase().matches('payment|release|completed')) 
			throw new Exception('This application is not available for payment. Current state is ' + info.state);  

		def m = [:];
		m.payer = info.owner;
        m.paidby = info.owner.name + ' ('+info.businessname+')';
        m.paidbyaddress = info.address?.text;
        m.businessid = info.business?.objid;
        m.applicationid = info.objid;
        m.apptype = info.apptype;
        m.appyear = info.appyear;
        m.appno = info.appno; 
        m.dtfiled = info.dtfiled;

        def list = app.getDelinquentApplications([ businessid : m.businessid ]); 
        if ( list ) {
        	def dapp = list.first(); 
        	if ( dapp.applicationid != m.applicationid ) {
        		throw new Exception('This business is delinquent in '+ dapp.appyear +'. Please verify.'); 
        	}
        }
        return m; 
	}


	@ProxyMethod 
	public def getBillingForPayment( param ) { 
		if (!param.applicationid) throw new Exception('applicationid is required');

		def r = [applicationid: param.applicationid];
		r.filter = ''' ba.objid =$P{applicationid} ''';
		r.show_paid = false;
		r.taxfees = receivable.getBilling(r);
		if(!r.taxfees) throw new Exception("No unpaid items found");

		r.app = param.app; 
		r.billdate = param.billdate; 		
		r.payment = param.payment; 
		if (!r.payment) r.payment = [option:'FULLYEAR']; 

		def z = billingSvc.getBillingForPayment( r );
		def m = [:];		
		m.taxfees = z.taxfees.sort{ it.sortorder };
		m.expirydate = z.expirydate;
		m.nextbilldate = z.expirydate;
		m.totals = z.totals;
		m.items = z.items.sort{ it.sortorder };
		m.excess = z.excess; 
		return m;
	} 
}
