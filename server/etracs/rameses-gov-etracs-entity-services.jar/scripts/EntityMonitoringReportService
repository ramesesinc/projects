import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*;

class EntityMonitoringReportService {

	@ActiveDB('entity_report')
	def em

	@Service('DateService')
	def dtSvc 

	@ProxyMethod
	public def getEncodingStatistics( params ) {
		def sdate = params.year + '-'

		if (params.month.index < 10) 
			sdate += '0'
		sdate += params.month.index;

		if (params.day == null) {
			sdate += '-01'
		}
		else {
			sdate += '-'
			if (params.day < 10 )
				sdate += '0'
			sdate += params.day 
		}

		def fromdate = dtSvc.parse('yyyy-MM-dd', sdate);
		
		def todate = null
		if (params.day == null)
			todate = dtSvc.getMonthEndDate(fromdate)
		else 
			todate = dtSvc.add(fromdate, '1d')

		def items = em.getEncodingStatistics([fromdate:fromdate, todate:todate]).each{
			it.individualcnt = (Integer) it.individualcnt
			it.juridicalcnt = (Integer) it.juridicalcnt
			it.multiplecnt = (Integer) it.multiplecnt
			it.total = (Integer) it.total
		}

		return [
			title 	: buildTitle( params.year, params.qtr, params.month, params.day),
			period 	: buildPeriod(params),
			items 	: items
		]
	}

	def buildTitle( year, qtr, month, day) {
		if( day ) return 'Daily Entity Encoding Monitoring'
		if( month ) return 'Monthly Entity Encoding Monitoring'
		if( qtr ) return 'Quarterly Entity Encoding Monitoring'
	}

	@ProxyMethod
	public List getNumDays( year, month ) {
		if ( !month && month < 0 ) return []
		
		Calendar cal = Calendar.getInstance()
        cal.set( year, month, 1)
        int maxday = cal.getActualMaximum(cal.DAY_OF_MONTH)
		def numdays = []
		1.upto( maxday ) { numdays.add( it ) }
		return numdays 
	}

    private def buildPeriod( params ) { 
        def monthno = (params.month?.month ? params.month.month : params.month?.index); 
        if ( monthno > 0 ) {
			def months = [ 
			    [name:'JANUARY',    month:1, qtr:1 ],
			    [name:'FEBRUARY',   month:2, qtr:1 ],
			    [name:'MARCH',      month:3, qtr:1 ],		    
			    [name:'APRIL',  	month:4, qtr:2 ],
			    [name:'MAY',    	month:5, qtr:2 ],
			    [name:'JUNE',   	month:6, qtr:2 ],		    
			    [name:'JULY',       month:7, qtr:3 ],
			    [name:'AUGUST',     month:8, qtr:3 ],
			    [name:'SEPTEMBER',  month:9, qtr:3 ],
			    [name:'OCTOBER',    month:10, qtr:4 ],
			    [name:'NOVEMBER',   month:11, qtr:4 ],
			    [name:'DECEMBER',   month:12, qtr:4 ]
			]; 

			def mon = months.find{( it.month == monthno )}

        	if ( params.day ) {
				return 'For the day of '+ mon?.name +' '+ params.day +', '+ params.year;
    		} else {
				return 'For the Month of '+ mon?.name +', '+ params.year;
    		}
        } else if ( params.qtr ) { 
        	def qtrs = [ 
        		[qtr:1, name:'1ST QUARTER'],
        		[qtr:2, name:'2ND QUARTER'],
        		[qtr:3, name:'3RD QUARTER'],
        		[qtr:4, name:'4TH QUARTER']
        	]; 
        	def qtr = qtrs.find{( it.qtr == params.qtr )} 
        	return 'For the '+ qtr?.name +' of '+ params.year 
        } else { 
        	return 'For the Year ' + params.year; 
        } 
    }   

}
