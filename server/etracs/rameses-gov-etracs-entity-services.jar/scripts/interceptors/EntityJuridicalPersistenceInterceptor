import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID;
import com.rameses.util.*;
import com.rameses.io.*;
import com.rameses.services.extended.*;

class EntityJuridicalPersistenceInterceptor  {

	@Service('DateService')
	def dtSvc;

	@Service('SequenceService')
    def seqSvc;

	@Service("LOVService")
	def LOV;

	
	@DataContext("entity_address")
	def addressEm;

	@DataContext("entityjuridical")
	def entityEm;

	@Before(pattern="PersistenceService.(create|update)", eval="#{args[0]._schemaname == 'entityjuridical'}", index=100)
	public void beforeSave(def evt ) {
		def o = evt.args[0];
		o.entityname = o.name;
	}

	@Before(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'entityjuridical'}", index=101)
	public void beforeCreate(def evt ) {
		def o = evt.args[0];
		if(!o.address?.text) throw new Exception("Address is required");

		if ( !o.objid ) o.objid = "JUR"+new UID();
        if ( !o.entityno ) { 
            def seqno = seqSvc.getNextFormattedSeriesA( "JURIDICAL_ENTITY", 6 );
            if(o.prefix) {
                o.entityno = ''+ o.prefix + 'J' + seqno; 
            } else { 
                o.entityno = 'J' + seqno; 
            } 
        }
		o.type = 'JURIDICAL';
		//create the address first
		def addr = addressEm.create( o.address );
		o.address.objid = addr.objid;	
	}

	@After(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'entityjuridical'}")
	public void afterCreate(def evt ) {
		def o = evt.args[0];
		addressEm.find([objid: o.address.objid]).update([parentid: o.objid]);
	}


	@After(pattern="PersistenceService.read", eval="#{args[0]._schemaname == 'entityjuridical'}")
	public void afterOpen(def evt) {
		def o = evt.result;
		if( o.orgtype ) {
			o.orgtypename = LOV.ORG_TYPES[o.orgtype];
		}
	}

	@After( pattern="ListService.getList", eval="#{args[0].name == 'entitytype'}", index=10 )
	public void getEntityTypeList(def evt) {
		def list = evt.result;
		list << 'JURIDICAL'
	}


}
