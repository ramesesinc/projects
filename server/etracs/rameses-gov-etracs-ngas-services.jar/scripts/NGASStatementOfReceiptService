import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;

class NGASStatementOfReceiptService {

	@ActiveDB('ngas_report')
	def em; 

	@ActiveDB('fund')
	def fund; 

	@Service('DateService')
	def dtSvc;

	@Service('NumberService')
	def numSvc;	

	private def P_TYPE_DEFAULT     = [objid: 'ALL', name: '( Default )']; 
	private def P_TYPE_LIQUIDATION = [objid: 'BY_LIQUIDATION_DATE', name: 'By Liquidation Date']; 

	@ProxyMethod 
	public def getReportOptions() {
		return [ 
			funds        : getFunds(), 
			acctgroups   : getAcctGroups(), 
			months       : dtSvc.getMonthsByQtr(0), 
			postingTypes : [ P_TYPE_DEFAULT, P_TYPE_LIQUIDATION ] 
		]; 
	} 

	@ProxyMethod 
	public def getAcctGroups() {
		return em.getAcctGroups(); 
	}

	@ProxyMethod 
	public def getFunds() { 
		def list = fund.getAll(); 
		def results = [];
		list.findAll{ it.parentid==null }?.each{a-> 
			results.add( a ); 
			list.findAll{ it.parentid==a.objid }?.each{b-> 
				results.add( b ); 
				b.title = '   ' + b.title;				
			} 
		} 
		return results; 
	} 	

	@ProxyMethod
	public def getReport( params ) {
		buildParams( params ); 

		def unmaps = []; 
		def sourcelist = []; 
		def postingtypeid = params.postingtype?.objid.toString().toUpperCase(); 
		if ( postingtypeid == P_TYPE_LIQUIDATION.objid ) { 
			unmaps = em.getUnmappedAcctsByLiquidationDate( params ); 
			sourcelist = em.getReportDataByLiquidationDate( params ); 
		} else {
			unmaps = em.getUnmappedAccts( params ); 
			sourcelist = em.getReportData( params ); 
		} 
		
		if ( sourcelist.find{ it.actualamount > 0.0 } == null && unmaps.isEmpty() ) 
			throw new Exception('No available record(s) found that matches your criteria.'); 

		def acctlist = []; 

		sourcelist.groupBy{ it.objid }.each{ k,v-> 
			def acct = sourcelist.find{ it.objid==k } 
			if ( !acct ) return; 

			def item = acct.clone(); 
			def amount = v.sum{( it.actualamount? it.actualamount: 0.0 )} 
			if ( amount ) {
				item.actualamount = amount; 
				item.accounts = v.collect{[
					code: it.itemacctcode, type: it.itemaccttype, 
					title: it.itemaccttitle, amount: it.actualamount  
				]}.findAll{( it.code != null )} 
			} 
			acctlist << item; 
		} 

		def tmplist = []; 
		acctlist.findAll{( it.parentid=='root' )}.each{ buildTreeNode( acctlist, it, [rowindex:0], 1 ) } 
		acctlist.findAll{ it.actualamount > 0 }.each{ buildPath( tmplist, acctlist, it ) } 		
		
		def maxlevelindex = tmplist.max{ it.levelindex }.levelindex; 
		while ( maxlevelindex > 0 ) { 
			tmplist.findAll{ it.levelindex==maxlevelindex }.each{ o-> 
				def childamount = tmplist.findAll{ it.parentid==o.objid }.sum{( it.amount? it.amount : 0.0 )} 
				o.amount = (childamount? childamount : 0.0) + (o.actualamount? o.actualamount: 0.0); 
			}
			maxlevelindex -= 1; 
		} 

		if ( params.type == 'standard' ) { 
			tmplist.findAll{ it.type=='subaccount' }.each{ o-> 
				tmplist.removeAll( tmplist.findAll{( it.parentid==o.objid )} ); 
				tmplist.remove( o ); 
			} 
		} 

		def results = []; 
		def roots = tmplist.findAll{ it.parentid=='root' }
		roots.each{ scan( results, tmplist, it, params ) } 
		roots.each{ formatAcct(results, it, 1 ) } 

		def totalamt = roots.sum{( it.amount? it.amount: 0.0 )} 

		if ( unmaps ) {
			def unmamt = unmaps.sum{( it.amount? it.amount: 0.00 )} 
			totalamt += ( unmamt? unmamt : 0.0 ); 

			def unmacct = [objid:'unmapped', parentid:'root', title:'Unmapped', type:'group', amount:unmamt];
			unmaps.add(0, unmacct); 
			formatAcct( unmaps, unmacct, 1 ); 

			if ( results ) {
				results.addAll(0, unmaps); 
			} else {
				results.addAll( unmaps ); 
			}
		}

		return [
			title      : 'STATEMENT OF REVENUE', 
			period     : params.strperiod, 
			reportdata : results, 
			totalamt   : totalamt 
		]; 
	} 

	void buildTreeNode( acctlist, node, vars, levelindex ) { 
		vars.rowindex += 100; 
		node.rowindex = vars.rowindex; 
		node.levelindex = levelindex; 
		node.haschildren = false; 

		acctlist.findAll{( it.parentid==node.objid )}.each{ 
			buildTreeNode( acctlist, it, vars, levelindex+1 ) 
			node.haschildren = true; 
		} 
	} 

	void buildPath( targets, sources, acct ) { 
		def node = targets.find{ it.objid == acct.objid }
		if ( node == null ) { 
			node = acct.clone(); 
			targets << node; 
		} 

		def parentnode = sources.find{ it.objid==node.parentid } 
		if ( parentnode ) buildPath( targets, sources, parentnode ); 
	} 

	void buildParams( params ) {
		params.filter = '';

		def period = new StringBuffer();
		def rundate = dtSvc.getServerDate(); 
		if ( params.period == 'quarterly' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.qtr ) throw new Exception('qtr is required');

			def months = dtSvc.getMonthsByQtr( params.qtr );
			def monthindex = months[0].index;
			def strmonth = (monthindex > 9? monthindex: '0'+monthindex); 
			params.startdate = params.year +'-'+ strmonth +'-01'; 
			params.enddate = dtSvc.getQtrEndDate( params.qtr, params.year ); 
			period.append( months[0].caption +' - '+ months[-1].caption +' '+ params.year ); 

		} else if ( params.period == 'asofqtr' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.qtr ) throw new Exception('qtr is required');

			def months = dtSvc.getMonths(); 
			period.append( months[0].caption );
			params.startdate = params.year +'-01-01'; 
			params.enddate = dtSvc.getQtrEndDate( params.qtr, params.year ); 

			months = dtSvc.getMonthsByQtr( params.qtr );
			period.append(' - '+ months[-1].caption +' '+ params.year ); 

		} else if ( params.period == 'monthly' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.month ) throw new Exception('month is required');

			def monthindex = params.month.index; 
			def strmonth = (monthindex > 9? monthindex: '0'+monthindex); 
			def dtstart = java.sql.Date.valueOf(''+ params.year +'-'+ strmonth +'-01'); 
			def dtend = dtSvc.getMonthEndDate( dtstart ); 
			def months = dtSvc.getMonths(); 
			params.startdate = dtstart;
			params.enddate = dtend;
			period.append( months[monthindex-1].caption +' '+ params.year ); 
		
		} else if ( params.period == 'asofmonth' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.month ) throw new Exception('month is required');

			def monthindex = params.month.index; 
			def strmonth = (monthindex > 9? monthindex: '0'+monthindex); 
			def dtstart = java.sql.Date.valueOf(''+ params.year +'-01-01'); 
			def dtend = java.sql.Date.valueOf(''+ params.year +'-'+ strmonth +'-01');
			dtend = dtSvc.getMonthEndDate( dtend ); 

			def months = dtSvc.getMonths(); 
			params.startdate = dtstart;
			params.enddate = dtend;
			if ( months[0].index != months[monthindex-1].index ) { 
				period.append( months[0].caption ).append(' - '); 
			} 
			period.append( months[monthindex-1].caption ).append(' '+ params.year); 
		
		} else {
			if ( !params.date ) throw new Exception('date is required');

			def syear = params.date.toString().split('-')[0]; 
			if ( params.period == 'asofday' ) {
				period.append("As of "); 	
				params.startdate = syear +'-01-01'; 
			} else {
				params.startdate = params.date;
			}

			params.enddate = params.date; 
			params.year = syear; 

			def formatter = new java.text.SimpleDateFormat('MMMMM dd, yyyy');
			if ( params.date instanceof java.util.Date ) {
				period.append(formatter.format( params.date ));
			} else {
				period.append(formatter.format( java.sql.Date.valueOf( params.date ) )); 
			} 
		}
		params.strperiod = period.toString(); 
		params.compress = false; 
		params.hasfund = false; 
		params.hasacctgroup = false; 

		def fundid = params.fund?.objid; 
		if ( fundid ) params.hasfund = true; 
		if ( params.acctgroup ) params.hasacctgroup = true; 

		if ( !params.hasacctgroup ) params.acctgroup = '%'; 

		params.fundid = (fundid? fundid: '%'); 
		params.filter = ' 1=1 '; 
		if ( params.type=='standard' ) { 
			params.filter = ''' a.type in ('group','detail') '''; 
		} 

		if (!(params.enddate instanceof Date)) {
			params.enddate = java.sql.Date.valueOf( params.enddate ); 
		} 
		params.enddate = dtSvc.add( params.enddate, '1d' );
	} 

	void scan( results, sources, acct, params ) { 
		results << acct; 

		if ( params.type=='details' && acct.accounts ) {
			acct.accounts.each{ o-> 
				def nfo = o.clone(); 
				nfo.parentid = acct.objid; 
				nfo.type = 'itemaccount'; 
				nfo.special = true; 
				results << nfo; 
			} 
		}

		def children = sources.findAll{ it.parentid==acct.objid } 
		children.each{ 
			if (it.type == 'detail') it.childindex = 0;
			else if (it.type == 'group') it.childindex = 1;
			else it.childindex = 2; 
		} 
		children.sort{ it.childindex } 
		children.each{ scan( results, sources, it, params ) } 
	} 

	void formatAcct( results, acct, level ) {
		def spacer = ''; 
		if ( level > 1 ) spacer = '     '*(level-1); 

		def suffix = '';
		if (level == 1) suffix='*'; 

		def prefix = '';
		if (acct.type.toString().matches("detail|subaccount")) {
			prefix = (acct.code? acct.code+' ' : ''); 
		} 

		acct.title = spacer + prefix + acct.title + suffix; 

		def children = results.findAll{ it.parentid==acct.objid } 
		if ( children ) { 
			acct.haschildren = true; 
			children.each{ formatAcct(results, it, level+1) } 
		} else {
			acct.haschildren = false; 
		}
	} 
} 
