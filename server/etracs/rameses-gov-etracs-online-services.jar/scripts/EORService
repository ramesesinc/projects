import com.rameses.annotations.*
import com.rameses.util.*
import com.rameses.common.*
import com.rameses.services.extended.*

class EORService {

    @Env 
    def env 

    @Service("DateService")
    def dateService
        
    @Service("NumberService")
    def numSvc  

    @Service('CashReceiptService')
    def cashreceiptSvc 

    @DataContext("af_control")
    def afControl 

    @Service('OrgService')
    def orgSvc 

    @DataContext("paymentpartner")
    def paymentpartner 

    @Service('PersistenceService')
    def persistenceSvc 
    
    @Service("PaymentOrderService")
    def pmoSvc;   

    @DataContext("itemaccount")
    def itemAcctEm;

    @ProxyMethod
    public def post( def po ) {
        if(!po.items)
            throw new Exception("Please provide items in EORService.post");      
        def svrDate = dateService.serverDate;
        def entity = [:];
        entity.putAll( getNextEORNumber() );
        entity.state = 'POSTED'
        entity.txnmode = 'ONLINE'
        entity.txntype = 'eor'
        entity.payer = po.payer
        entity.paidby = po.paidby
        entity.paidbyaddress = po.paidbyaddress
        entity.amount = numSvc.round( po.amount )
        entity.receiptdate = po.tracedate;
        entity.txndate = svrDate;
        entity.org = orgSvc.getRoot()
        entity.collector = getCollector()
        entity.user = [objid: 'EOR', name:'EOR']
        entity.totalcash = 0
        entity.totalnoncash = entity.amount
        entity.balancedue = 0
        entity.cashchange = 0
        entity.totalcredit = 0
        entity.collectiontype = po.collectiontype;
        entity.items = po.items; 

        entity._paymentorderid = po.paymentrefid;

        if(!entity._paymentorderid)
            throw new Exception("entity._paymentorderid is null");
        
        if( po.extinfo ) {
            entity.putAll( po.extinfo ); 
        }    

        if( !env.USERID ) {
            env.USERID = 'SYSTEM';
            env.USERNAME = 'SYSTEM';
            env.FULLNAME = 'SYSTEM';
            env.JOBTITLE = 'SYSTEM';
            env.ORGID = orgSvc.getRoot();
        }

        postCreditMemo( po, entity );
        cashreceiptSvc.post(entity);
    }   

    void postCreditMemo( def po, def entity ){
        def pp = paymentpartner.find([ code:po.partnercode ]).first()
        def cm = [_schemaname:'creditmemo']
        cm.objid = 'CME' + new java.rmi.server.UID()
        cm.state = 'OPEN';
        cm.controlno = po.traceid;
        cm.payer = [:]
        cm.payer.objid = po.payer?.objid  
        cm.payer.name = po.paidby 
        cm.payer.address = [text:po.paidbyaddress]
        cm.refdate = po.tracedate;
        cm.refno = po.traceid;
        cm.amount = po.amount 
        cm.particulars = po.particulars 
        cm.bankaccount = pp.bankaccount 
        cm.type = 'EOR'
        persistenceSvc.create(cm);

        //Add payment items
        //Group Item accounts by fund for payment items
        //correct first all items that has no fund just in case there is none;
        entity.items.findAll{ !it.item.fund?.objid }.each {
            def a = itemAcctEm.find( [objid: it.item.objid ] ).first();
            it.item = a;
        }

        entity.paymentitems = [];
        def fundGroup = entity.items.groupBy{ it.item.fund };
        fundGroup.each { k,v->
            def pmi = [:];
            pmi.refid = cm.objid;
            pmi.refno = po.traceid;
            pmi.refdate = po.tracedate;
            pmi.reftype = 'EOR';
            pmi.amount = numSvc.round( v.sum{ it.amount } );
            pmi.fund = k;
            entity.paymentitems << pmi;
        }
    }

    def getControl( def afControlId ) {
        def ac = afControl.find( [objid: afControlId ]).first()
        if(!ac) {
            ac = [objid:afControlId]
            ac.afid = 'EOR'
            ac.startseries = 1
            ac.endseries = 999999999
            ac.currentseries = 1;
            ac.currentindexno = 0;
            ac.batchno = 0;
            ac.state = 'ISSUED';
            ac.unit = 'PC';
            ac.stubno = 1
            ac.active = 1
            ac.txnmode = 'ONLINE';
            ac.dtfiled = dateService.getServerDate();
            ac.owner =  getCollector()
            ac.assignee = ac.owner
            afControl.create(ac)
        }
        return ac
    }

    def getCollector(){
        return [objid: 'EOR', name:'EOR', title:'EOR', txncode:'EOR']
    }

    def getNextEORNumber() {
        String afControlId = 'EOR'+ dateService.getServerYear()
        def ac = getControl(afControlId)
        int series = ac.currentseries
        afControl.find( [objid: afControlId] ).update( [currentseries: series + 1] );
        def rctno = afControlId + '-' + (series+"").padLeft(9, "0");
        return [series: series, receiptno: rctno, formno:'EOR', formtype:'eor', controlid: afControlId, stub: 1 ] 
    }

}
