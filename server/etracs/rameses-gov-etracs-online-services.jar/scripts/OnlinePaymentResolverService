import com.rameses.annotations.*

class OnlinePaymentResolverService {

	@Service(value='PartnerPaymentService', connection='gdx_proxy') 
	def paymentProxySvc; 

	@DataContext('eor_paymentorder')
	def po_db;

	@Service 
	def self; 

    @ProxyMethod
    public void resolve( params ) {  
        if ( params.objid ) {
            def o = po_db.find([ objid: params.objid ]).first(); 
            if ( !o ) return; 

            params.items = [ o ]; 
            resolveImpl( params ); 

        } else {
            params.start = 0; 
            params.limit = 10; 
            self.resolveImpl( params ); 
        }
    } 

    @Async 
    @ProxyMethod 
    public void resolveImpl( params ) {
    	def start = (params.start ? params.start : 0);
    	def limit = (params.limit ? params.limit : 10);         

        def items = params.items;         
        if ( items ) {
            start = 0; 
            limit = items.size(); 

        } else {  
            items = po_db.find([ origin:'filipizen' ]).orderBy('txndate').list( start, limit+1 ); 
        } 

    	if ( items ) resolveItems( items, start, limit ); 
    }

    private void resolveItems( items, start, limit ) { 
    	if ( !items ) return;

    	def itemsize = items.size(); 
    	boolean hasmore = (itemsize > limit); 
    	items.each{ o-> 
    		try {
    			o.paymentrefid = o.objid; 
    			o.orgcode = o.locationid; 
                println 'before resolve -> '+ o.paymentrefid; 
    			paymentProxySvc.resolve( o ); 
   			} catch(Throwable t) { 
   				t.printStackTrace(); 
   			} 
    	}
    	if ( hasmore ) {
    		self.resolveImpl([ start: (start+limit), limit: limit ]); 
    	}
    } 
}
