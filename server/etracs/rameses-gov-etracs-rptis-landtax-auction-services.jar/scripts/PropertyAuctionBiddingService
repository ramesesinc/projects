import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.util.*
import com.rameses.services.extended.*


class PropertyAuctionBiddingService
{
    @Env
    def env

    @Service('Var')
    def var

    @Service('DateService')
    def dtSvc 

    @DataContext('propertyauction_bidding')
    def em_bidding 

    @DataContext('propertyauction_bidding_call')
    def em_bidding_call

    @DataContext('vw_property_bidder')
    def em_bidder 

    def STATE_DRAFT = 'DRAFT'
    def STATE_BIDDING = 'BIDDING'
    def STATE_CLOSED = 'CLOSED'


    @ProxyMethod
    public def beforeCreate(entity) {
        entity.bidamt = 0.0
        entity.dtstarted = dtSvc.serverDate
        entity.bidders = getBidders(entity)
        entity.calls = getCalls(entity)
        return entity 
    }

    @ProxyMethod
    public def open(entity) {
        entity.bidders = getBidders(entity)
        entity.calls = getCalls(entity)
        return entity 
    }

    @ProxyMethod
    public def startBidding(entity) {
        def old = em_bidding.find([objid: entity.objid]).first()
        if (!old) throw new Exception('Record does not exist or has already been deleted.')
        if (old.state == STATE_BIDDING) throw new Exception('Record is already under bidding.')
        if (old.state == STATE_CLOSED) throw new Exception('Record has already been closed.')
        entity.state = STATE_BIDDING
        em_bidding.update(entity)
        return entity 
    }

    @ProxyMethod
    public def closeBidding(entity) {
        println 'entity => ' + entity
        def old = em_bidding.find([objid: entity.objid]).first()
        if (!old) throw new Exception('Record does not exist or has already been deleted.')
        if (old.state == STATE_CLOSED) throw new Exception('Record has already been closed.')
        entity.state = STATE_CLOSED
        em_bidding.update(entity)
        return entity 
    }



    def getBidders(entity) {
        return em_bidder.find([property_objid: entity.property.objid])
                        .orderBy('bidderno')
                        .list();
    }

    @ProxyMethod
    public def getCalls(entity) {
        if (!entity.callformat) {
            entity.callformat = 'standard'
        }

        if ('standard'.equalsIgnoreCase(entity.callformat)) {
            return getStandardCallFormat(entity)
        }
        else {
            return getLineCallFormat(entity)
        }
    }

    def getLineCallFormat(entity) {
        def bidders = getBidders(entity)

        def items = em_bidding_call.find([parent_objid: entity.objid])
                        .select('lineno,amount,bidder.bidderno')
                        .orderBy('lineno')
                        .list()

        def calls = []
        items.each {item ->
            def call = [callno: item.lineno]
            bidders.each{bidder ->
                call[bidder.bidderno] = null 
                if (item.bidder.bidderno == bidder.bidderno) {
                    call[bidder.bidderno] = item.amount 
                }
            }
            calls << call 
        }

        return calls 
    }

    def getStandardCallFormat(entity) {
        def items = em_bidding_call.find([parent_objid: entity.objid])
                        .select('callno,amount,bidder.*')
                        .orderBy('callno,lineno')
                        .list()

        def calls = []
        def groups = items.groupBy{it.callno}
        groups.each{k, list ->
            def call = [callno:k]
            list.each {
                call[it.bidder.bidderno] = it.amount
            }
            calls << call 
        }

        calls.sort{a,b -> a.callno <=> b.callno}

        return calls 
    }

}


