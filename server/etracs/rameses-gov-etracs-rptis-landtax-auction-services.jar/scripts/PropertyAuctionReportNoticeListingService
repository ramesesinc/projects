import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.util.*
import com.rameses.services.extended.*


class PropertyAuctionReportNoticeListingService
{
    @Env 
    def env 

    @DataContext('propertyauction_step')
    def em_step

    @DataContext('propertyauction_notice')
    def em_notice

    @ActiveDB('propertyauction_report_notice')
    def em

    @Service('RPTUtil')
    def util

    @Service('DateService')
    def dtSvc 


    @ProxyMethod
    public def getSteps() {
        return em_step.where('applicable <> 0').orderBy('seqno').list()
    }

    @ProxyMethod
    public def getStates() {
        return [
            [objid:'FORDELIVERY', title:'For Delivery'],
            [objid:'DELIVERED', title:'Delivered'],
            [objid:'SUPERSEDED', title:'Superseded'],
            [objid:'CLOSED', title:'Closed'],
        ]
    }


    @Async
    @ProxyMethod
    public Map buildReport( params ) {
        util.required('LGU', params.lgu)
        util.required('Type of Notice', params.step)
        util.required('State', params.state)
        
        params.lguid = params.lgu.objid 
        params.status = params.state.objid 

        util.buildStartEndDateFilter(params)

        def items = em.getDeliveredNotices(params)
        if (!items) throw new Exception('Records not found.')   

        def p = [
            PERIOD  : util.buildPeriod(params),
            TITLE   : buildTitle(params)
        ]

        return [
            parameters  : p, 
            reportdata  : items,
        ]
    }

    def buildTitle(params) {
        return 'List of ' + params.state.title.toLowerCase() + ' ' + params.step.title + ' Notices'
    }
}


