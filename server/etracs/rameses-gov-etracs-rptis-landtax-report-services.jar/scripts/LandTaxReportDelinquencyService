import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class LandTaxReportDelinquencyService
{
	@Env
	def env 

	@Service('RPTBillingService')
	def billSvc

	@Service('DateService')
	def dtSvc 

	@Service('NumberService')
	def numSvc 

	@DataContext('landtaxreport_rptdelinquency')
	def em_delinquency 

	@DataContext('propertyclassification')
	def em_classification

	@DataContext('barangay')
	def em_barangay


	@ProxyMethod
	public def getBarangayList(  ) {
		return em_barangay.select('objid,name').where('1=1').list() 
	}

	@ProxyMethod
	public def getClassifications(  ) {
		return em_classification.where("state = 'APPROVED'").orderBy('orderno').list()
	}	

	@ProxyMethod
	public void validateDateComputed( dtcomputed  ) {
		if (!dtcomputed)
			throw new Exception('Date Computed is required.')
		/*
		dtcomputed = dtSvc.parse('yyyy-MM-dd', dtcomputed)
		if ( dtSvc.add(dtcomputed, '1d') < dtSvc.serverDate )
			throw new Exception('Date Computed must be greater than or equal to current date.')
		*/
	}

	@Async
	@ProxyMethod
	public def cleanup( params ) {
		if ( params.barangay?.objid ) {
			em_delinquency.find([barangayid:params.barangay.objid]).delete()
		} else {
			em_delinquency.where('1=1').delete() 
		}
		return "OK"; 
	}

	@ProxyMethod
	public def getOpenLedgersByBarangay( barangay ) {
		def params = [barangayid:barangay.objid, cy:dtSvc.serverYear]
		return em_delinquency.getOpenLedgersByBarangay(params)
	}	

	@ProxyMethod
	public void buildDelinquency( rptledger, dtgenerated ) {
		def items = getBillingByLedger([objid:rptledger.objid, billdate:dtgenerated])
		if (!items) return;

		def generatedby = [name:env.FULLNAME, title:env.JOBTITLE]

		items.each{ item ->
			item.rptledgerid = rptledger.objid 
			item.barangayid = rptledger.barangayid
			item.dtgenerated = dtgenerated
			item.generatedby = generatedby
			em_delinquency.create(item)
		}
	}




	@Async
	@ProxyMethod
	public def generateDelinquencyReport( params ) {
		def currentyear = dtSvc.getServerYear(); 
		if ( !params.year ) params.year = currentyear;

		params.filter = '';
		if ( params.period?.code == 'FOR_THE_YEAR' ) {
			params.filter = ''' AND year = $P{year} ''';
		} else if ( params.period?.code == 'AS_OF_YEAR' ) {
			params.filter = ''' AND year <= $P{year} ''';
		} else if ( params.period?.code == 'YEAR_RANGE' ) {
			params.filter = ''' AND year >= $P{fromyear} AND year <= $P{toyear} ''';
		} else { 
			params.filter = ''' AND year < $P{year} ''';
			params.year = currentyear; 
		} 

		params.classificationid = (params.classification ? params.classification.objid : '%')

		params.barangayid = params.barangay?.objid; 
		if ( !params.barangayid ) params.barangayid='%'; 

		params.orderby = ' rl.fullpin '; 
		if ( params.sorttype == 'taxpayer' ) {
			params.orderby = ' e.entityname ';
		} else if ( params.sorttype == 'tdno' ) {
			params.orderby = ' rl.tdno ';
		} 

		def list = null; 
		if ( params.reporttype == 'summary' ) {
			list = em_delinquency.getDelinquentLedgersSummary( params ); 
			if ( !list ) throw new Exception('No records found. Try rebuilding the delinquency')
		} 
		else if ( params.reporttype == 'certifiedlist' ) {
			list = em_delinquency.getCertifiedList( params ); 
			if ( !list ) throw new Exception('No records found. Try rebuilding the delinquency')
		} 
		else if ( params.reporttype == 'byclassification' ) {
			list = buildDelinquentLedgersByClassification(params)
		} 
		else {
			if (params.format.type.equalsIgnoreCase('format2')){
				params.filter = ''' AND year <= $P{year} ''';
				list = em_delinquency.getDelinquentLedgers2( params ).each{
					def orno = em_delinquency.findLatestPayment(it)
					if(orno){
						it.putAll(orno)
					}
				} 
			}
			else if (params.format.type.equalsIgnoreCase('format3')){
				if ( params.period?.code == 'FOR_THE_YEAR' ) {
					params.toyear = params.year 
					params.filter = ''' AND year = $P{year} ''';
				} else if ( params.period?.code == 'AS_OF_YEAR' ) {
					params.toyear = params.year 
					params.filter = ''' AND year <= $P{year} ''';
				} else if ( params.period?.code == 'YEAR_RANGE' ) {
					params.toyear = params.toyear 
					params.filter = ''' AND year >= $P{fromyear} AND year <= $P{toyear} ''';
				} else { 
					params.year = currentyear; 
					params.toyear = params.year
					params.filter = ''' AND year <= $P{year} ''';
				} 
				list = em_delinquency.getDelinquentLedgers3( params )
				if (list.size() > 1){
					def previd = list[0].rptledgerid 
					for(int i=1; i<list.size(); i++){
						def curr = list[i]
						if (previd == curr.rptledgerid){
							curr.taxpayer = null 
						}
						else{
							previd = curr.rptledgerid 
						}
					}
				}
			}
			else {
				list = em_delinquency.getDelinquentLedgers( params ); 
			}

			if ( !list ) throw new Exception('No records found. Try rebuilding the delinquency for this barangay.')

			list.each{
				if (it.classcode.matches('A|AGR')) { 
					it.area = numSvc.format('#,##0.0000', it.totalareaha) + ' ha.' 
				} else {  
					it.area = numSvc.format('#,##0.00', it.totalareasqm) + ' sqm' 
				} 
				if (it.administrator && it.administrator.name){
					it.taxpayername += '\nAdmin: ' + it.administrator.name 
				}
			} 
		} 
		return [reportdata:list]; 
	}

	def buildDelinquentLedgersByClassification(params){
		def list = em_delinquency.getDelinquentLedgersByClassification( params ); 
		if ( !list ) throw new Exception('No records found. Try rebuilding the delinquency')
		return list;
	}


	def getBillingByLedger(ledger){
		def bill = billSvc.initBill([_generate_barcode:false])
		bill.billdate = dtSvc.parse('yyyy-MM-dd', ledger.billdate)
		bill.ledgers = [[objid:ledger.objid]]
		bill._save = false 		// not save billing information
		bill._forpayment = true 	// to build computes postingitems 
		billSvc.generateBill(bill)
		return bill.ledgers[0].postingitems
	}	

}

