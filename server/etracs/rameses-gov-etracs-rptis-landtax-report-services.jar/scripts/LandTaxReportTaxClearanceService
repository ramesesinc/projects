import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class LandTaxReportTaxClearanceService 
{
    @ActiveDB('landtaxreport_taxclearance')
    def em;

    @Service('RPTCertificationService')
    def certSvc 

    @Service('SequenceService')
    def seqSvc;

    @Service('DateService')
    def dtSvc 

    @Service('RPTUtil')
    def util

    @Service('Var')
    def var 

    @Service('ReportParameterService')
    def paramSvc 

    

    @ProxyMethod
    public def initClearance(  ) {
        return [
            objid               : util.generateId('AN'),
            opener              : 'rpttaxclearance',
            year                : dtSvc.serverYear,
            qtr                 : 4,
            certifiedby         : var.treasurer_name,
            certifiedbytitle    : var.treasurer_title,
            purpose             : 'for whatever legal purpose it may serve him/her best',
            oramount            : 0.0,
            stampamount         : 0.0,
            items               : [],
            official            : false,
        ]
    }


    @ProxyMethod
    public def createClearance( cert ) {
        if (!cert.items)
            throw new Exception('At least one property must be included.')

        cert.items.each{
            if (it.lastyearpaid < cert.year) 
                throw new Exception('TD No. ' + it.tdno + ' is not cleared for the year ' + cert.year + '.')
            if (it.lastyearpaid == cert.year && it.lastqtrpaid < cert.qtr) 
                throw new Exception('TD No. ' + it.tdno + ' is not cleared for the ' + util.formalizeNumber(cert.qtr) + ' qtr of ' + cert.year + '.' )
        }

        def year = dtSvc.serverYear
        cert.txnno = year + seqSvc.getNextFormattedSeries('RPTTAXCLEARANCE-' + year )
        certSvc.createCertification(cert)
        cert.items.each{
            certSvc.createItem(it)
        }
        em.insertTaxClearance(cert)
        return openClearance(cert.objid)
    }

    
    @ProxyMethod
    public def openClearance( objid ) {
        def cert = certSvc.openCertification(objid)
        cert.putAll(em.findInfo([objid:objid]))
        buildIssuanceInfo(cert)
        cert.items = em.getItems([rptcertificationid:objid])
        buildAdministratorInfo(cert)
        buildLguNameInfo(cert)
        loadPaymentInfo(cert)
        return cert 
    }


    @ProxyMethod
    public def getClearedLedgers(cert) {
        util.required('Taxpayer', cert.taxpayer.objid)
        util.required('Year', cert.year)
        util.required('Qtr', cert.qtr)
        cert.taxpayerid = cert.taxpayer.objid 
        return em.getClearedLedgers(cert)
    }

    void buildIssuanceInfo(cert){
        def pdate = dtSvc.parseDate(cert.txndate, null)
        cert.issueday      = util.formalizeNumber(pdate.day)
        cert.issuemonth    = util.getMonthName(pdate.month)
        cert.issueyear     = pdate.year +''
        cert.issueplace    = paramSvc.standardParameter.LGUFORMALNAME
    }

    void loadPaymentInfo(cert){
        cert.items.each{item ->
            item.rptledgerid = item.refid 
            def p = [
                rptcertificationid : cert.objid,
                rptledgerid : item.rptledgerid,
                year : cert.year,
                qtr : cert.qtr,
            ]
            item.payments = em.getPaymentInfo(p).findAll{it.rptledgerid == item.rptledgerid}
            item.payments.each{
                if (it.ordate){
                    it.ordate = dtSvc.parse('yyyy-MM-dd', it.ordate)
                }
            }
        }
    }

    void buildAdministratorInfo(cert){
        if (cert.items && cert.items.size() == 1){
            cert.administrator = cert.items[0].administrator 
        }
    }

    void buildLguNameInfo(cert){
        if (cert.items && cert.items.size() == 1){
            cert.lguname = cert.items[0].lguname
        }
    }
}
