import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.util.*
import com.rameses.services.extended.*


class LandTaxLedgerSupportService
{
    @Env
    def env

    @Service(dynamic=true)
    def dynSvc
    
    @Service('RPTLedgerService')
    def ledgerSvc 

    @Service('OrgService')
    def orgSvc 

    @Service('DateService')
    def dtSvc

    @DataContext('rptledger')
    def em_ledger

    @DataContext('rptledger_remote')
    def em_mapping

    @DataContext('faas')
    def em_faas

    @DataContext('rptledger_credit')
    def em_credit    


    @ProxyMethod
    public def getRemoteLedgerMapping(ledger){
        def mapping = em_mapping.find([objid:ledger.objid]).first()
        if (!mapping){
            def remoteSvc = getRemoteService('RPTLedgerRemoteService', ledger.faasid)
            def remoteledger = remoteSvc.getLedgerForMapping(ledger)
            mapping = [:]
            mapping.objid = ledger.objid 
            mapping.remote = remoteledger
            mapping.createdby = [name:env.NAME, title:env.JOBTITLE]
            mapping.dtcreated = dtSvc.serverDate
            em_mapping.create(mapping) 
        }
        return mapping
    }


    @ProxyMethod
    public def getRemoteService(servicename, faasid){
        def faas = em_faas.select('objid,lguid').find([objid:faasid]).first()
        if (!faas) throw new Exception('FAAS ' + params.tdno + ' does not exist or has already been deleted.')
        def org = orgSvc.open([objid:faas.lguid])
        if (!org) throw new Exception('Org ' + faas.lguid + ' does not exist or has already been deleted.')
        def orgcode = org.code.replaceAll('-', '')
        return dynSvc.lookup(orgcode + 'GDX:' + servicename, 'remote-script-service')
    }


    @ProxyMethod
    public void resolveLedgerIds(ledger, remoteledger){
        remoteledger.objid = ledger.objid 
        remoteledger.faases.each{ it.rptledgerid = ledger.objid}
        if (remoteledger.subledger){
            remoteledger.subledger.parent?.objid = ledger.objid 
            remoteledger.parent?.objid = ledger.objid   
        }
        remoteledger._ledgerItems.each{
            it.rptledgerid = ledger.objid 
        }
        remoteledger._credits.each{
            it.rptledgerid = ledger.objid 
        }
        remoteledger._subledgers.each{
            it.parent.objid = ledger.objid 
        }
        remoteledger._restrictions.each{
            it.parent.objid = ledger.objid 
        }
    }


    @ProxyMethod
    public void postRemotePayments( payments ) {
        def grp = payments.groupBy{it.rptledgerid}
        grp.each{rptledgerid, items ->
            def ledger = payments.find{it.rptledgerid == rptledgerid}
            def mapping = em_mapping.find([remote_objid:rptledgerid]).first()
            if (mapping){
                items.each{
                    def exist = em_credit.find([refno:it.refno, rptledgerid:mapping.objid]).first()
                    if (!exist){
                        it.objid = 'RLC' + new java.rmi.server.UID()
                        it.rptledgerid = mapping.objid 
                        it.collector = it.collector?.name 
                        em_credit.save(it)
                    }
                }
                em_ledger.update([objid:mapping.objid, lastyearpaid:ledger.lastyearpaid, lastqtrpaid:ledger.lastqtrpaid])
                fixLedger(mapping)
            }
        }
    }    

    @ProxyMethod
    public void fixLedger(ledger) {
        def info = em_ledger.select('objid,tdno,fullpin,taxpayer_objid,owner_name,taxable,lastyearpaid,lastqtrpaid')
                            .find([objid:ledger.objid]).first()

            info.taxpayer.name = info.owner.name  
            info.basicpaid = 0.0
            info.basicdisctaken = 0.0
            info.basicintpaid = 0.0
            info.sefpaid = 0.0
            info.sefdisctaken = 0.0
            info.sefintpaid = 0.0
            ledgerSvc.fixLedger(info)
    }
}


