import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*


class RPTLedgerManualService
{
	@ActiveDB('rptledgermanual')
    def em

    @Service('RPTLedgerService')
    def ledgerSvc 
    
    @Service('RPTUtil')
    def util

    @Service('DateService')
    def dtSvc


    def STATE_PENDING   = 'PENDING'
    def STATE_APPROVED  = 'APPROVED'
    def STATE_CANCELLED = 'CANCELLED'

    @ProxyMethod
    public def validateAndCreateManualLedger(ledger){
        if (!ledger.fullpin.startsWith(ledger.barangay.pin))
            throw new Exception('PIN is invalid. It must start with ' + ledger.barangay.pin + '.')
        
        ledger.state = STATE_PENDING
        ledger.classification = ledger.classification
        ledger.classcode = ledger.classification.code 
        ledger.barangayid = ledger.barangay.objid 
        ledger.owner = ledger.taxpayer
        ledger.taxpayer.address = ledger.taxpayer.address.text 
        ledger.faases = []
        ledger.faases << [
            objid       : 'RF' + new java.rmi.server.UID(),
            state       : 'APPROVED',
            rptledgerid : ledger.objid, 
            faasid      : null,
            tdno        : ledger.tdno, 
            txntype     : ledger.txntype,
            classification  : ledger.classification,
            actualuse       : ledger.classification,
            taxable         : ledger.taxable,
            idleland         : ledger.idleland,
            reclassed       : false,
            backtax         : ledger.backtax, 
            fromyear        : ledger.effectivityyear, 
            fromqtr         : ledger.effectivityqtr, 
            toyear          : 0,
            toqtr           : 0,
            assessedvalue   : ledger.totalav,
            systemcreated   : true,
        ]

        return ledgerSvc.createLedger(ledger);
    }


    @ProxyMethod
    public void deleteLedger( ledger ) {
        ledgerSvc.deleteLedger(ledger)
    }


    @ProxyMethod
    public def approveLedger( ledger) {
        ledger = ledgerSvc.openLedger(ledger)
        if (ledger.state == STATE_APPROVED )
            throw new Exception('Ledger has already been approved.')
        if (ledger.state == STATE_CANCELLED)
            throw new Exception('Ledger has already been cancelled.')

        if (ledger.lastyearpaid == null || ledger.lastyearpaid == 0){
            def firstfaas = ledger.faases[0]
            def lastfaas = ledger.faases.last()
            ledger.lastyearpaid     = (firstfaas.fromqtr == 1 ? firstfaas.fromyear - 1 : firstfaas.fromyear)
            ledger.lastqtrpaid      = (firstfaas.fromqtr == 1 ?  4 : firstfaas.fromqtr - 1)
            ledger.lastitemyear     = (lastfaas.toyear == 0 ? dtSvc.serverYear  : lastfaas.toyear )
        }
        else{
            def lf = ledger.faases.find{ledger.lastyearpaid + 1 >= it.fromyear && (ledger.lastyearpaid + 1 <= it.toyear || it.toyear == 0)}
            if (!lf) throw new Exception('Ledger FAAS is not defined for Year ' + ledger.lastyearpaid + '.')
        }
        
        ledger.state            =  STATE_APPROVED
        ledger.nextbilldate     = null
        ledger.advancebill      = false;
        ledgerSvc.updateLedger(ledger)
        
        ledger.faases.each{  
            it.state = ledger.state 
            ledgerSvc.approveLedgerFaas(it)
        }
        ledgerSvc.postLedgerItems(ledger, dtSvc.serverYear)
        return ledger;
    }

}

