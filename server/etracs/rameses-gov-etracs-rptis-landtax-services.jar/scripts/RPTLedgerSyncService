import com.rameses.osiris3.xconnection.*;
import com.rameses.annotations.*;
import com.rameses.common.*;

class RPTLedgerSyncService
{   
	@Service('DateService')
	def dtSvc 

	@Service('RPTLedgerService')
	def ledgerSvc 

	@Service('LandTaxLedgerSupportService')
	def supportSvc 

	@DataContext('rptledger')
	def em_ledger 

	@DataContext('rptledger_remote')
    def em_ledger_remote	


	@ProxyMethod
	public def getLedgerForMapping( remoteledger ) {
		def ledger = em_ledger.select('objid,state').find([faasid:remoteledger.faasid]).first()
		if (!ledger) throw new Exception('Remote ledger does not exist.')
		if ('INTERIM'.equalsIgnoreCase(ledger.state)) throw new Exception('Ledger is still pending.')
		createRemoteLedgerMapping(ledger, remoteledger)
		return ledger 
	}

	@ProxyMethod
	public def getLedgerForSync(ledger){
		return ledgerSvc.loadLedger(ledger)
	}	

	void createRemoteLedgerMapping(ledger, remoteledger){
		def mapping = [:]
        mapping.objid = ledger.objid 
        mapping.remote = remoteledger
        mapping.createdby = [name:'SYSTEM', title:'SYSTEM']
        mapping.dtcreated = dtSvc.serverDate
        em_ledger_remote.save(mapping) 
	}

}