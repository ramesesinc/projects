import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class RPTLedgerInterceptor
{
    @Env 
    def env 

    @ActiveDB('rptledger')
    def em

	@Service('RPTLedgerService')
	def svc

    @Service('RealPropertyService')
    def rpSvc

	@Service('RPTUtil')
	def util 

    @Service('LogService')
    def logSvc

    @Service('FAASService')
    def faasSvc

	def STATE_PENDING   = 'PENDING'
	def STATE_APPROVED  = 'APPROVED'


    @After(pattern="RPTLedgerService.(createLedger|createSubLedger|updateLedger|updateSubLedger|approveLedger|fixLedger|updateState|updateFaasReference)") 
    public void logActions( evt ) {
        def ledger = evt.result 
        logSvc.logA( evt.methodName, 'RPTLEDGER', ledger.objid, ledger._remarks)
    }

	@After(pattern="FAASService.(approveFaas|approveFaasByRemote)", eval="#{!env.ORGCLASS?.equalsIgnoreCase('province')}")
	public void postFaasToRPTLedger(evt){
        def faas = evt.result 
        
        if (util.isTrue(faas.datacapture)) {
            postNewLedger(faas)
        }
        else if ((faas.txntype.objid.matches('SD|CS') || isFAASFromSubdivision(faas)) && faas.rpu.rputype == 'land'){
            svc.postNewLedger(faas)
        }
        else if ((faas.txntype.objid.matches('SD|CS') || isFAASFromSubdivision(faas)) && faas.rpu.rputype != 'land'){
            svc.postLedgerFaasData(faas);
        }
		else if ( faas.txntype.newledger ) {
            postNewLedger(faas)
        }
        else {
        	svc.postLedgerFaasData(faas);
        }		
	}

    boolean isFAASFromSubdivision(faas){
        return em.findFaasFromSubdividedLand(faas) != null 
    }

    def findManualLedger(faas){
        def manualledger = svc.findLedgerbyTdNo(faas)
            
        if (!manualledger){
            manualledger = svc.findLedgerbyPrevTdNo(faas)
        }
        return manualledger
    }

    void postNewLedger(faas){
        faas.txntype = faasSvc.getTxnType( faas.txntype.objid )
        def manualledger = findManualLedger(faas)

        if (util.isTrue(faas.txntype.reconcileledger) && manualledger){
            manualledger.previousfaases = [[prevfaasid:faas.objid]]
            svc.reconcileManualLedger(faas, manualledger)
        }
        else {
            svc.postNewLedger(faas)
        }
        
    }
}

