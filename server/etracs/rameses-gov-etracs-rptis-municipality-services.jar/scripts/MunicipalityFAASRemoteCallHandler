import com.rameses.annotations.*;
import com.rameses.common.*;

class MunicipalityFAASRemoteCallHandler
{   
	@Service('FAASService')
	def faasSvc

	@Service('RPTLedgerService')
	def ledgerSvc

	@ActiveDB('faas_task')
	def task;

	@Service('RPTUtil')
	def util

	@Service('FAASSupportService')
	def supportSvc

	@Service('DateService')
	def dtSvc 

	@Service('NotificationService')
	def notifySvc		

	@Service('RPTSmsService')
	def rptsmsSvc


	public void approveFaasByProvince(faasdata){
		println 'Processing FAAS approval by province...'
		def state = null;
		try{
			state = faasSvc.getState( faasdata.objid )
		}
		catch(e){
			//faas does not exist
			state = null;
		}

		if (state  && ! state.matches('CURRENT|CANCELLED')){
			println 'Approving faas...'
			doApproveFaas(faasdata)
			rptsmsSvc.notifyClient(faasdata)
		}
		else {
			println 'Creating new faas...'
			doCreateFaas(state, faasdata)
		}

		//get recommender and set taskid to approver task 
		//to open the faas record in approve state 
		def recommendertask = task.findRecommederTask([refid:faasdata.objid])
		if (recommendertask && faasdata.tasks){
			recommendertask.objid = faasdata.tasks.last().objid
			def info = [
				message: 'FAAS No. ' + faasdata.tdno + ' has been approved by ' + faasdata.approver.name,
				sender : faasdata.approver,
			]
			notifyRecommender(recommendertask, info)
		}
	}

	public void disapproveFaasByProvince(disapproveinfo){
		task.deleteOpenTask(disapproveinfo)

		def recommendertask = task.findRecommederTask([refid:disapproveinfo.objid])
		recommendertask.message = 'Disapproved by ' + disapproveinfo.disapprovedby.name + ':     ' + disapproveinfo.reason
		recommendertask.objid = 'TSK' + new java.rmi.server.UID()
		recommendertask.startdate = dtSvc.serverDate
		recommendertask.enddate = null
		task.create(recommendertask)

		disapproveinfo.sender = disapproveinfo.disapprovedby
		disapproveinfo.message = 'Submitted FAAS No. ' + disapproveinfo.tdno + ' was disapproved by ' + disapproveinfo.disapprovedby.name
		notifyRecommender(recommendertask, disapproveinfo)
	}

	private void doCreateFaas(state, faasdata){
		if (state == null || "current".equalsIgnoreCase(state))
			supportSvc.saveFaasData(faasdata)
			
		if (state == null){
			faasSvc.approveFaasByRemote(faasdata)
			postLedger(faasdata)
		}
		println 'FAAS has been successfully created.'
	}

	void postLedger(faas){
		if (faas.txntype.objid.matches('SD|CS') && faas.rpu.rputype == 'land'){
            ledgerSvc.postNewLedger(faas)
        }
        else if (faas.txntype.objid.matches('SD|CS') && faas.rpu.rputype != 'land'){
            ledgerSvc.postLedgerFaasData(faas);
        }
		else if ( faas.txntype.newledger || util.isTrue(faas.datacapture)) {
            postNewLedger(faas)
        }
        else {
        	ledgerSvc.postLedgerFaasData(faas);
        }		
	}

    void postNewLedger(faas){
        def manualledger = ledgerSvc.findLedgerbyTdNo(faas)
            
        if (!manualledger)
            manualledger = ledgerSvc.findLedgerbyPrevTdNo(faas)

        if (!manualledger)
            manualledger = ledgerSvc.findLedgerByFullPin(faas)

        if (!manualledger){
            ledgerSvc.postNewLedger(faas);
        }
        else {
            ledgerSvc.reconcileManualLedger(faas, manualledger)
        }
    }

	void doApproveFaas(faasdata){
		def faas = faasSvc.openFaas(faasdata)
		faas.approver = faasdata.approver
		faas.tdno = faasdata.tdno 
		faas.utdno = faasdata.utdno 
		faasdata.state = faas.state
		faasSvc.updateFaas(faasdata)
		faasSvc.approveFaas(faas)
		saveTasks(faasdata)
		faasSvc.updateSignatoryInfo(faasdata.tasks.find{it.state == 'approver'})
		println 'FAAS has been successfully approved.'
	}

	void saveTasks( faas ) {
		task.deleteOpenTask(faas)
		faas.tasks.each{
			task.save(it)
		}
	}

	void notifyRecommender(currtask, info){
		def msg = [
            objid     : currtask.refid,
            recipientid : (currtask.assignee.objid ? currtask.assignee.objid : '-'),
            recipienttype : 'user',
            senderid  : (info.sender.objid ? info.sender.objid : '-'),
            sender    : info.sender.name,
            message   : info.message,
            filetype  : 'faas',
            data 	  : [taskid: currtask.objid],
        ]
        notifySvc.addMessage(msg)
	}


}