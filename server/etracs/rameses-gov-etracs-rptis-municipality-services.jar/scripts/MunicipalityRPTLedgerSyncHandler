import com.rameses.osiris3.xconnection.*;
import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;

class MunicipalityRPTLedgerSyncHandler
{   
	@Env
	def env 

	@Context 
	def appCtx;

	@Service()
	def self

	
	@ActiveDB('municipality_rptledger')
	def em

	@Service('RPTLedgerService')
	def ledgerSvc 

	

	@ProxyMethod 
	public def syncData( params ) {
		self.doSync(params)
		return new AsyncToken()
	}


	@Async 
	@ProxyMethod
	public void doSync( params ) {
		def xconn = appCtx.getResource( XConnection.class, env.ASYNC.CONNECTION ); 
		def queue = xconn.register( env.ASYNC.ID ); 


		// get faas info 
		println 'MunicipalityRPTLedgerSyncHandler -> ' + params 
		def faas = em.findFaasByTdNo(params)
		if (!faas)
			faas = em.findFaasByPrevTdNo(params)
		
		if (!faas){
			queue.push([msgtype:'_ERROR_', msg:'TD No. ' + (params.tdno ? params.tdno : params.prevtdno) +' does not exists.'])
			queue.push( new AsyncToken(closed:true) )
			return
		}

		def ledger = em.findLedgerByFaasId([faasid:faas.objid])
		if (!ledger){
			queue.push([msgtype:'_ERROR_', msg:'Ledger does not exists for TD No. ' + (params.tdno ? params.tdno : params.prevtdno) +'.'])
			queue.push( new AsyncToken(closed:true) )
			return
		}

		ledger = ledgerSvc.openLedger(ledger)
		queue.push([msgtype:'rptledger', data:ledger])

		queue.push( new AsyncToken(closed:true) )
	}
}