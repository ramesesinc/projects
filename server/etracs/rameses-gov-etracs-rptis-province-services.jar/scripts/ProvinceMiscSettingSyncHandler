import com.rameses.osiris3.xconnection.*;
import com.rameses.annotations.*;
import com.rameses.common.*;

class ProvinceMiscSettingSyncHandler
{   
	@ActiveDB('miscrysetting')
	def em 


	@Env
	def env 

	@Context 
	def appCtx;

	@Service()
	def self

	@Service('MiscRYSettingService')
	def svc 

	@Service('OrgService')
	def orgSvc 



	@ProxyMethod 
	public def syncData( params ) {
		self.doSync(params)
		return new AsyncToken()
	}


	@Async 
	@ProxyMethod
	public void doSync( params ) {
		def xconn = appCtx.getResource( XConnection.class, env.ASYNC.CONNECTION ); 
		def queue = xconn.register( env.ASYNC.ID ); 

		// params : [orgcode:'xxx', ry:xxxx ]
		//get lguid
		def org = orgSvc.findByCode([code:params.orgcode])
		if (! org){
			queue.push([msgtype:'_ERROR_', msg:'Organization code not found.'])
			queue.push( new AsyncToken(closed:true) )
			return
		}
		

		//get rysetting by lguid
		def settings = em.getSettingsByLguIdRy([lguid:org.objid, ry:params.ry])
		if (!settings){
			queue.push([msgtype:'_ERROR_', msg:'Requested revision setting does not exist.'])
			queue.push( new AsyncToken(closed:true) )
			return
		}

		settings.each{setting ->
			setting = svc.open(setting)
			queue.push([msgtype:'miscrysetting', data:setting])

			def assesslevels = svc.getAssessLevels(setting.objid).each{lvl ->
				lvl.ranges = svc.getRanges(lvl.objid)
			}
			queue.push([msgtype:'assesslevels', data:assesslevels])

			def items = svc.getMiscItemValues(setting.objid)
			queue.push([msgtype:'itemvalues', data:items])

		}

		queue.push( new AsyncToken(closed:true) )
	}
}