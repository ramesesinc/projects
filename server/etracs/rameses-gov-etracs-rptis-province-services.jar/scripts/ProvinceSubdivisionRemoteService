import com.rameses.annotations.*;
import com.rameses.common.*;

class ProvinceSubdivisionRemoteService
{   
	@Env 
	def env 

	@Service('NotificationService')
	def notificationService

	@Service('SubdivisionSupport2Service')
	def supportSvc

	@Service('SubdivisionWorkflowService')
	def workflowSvc

	@DataContext('subdivision_task')
	def em_subdivision_task


	@ProxyMethod
	public void postSubdivisionForApproval(subdivision){
		supportSvc.postSubdivisionData(subdivision)
		def currtask = em_subdivision_task.select('objid').where('refid = :objid and enddate is null', subdivision).first()
		if (!subdivision._resubmitted || !currtask){
			workflowSvc.start([refid:subdivision.objid, data:subdivision])
			notifyGroup(subdivision)
		}
		println 'Submitted subdivision has been successfully created.'
	}

	@ProxyMethod
	public void postExaminations(data) {
		supportSvc.postExaminations(data)
	}

	@ProxyMethod
	public void postRequirements(data) {
		supportSvc.postRequirements(data)
	}

	@ProxyMethod
	public void postRequirement(data) {
		supportSvc.postRequirement(data)
	}

	@ProxyMethod
	public void postFaasData(faas) {
		supportSvc.postFaasData(faas)	
	}


	public void repostSubdivisionRequirements(reqdata){
		supportSvc.repostSubdivisionRequirements(reqdata)
	}


	void notifyGroup(subdivision){
		println 'SubdivisionWorkflowService... notifyGroup...'
		def sender = [userid:env.USERID, name:env.FULLNAME]
		if (env.REQUESTER){
			sender.userid = env.REQUESTER.USERID 
			sender.name = (env.REQUESTER.FULLNAME ? env.REQUESTER.FULLNAME : env.REQUESTER.USER)
		}

        def msg = [
            objid     		: subdivision.objid,
            senderid  		: sender.userid,
            sender    		: sender.name,
            recipientid   	: 'assign-receiver',
            recipienttype 	: 'group',
            message   		: 'Subdivision No. ' + subdivision.txnno + ' submitted by ' + sender.name + '   (assign-receiver) ',
            filetype  		: subdivision.filetype,
            data 	  		: [objid: subdivision.objid],
        ]
        notificationService.addMessage(msg);
	}

}