import com.rameses.annotations.*
import com.rameses.common.*;

class ProvinceFAASWorkflowInterceptor
{
	@Env
	def env

	@Service('RPTCloudNotificationService')
	def svc

	@Service('FAASService')
	def faasSvc

	@Service('RPTUtil')
	def util

	@Service('FAASSupportService')
	def supportSvc 	

	@After(pattern="FAASService.resendToMunicipality") 
	public void resendToLguOnlineFaas( evt ) {
		println 'Resend faas to municipality...'
		def faas = evt.result
		notifyMunicipality(faas)
	}	


	@After(pattern="FAASWorkflowService.signal", eval="#{args[0].state == 'approver' && args[0].action == 'approve'}") 
	public void submitToLguOnlineFaas( evt ) {
		println 'submitToLguOnlineFaas...'
		def faas = evt.args[0].data;
		faasSvc.approveFaas(faas)
		notifyMunicipality(faas)
	}

	@After(pattern="FAASService.approveFaas", eval="#{result.datacapture == 1 || result.datacapture == true}") 
	public void submitToLguDataCaptureFaas( evt ) {
		println 'submitToLguDataCaptureFaas....'
		def faas = evt.result
		notifyMunicipality(faas)
	}

	@After(pattern="ProvinceFAASService.disapproveFaas") 
	public void disapproveFaas( evt ) {
		println 'Disapprove Faas...'
		def faas = evt.args[0]
		def disapproveinfo = [
			objid 	: faas.objid, 
			tdno    : (faas.tdno ? faas.tdno : faas.utdno), 
			reason  : faas.disapprovereason, 
			lguid   : faas.lguid,
			disapprovedby: [objid:env.USERID, name:env.NAME]
		]
		def asyncreq = svc.createAsyncRequest('MunicipalityFAASRemoteCallHandler', 'disapproveFaasByProvince', disapproveinfo)
		svc.sendAsyncMessage(asyncreq[0], faas.lguid)
	}

	void notifyMunicipality(faas){
		println 'notify municipality....'
		def asyncreq = svc.createAsyncRequest('MunicipalityFAASRemoteCallHandler', 'approveFaasByProvince',  supportSvc.getFaasData(faas))
		svc.sendAsyncMessage(asyncreq[0], faas.lguid)
	}

}
