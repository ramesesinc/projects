import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.common.*;

class RPTCertificationLandHoldingBirService 
{
    @ActiveDB('rptcertification')
    def em;

    @Service('RPTCertificationService')
    def certSvc 

	
	@ProxyMethod
	public def createCertification( cert ) {
		certSvc.createCertification(cert)
		certSvc.buildFilter(cert)
		em.insertLandHoldingItems(cert)
		cert.items = getLandHoldingItems(cert)
		return cert 
	}

	@ProxyMethod
	public def createLandHoldingWithImprovement(cert){
		certSvc.createCertification(cert)
		certSvc.buildFilter(cert)
		em.insertLandHoldingWithImprovementItems(cert)
		cert.items = getLandHoldingItems(cert)
		return cert 
	}

	@ProxyMethod
	public def createLandHoldingWithNoImprovement( cert ) {
		certSvc.createCertification(cert)
		certSvc.buildFilter(cert)
		em.insertLandHoldingWithNoImprovementItems(cert)
		cert.items = getLandHoldingItems(cert)
		return cert 
	}

	@ProxyMethod
	public def createLandHoldingBir(cert){
		certSvc.createCertification(cert)
		certSvc.buildFilter(cert)
		 
		//adjust filter based on asyofyear
		cert.asoffilter = " and f.state in ('CURRENT', 'CANCELLED') "
		cert.asoffilter += ' and f.year <= $P{asofyear} '

		def items = em.getLandHoldingBirItems(cert)

		//rule 1: do not include GR transactions approved on asofyear 
		def gritems = items.findAll{ it.year == cert.asofyear && it.txntype.objid == 'GR'}
		if (gritems){
			items.removeAll(gritems)
		}

		// group by pin and in case of duplicate, include only the latest year
		// this is a case where a property is processed several time before the 
		// specified as of year
		def pingroup = items.groupBy{it.pin}
		def holdings = []
		
		pingroup.each{k, v ->
			holdings << v.last()
		}

		holdings.each{
			it.rptcertificationid = cert.objid
			it.refid = it.faasid 
			em.create(it, 'item')
		}

		if (!holdings)
			throw new Exception('There are no registered properties found.')

		cert.items = getLandHoldingItems(cert)
		return cert 
	}		


	@ProxyMethod
	public def openCertification(objid) {
		def cert = certSvc.openCertification(objid)
		if (! cert ) 
			throw new Exception('Certification does not exist or has already been deleted.')
		cert.items = getLandHoldingItems(cert)
		return cert 
	}


	def getLandHoldingItems(cert){
		def items = em.getLandHoldingItems(cert).each{
			it.street = (it.street ? it.street : it.barangay)
			it.description = it.cadastrallotno
		}

		if (!items) 
			throw new Exception('There are no land properties registered for this taxpayer.')
		return items
	}

}
