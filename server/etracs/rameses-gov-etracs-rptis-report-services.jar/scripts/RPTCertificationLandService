import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class RPTCertificationLandService 
{
    @ActiveDB('rptcertification')
    def em


    @Service('RPTCertificationService')
    def certSvc 


	
    @ProxyMethod
    public void validateLandWithImprovement(params){
    	def result = em.findImprovementCount(params)
    	def bldgland = em.findBldgLandCount(params)
    	def plant = em.findPlantTreeCount(params)
    	if (result.improvcount == 0 && bldgland.improvcount == 0 && plant.improvcount == 0)
    		throw new Exception("Selected Land has no existing improvements.")
    }

    @ProxyMethod
    public def validateLandWithNoImprovement( params ) {
    	def result = em.findImprovementCount(params)
		def bldgland = em.findBldgLandCount(params)
    	if (result.improvcount > 0 || bldgland.improvcount > 0)
    		throw new Exception("Selected Land has existing improvements.")
    }


    @ProxyMethod
	public def createLandWithNoImprovement( cert ) {
		certSvc.createCertification(cert)
		cert.items = getLandItems(cert)
		loadFaasInfo(cert)
		return cert 
	}


    @ProxyMethod
	public def createLandWithImprovement( cert ) {
		certSvc.createCertification(cert)
		certSvc.buildFilter(cert)
		em.insertLandImprovements(cert)
		em.insertLandImprovementFromBldgLand(cert)
		cert.items = getLandItems(cert)
		loadFaasInfo(cert)
		return cert 
	}


	@ProxyMethod
	public def openCertification(objid) {
		def cert = certSvc.openCertification(objid)
		if (! cert ) 
			throw new Exception('Certification does not exist or has already been deleted.')
		cert.items = getLandItems(cert)
		loadFaasInfo(cert)
		return cert 
	}

	void loadFaasInfo(cert){
		def faas = certSvc.getFaasInfo(cert.faasid)
		if (faas) {
			faas.street = (faas.street ? faas.street : faas.barangay.name)
			cert.putAll( faas )
			if (!cert.items)
				cert.items = []
		}
	}

	def getLandItems(cert){
		return em.getLandItems(cert).each{
			it.street = (it.street ? it.street : it.barangay)
		}
	}
}
