import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class RPTCertificationNoPropertyService 
{
    @ActiveDB('rptcertification')
    def em;

    @Service('RPTCertificationService')
    def certSvc 

    
	@ProxyMethod
	public def createCertification( cert ) {
		checkExistingProperties(cert)
		if (cert.certtype.type == 'bytaxpayers'){
			cert.taxpayer = [name:cert.requestedby, address:cert.requestedbyaddress]
		}
		cert += certSvc.createCertification(cert)
		cert.items.each{
			certSvc.createItem(it)
		}
		return openCertification(cert.objid)
	}

	@ProxyMethod
	public void checkExistingProperties( cert) {
		if (cert.certtype.type == 'bytaxpayer'){
			checkExistingProperty(cert.taxpayer.objid)
		}
		else {
			cert.items.each{
				checkExistingProperty(it.refid)
			}
		}
	}

	@ProxyMethod
	public void checkExistingProperty( taxpayerid ) {
		def prop = em.getProperties([taxpayerid:taxpayerid])
		if (prop)
			throw new Exception('Selected taxpayer has existing properties.')
	}

	@ProxyMethod
	public def openCertification(objid) {
		def cert = certSvc.openCertification(objid)
		if (! cert ) 
			throw new Exception('Certification does not exist or has already been deleted.')
		cert.items = em.getNoPropertyTaxpayers([objid:objid])
		cert.items.eachWithIndex{v, idx ->
			v.name = (idx+1) + '. ' + v.name 
		}
		return cert 
	}
}
