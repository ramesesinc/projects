import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID

class RPTReportComparativeAVService
{
	@Env 
	def env 

    @ActiveDB('rptreport_comparativeav')
    def em

    @Service('Var')
    def var 

    @Service('RPTUtil')
    def util

    @Service('PropertyClassificationService')
    def pcSvc 

    @Service('ExemptionTypeService')
    def etSvc

    @Async
	@ProxyMethod
	public Map generateComparativeAV(params) {
		params.lguid = params.lgu?.objid
		params.barangayid = params.barangay?.objid

		util.buildReportFormalTitlePeriod('COMPARATIVE DATA ON ASSESSED VALUE OF REAL PROPERTY', params)

		util.buildPreceedingPeriodFilter(params)
		def taxablepreceedings 	= em.getPreceedingComparativeAV(params)
		def exemptpreceedings 	= em.getPreceedingComparativeAVExempt(params)
		
		util.buildCurrentPeriodFilter(params)
		def taxablecurrents 	= em.getCurrentComparativeAV(params)
		def taxablecancelleds 	= em.getCancelledComparativeAV(params)
		def exemptcurrents 		= em.getCurrentComparativeAVExempt(params)
		def exemptcancelleds 	= em.getCancelledComparativeAVExempt(params)

		util.buildEndingPeriodFilter(params)
		def taxableendings 		= em.getEndingComparativeAV(params)
		def exemptendings 		= em.getEndingComparativeAVExempt(params)
		
		def loadSumaryInfo = { data, list ->
			def info = list.find{ it.classid == data.classid }
			if( info ) data.putAll( info )
		}
	
		int lineno = 1
		int charindex = 'a' 
		def classifications = getClassifications()
		def firstspecial = classifications.find{ it.special == 1 }
		classifications.add( classifications.indexOf( firstspecial), [objid:'SPECIAL', name:'SPECIAL', special:0] )
		def taxables = classifications.collect{ buildComparativeInfo(it, 'TAXABLE') }
		taxables.each { data ->
			loadSumaryInfo( data, taxablepreceedings )
			loadSumaryInfo( data, taxablecurrents )
			loadSumaryInfo( data, taxablecancelleds )
			loadSumaryInfo( data, taxableendings )
			if( data.special == 0 ) {
				data.classname = lineno + '. ' + data.classname 
				lineno += 1
			}
			else {
				data.classname = '   ' + ((char)charindex) + '. ' + data.classname 
				charindex += 1
			}
		}
		
		lineno = 1 
		def exempts  = getExemptionTypes().collect{ buildComparativeInfo(it, 'EXEMPT') }
		exempts.each { data -> 
			loadSumaryInfo( data, exemptpreceedings )
			loadSumaryInfo( data, exemptcurrents )
			loadSumaryInfo( data, exemptcancelleds )
			loadSumaryInfo( data, exemptendings )
			data.classname = lineno + '. ' + data.classname 
			lineno += 1
		}
		
		def forlguname = env.ORGCLASS +  ' OF ' + env.ORGNAME 
		if (params.lgu){
			forlguname = params.lgu.lgutype.toUpperCase() + ' OF ' + params.lgu.name
		}

		def p = [
			PERIOD 		: params.period,
			PERIODTYPE 	: params.periodtype,
			TITLE 		: params.title,
			FORLGUNAME  : forlguname,
		]
		return [
			parameters  : p,
			reportdata  : taxables + exempts ,
		]
	}


	def buildComparativeInfo( info, taxability ) {
		return [ classid	: info.objid, 
				classname	: info.name, 
				special		: info.special ,
				taxability	: taxability,
				preceedinglandav 	: 0.0,
				preceedingimpav 	: 0.0,
				preceedingtotal 	: 0.0,
				currentlandav 	: 0.0,
				currentimpav 	: 0.0,
				currenttotal 	: 0.0,
				cancelledlandav : 0.0,
				cancelledimpav 	: 0.0,
				cancelledtotal 	: 0.0,
				endinglandav 	: 0.0,
				endingimpav 	: 0.0,
				endingtotal 	: 0.0,
			]
	}


	@ProxyMethod
    public def getClassifications(){
    	return pcSvc.getClassifications([:])
    }

    
    @ProxyMethod
    public def getExemptionTypes(  ) {
    	return 	etSvc.getExemptionTypes([:])
    }

}
