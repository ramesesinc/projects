import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID

class RPTReportComparativeMVService
{
    @ActiveDB('rptreport_comparativemv')
    def em

    @Service('Var')
    def var 

    @Service('PropertyClassificationService')
    def pcSvc 

    @Service('ExemptionTypeService')
    def etSvc

    @Service('RPTUtil')
    def util


    @Async
    @ProxyMethod
	public Map generateComparativeMV(params) {
		params.lguid = params.lgu?.objid 
		util.buildReportFormalTitlePeriod('COMPARATIVE DATA ON MARKET VALUE OF REAL PROPERTY ASSESSMENT', params)

		util.buildPreceedingPeriodFilter(params)
		def starttaxables 	= em.getStartComparativeMV(params)
		def startexempts 	= em.getStartComparativeMVExempt(params)

		util.buildEndingPeriodFilter(params)
		def endtaxables		= em.getEndComparativeMV(params)
		def endexempts		= em.getEndComparativeMVExempt(params)
		

		def loadMVSumaryInfo = { data, list ->
			def info = list.find{ it.classid == data.classid }
			if( info ) data.putAll( info )
		}
	
		int lineno = 1
		int charindex = 'a' 
		def classifications = getClassifications()
		def firstspecial = classifications.find{ it.special == 1 }
		classifications.add( classifications.indexOf( firstspecial), [objid:'SPECIAL', name:'SPECIAL', special:0] )
		def taxables = classifications.collect{ buildComparativeMVInfo(it, 'TAXABLE') }
		taxables.each { data ->
			loadMVSumaryInfo( data, starttaxables )
			loadMVSumaryInfo( data, endtaxables )
			if( data.special == 0 ) {
				data.classname = lineno + '. ' + data.classname 
				lineno += 1
			}
			else {
				data.classname = '   ' + ((char)charindex) + '. ' + data.classname 
				charindex += 1
			}
		}
		
		lineno = 1 
		def exempts  = getExemptionTypes().collect{ buildComparativeMVInfo(it, 'EXEMPT') }
		exempts.each { data -> 
			loadMVSumaryInfo( data, startexempts )
			loadMVSumaryInfo( data, endexempts )
			data.classname = lineno + '. ' + data.classname 
			lineno += 1
		}

		def p = [
			PERIOD 		: params.period,
			PERIODTYPE 	: params.periodtype,
			TITLE 		: params.title,
			FORLGUNAME  : params.lgu.lgutype.toUpperCase() + ' OF ' + params.lgu.name,
		]

		return [
			parameters  : p,
			reportdata  : taxables + exempts ,
		]
	} 
	
	def buildComparativeMVInfo( info, taxability ) {
		return [ classid	: info.objid, 
				classname	: info.name, 
				special		: info.special ,
				taxability	: taxability,
				startlandmv : 0.0,
				startimpmv 	: 0.0,
				starttotal	: 0.0,
				endlandmv 	: 0.0,
				endimpmv 	: 0.0,
				endtotal	: 0.0,
			]
	}	


    @ProxyMethod
    public def getClassifications(){
    	return pcSvc.getClassifications([:])
    }

    
    @ProxyMethod
    public def getExemptionTypes(  ) {
    	return 	etSvc.getExemptionTypes([:])
    }

}
