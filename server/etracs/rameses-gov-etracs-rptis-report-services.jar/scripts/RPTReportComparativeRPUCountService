import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class RPTReportComparativeRPUCountService
{
	@Env 
	def env 
	
    @ActiveDB('rptreport_comparativecount')
    def em

    @Service('Var')
    def var 

    @DataContext('propertyclassification')
    def propertyclassification

    @DataContext('exemptiontype')
    def exemptiontype
    
    @Service('RPTUtil')
    def util


    @Async
	@ProxyMethod
	public Map generateComparativeRpuCount(params) {
		params.filter = ''

		if (params.lgu){
			params.lguid = params.lgu.objid 
			params.filter = ' AND f.lguid =  $P{lguid} ' 
		}

		if (params.barangay){
			params.barangayid = params.barangay.objid 
			params.filter += ' AND rp.barangayid = $P{barangayid} '
		}


		util.buildReportFormalTitlePeriod('COMPARATIVE DATA ON NUMBER OF RPUs', params)
		util.buildStartEndDateFilter(params)

		def taxablepreceedings 	= em.getPreceedingComparativeRpuCount(params)
		def exemptpreceedings 	= em.getPreceedingComparativeRpuCountExempt(params)
		def taxablecurrents 	= em.getNewDiscoveryComparativeRpuCount(params)
		def exemptcurrents 	= em.getNewDiscoveryComparativeRpuCountExempt(params)
		def taxablecancelleds 	= em.getCancelledComparativeRpuCount(params)
		def exemptcancelleds 	= em.getCancelledComparativeRpuCountExempt(params)
		def taxableendings 		= em.getEndingComparativeRpuCount(params)
		def exemptendings 		= em.getEndingComparativeRpuCountExempt(params)
		
		def loadSumaryInfo = { data, list ->
			def info = list.find{ it.classid == data.classid }
			if( info ) data.putAll( info )
		}
	
		int lineno = 1
		int charindex = 'a' 
		def classifications = getClassifications()
		def firstspecial = classifications.find{ it.special == 1 }
		classifications.add( classifications.indexOf( firstspecial), [objid:'SPECIAL', name:'SPECIAL', special:0] )
		def taxables = classifications.collect{ buildComparativeRpuCountInfo(it, 'TAXABLE') }
		taxables.each { data ->
			loadSumaryInfo( data, taxablepreceedings )
			loadSumaryInfo( data, taxablecurrents )
			loadSumaryInfo( data, taxablecancelleds )
			loadSumaryInfo( data, taxableendings )
			if( data.special == 0 ) {
				data.classname = lineno + '. ' + data.classname 
				lineno += 1
			}
			else {
				data.classname = '   ' + ((char)charindex) + '. ' + data.classname 
				charindex += 1
			}
		}
		
		lineno = 1 
		def exempts  = getExemptionTypes().collect{ buildComparativeRpuCountInfo(it, 'EXEMPT') }
		exempts.each { data -> 
			loadSumaryInfo( data, exemptpreceedings )
			loadSumaryInfo( data, exemptcurrents )
			loadSumaryInfo( data, exemptcancelleds )
			loadSumaryInfo( data, exemptendings )
			data.classname = lineno + '. ' + data.classname 
			lineno += 1
		}

		def forlguname = env.ORGCLASS +  ' OF ' + env.ORGNAME 
		if (params.lgu){
			forlguname = params.lgu.lgutype.toUpperCase() + ' OF ' + params.lgu.name
		}

		def p = [
			PERIOD 		: params.period,
			PERIODTYPE 	: params.periodtype,
			TITLE 		: params.title,
			FORLGUNAME  : forlguname,
		]
		
		return [
			parameters  : p, 
			reportdata  : taxables + exempts ,
		]
	}


	def buildComparativeRpuCountInfo( info, taxability ) {
		return [ classid	: info.objid, 
			classname	: info.name, 
			special		: info.special ,
			taxability	: taxability,
			preceedinglandcount 	: 0.0,
			preceedingimpcount 		: 0.0,
			preceedingtotal 		: 0.0,
			newdiscoverylandcount 	: 0.0,
			newdiscoveryimpcount 	: 0.0,
			newdiscoverytotal 		: 0.0,
			cancelledlandcount 		: 0.0,
			cancelledimpcount 		: 0.0,
			cancelledtotal 			: 0.0,
			endinglandcount 		: 0.0,
			endingimpcount 			: 0.0,
			endingtotal 			: 0.0,
		]
	}	


    @ProxyMethod
    public def getClassifications(){
    	return propertyclassification.find([state:'APPROVED']).orderBy('orderno').list()
    }

    @ProxyMethod
    public def getExemptionTypes(  ) {
    	return 	exemptiontype.find([state:'APPROVED']).orderBy('orderno').list()
    }


}
