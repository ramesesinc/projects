import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID

class RPTReportFAASValuationAndRestrictionService
{
	@Env 
	def env 

    @ActiveDB('rptreport_faas_valuationrestriction')
    def em

    @Service('RPTUtil')
    def util


    @Async
    @ProxyMethod
    public def generateReport( params ) {
    	buildPeriodFilter(params)
    	params.lguid = (params.lgu ? params.lgu.objid :'%')
		params.barangayid = (params.barangay ? params.barangay.objid : '%')
		params.imonth = getMonthIndex(params)

		if (params.basicrate == null ) params.basicrate = 1.0
		if (params.sefrate == null ) params.sefrate = 1.0

		def list = em.getFaasValuationRestrictionSummary(params)
		if( ! list ) throw new Exception('Record not found.')

		computeDifference(list)

		return [
			parameters  : [PERIOD:params.period, BASICRATE:params.basicrate, SEFRATE:params.sefrate],
			reportdata 	: list,
		]
    }

    void computeDifference(list){
    	list.each{
    		it.mvdifference = it.totalmv - it.restrictionmv
    		it.avdifference = it.totalav - it.restrictionav
    	}
    }

    def getMonthIndex(params){
    	if (params.month){
			return params.month.index 
		}
		else {
			def qtrs = [1:3, 2:6, 3:9, 4:12]
			return qtrs[params.qtr]
		}
    }

    void buildPeriodFilter(params){
    	params.periodfilter = ''
    	if (params.period.code == 'AS_OF'){
    		if (params.month){
    			params.period = 'As of ' + params.month.name + ', ' + params.year 
    		}
    		else{
    			def qtrs = [1:'MARCH', 2:'JUNE', 3:'SEPTEMBER', 4:'DECEMBER']
    			params.period = 'As of ' + qtrs[params.qtr] + ', ' + params.year 	
    		}
    		params.periodfilter = ' and (f.year < $P{year} or (f.year = $P{year} and f.qtr <= $P{qtr} and f.month <= $P{imonth})) '
    	}
    	else {
    		params.period = util.buildPeriod(params)
    		if (params.month)
    			params.periodfilter = ' and f.year = $P{year} and f.qtr = $P{qtr} and f.month = $P{imonth} '
    		else 
    			params.periodfilter = ' and f.year = $P{year} and f.qtr = $P{qtr} and f.month <= $P{imonth} '
    	}
    }
}
