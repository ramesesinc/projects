import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID

class RPTReportOtherClaimantService
{
	@Env 
	def env 

    @ActiveDB('rptreport_other_claimant')
    def em

    @Service('RPTUtil')
    def util

    @Service('DateService')
    def dtSvc 


    @Async
	@ProxyMethod
	public Map buildReport( params ) {
		util.required('LGU', params.lgu)

		params.lguid = params.lgu.objid 
		params.barangayid = (params.barangay ? params.barangay.objid : '') + '%'

		def reportdata = [:]
		def items = null; 

		if ('list'.equalsIgnoreCase(params.reporttype.type)){
			items = em.getList(params).each{ it.fullpin += '-' + it.claimno}
		}
		else if ('summary'.equalsIgnoreCase(params.reporttype.type)){
			items = em.getSummary(params)
		}

		if (!items) throw new Exception('Records not found.')	

		def p = [
			PERIOD 		: "AS OF " + dtSvc.format('MMMMM dd, yyyy', dtSvc.serverDate),
			FORLGUNAME  : (params.lgu ? (env.ORGCLASS + ' OF ' + params.lgu.name) : (env.ORGCLASS + ' OF ' + env.ORGNAME)),
			BARANGAY    : params.barangay?.name, 
			LGUTYPE     : (params.lgu ? params.lgu.lgutype : env.ORGCLASS), 
		]

		return [
			parameters  : p, 
			reportdata  : items,
		]
	}


}
