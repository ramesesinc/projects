import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;
import java.math.BigDecimal;

class RPTReportROAService
{
    @ActiveDB('rptreport_roa')
    def em;

    @Service('DateService')
    def dtsvc;

    @Service('RPTUtil')
    def util

    @Async
    @ProxyMethod
    public def getROA(params){
        params.title = 'RECORD OF ASSESSMENTS'
        if ('period'.equalsIgnoreCase(params.reporttype.type)){
            util.buildReportTitlePeriod(params.title, params)
            if (params.periodtype.equalsIgnoreCase('quarter'))
                params.period = 'PERIOD: ' + params.period
            else if (params.periodtype.equalsIgnoreCase('month'))
                params.period = 'FOR THE MONTH OF ' + params.period
            
            util.buildCurrentPeriodFilter(params)    
        }
        else{
            params.filter = ' f.dtapproved <= $P{asofdate} '
            params.period = 'As of ' + dtsvc.format('MMMMM dd, yyyy', dtsvc.parse('yyyy-MM-dd', params.asofdate))
        }

        def barangay = params.barangay ? params.barangay.name : 'ALL'
        def classification = params.classification ? params.classification.name : 'ALL';
        params.lguid = params.lgu?.objid 
        
        def barangayname = params.barangay?.name 
        params.barangay = params.barangay ? params.barangay.objid : '%';
        params.classification = params.classification ? params.classification.objid : '%';
        params.section = params.section ? params.section : '%';

        params.ry = dtsvc? dtsvc.getServerYear() : '';
        def roalist = [];
        def currentlist = em.getCurrentFaasRecord(params);
        currentlist.each{obj ->
            def previousfaases = em.getPreviousFaases(obj)
            if (previousfaases){
                previousfaases.each{pf ->
                    if (roalist.find{it.objid == pf.prevfaasid} == null){
                        roalist.add(obj)
                        roalist.add(em.findCancelledFaasRecord(pf))
                    }
                    else{
                        roalist.add(roalist.size() - 1, obj)
                    }
                }
            }
            else{
                //datacapture has no previous record
                roalist.add(obj)
            }
        }

        if (!roalist)
            throw new Exception('Record(s) not found.')

        roalist.each{
            it.barangay = barangay;
            it.classification = classification;
        };
        def p = [
            PERIOD      : params.period,
            PERIODTYPE  : params.periodtype,
            TITLE       : params.title,
            BARANGAY    : barangayname,
        ]

        if (params.lgu)
            p.FORLGUNAME = params.lgu.lgutype.toUpperCase() + ' OF ' + params.lgu.name
        else 
            p.FORLGUNAME = 'ALL'

        return [
            parameters  : p, 
            reportdata  : roalist,
        ]
    }

    @ProxyMethod
    public def getSections(){
        return [];
    }

    @ProxyMethod
    public def getLGU(params){
      return em.getLGU(params);
    }

    @ProxyMethod
    public def getBarangay(params){
      params.index = params.lgu? params.lgu.objid:'';
      return em.getBarangay(params);
    }
}
