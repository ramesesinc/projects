import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class RPTReportRPAService
{
	@Env 
	def env 

    @ActiveDB('rptreport_rpa')
    def em

    @Service('Var')
    def var 

    @Service('LGUService')
    def lguSvc 

    @DataContext('propertyclassification')
    def propertyclassification

    @DataContext('exemptiontype')
    def exemptiontype

    @Service('RPTUtil')
    def util

    @Service('ReportParameterService')
    def paramSvc 

    @Service('DateService')
    def dtSvc 

    @Service('NumberService')
    def numSvc 


    @Async
	@ProxyMethod
	public Map generateReportOnRPA( params ) {
		buildFilter(params)

		def taxableclasses = []
		def exemptclasses = []
		def restrictions = []

		if (params.reporttype.type == 'standard'){
			taxableclasses = buildTaxableClasses(em.getTaxables(params), params)
			exemptclasses = buildExemptClasses(em.getExempts(params), params)	
		}
		else if (params.reporttype.type == 'lift'){
			taxableclasses = buildTaxableClasses(em.getLintTaxables(params), params)
			exemptclasses = buildExemptClasses(em.getLintExempts(params), params)	
		}
		else if (params.reporttype.type == 'lift_restriction'){
			restrictions = buildRestrictions(params)
		}
		else if (params.reporttype.type == 'lift_idleland'){
			taxableclasses = buildTaxableClasses(em.getLintIdleLandTaxables(params), params)
			exemptclasses = buildExemptClasses(em.getLintIdleLandExempts(params), params)	
		}
		else{
			throw new Exception('Report Type ' + params.reporttype.caption + ' is not supported.')
		}


		def p = [
			PERIOD 		: params.period,
			PERIODTYPE 	: params.periodtype,
			TITLE 		: params.title,
			FORLGUNAME  : (params.lgu ? params.lgu.name : (env.ORGCLASS + ' OF ' + env.ORGNAME)),
			LGUTYPE     : (params.lgu ? params.lgu.lgutype : env.ORGCLASS), 
			BRGYCOUNT   : getBarangays(params).size(),
			BARANGAY    : params.barangay?.name,
			BASICRATE   : params.basicrate, 
			SEFRATE     : params.sefrate, 
		]
		
		return [
			parameters  : p, 
			reportdata  : taxableclasses + exemptclasses + restrictions,
		]
	}

	void buildFilter(params){
		params.filter = ''
		params.title = 'REPORT ON REAL PROPERTY ASSESSMENTS'

		if (params.periodtype.type.matches('monthly|quarterly')){
			util.buildReportTitlePeriod(params.title, params)
			util.buildStartEndDateFilter(params)
		}
		else {
			params.enddate = params.asofdate
			params.period = 'As of ' + dtSvc.format('MMMMM dd, yyyy', dtSvc.parse('yyyy-MM-dd', params.asofdate))
		}

		if (params.lgu){
			params.filter += ' AND f.lguid = $P{lguid} ' 
			params.lguid = params.lgu.objid 
		}

		if (params.barangay){
			params.filter += ' AND rp.barangayid = $P{barangayid} ' 
			params.barangayid = params.barangay.objid 
		}
	}

	def buildTaxableClasses(taxables, params){
		taxables.each{ item ->
			if (params.reporttype.type == 'standard'){
				item.basicrate = params.basicrate
				item.sefrate = params.sefrate
				item.basictax = numSvc.round((item.totalav - item.totalrestrictionav) * item.basicrate )
				item.seftax = numSvc.round((item.totalav - item.totalrestrictionav) * item.sefrate )
			}
			else {
				def cls =params.classifications.find{it.objid == item.classid}
				item.basicrate = (cls?.basicrate == null ? 0 : cls.basicrate / 100.0)
				item.sefrate = (cls?.sefrate == null ? 0 : cls.sefrate / 100.0)

				item.basictax = numSvc.round(item.totalav * item.basicrate)
				item.seftax = numSvc.round(item.totalav * item.sefrate)	
			}
		}
		
		int lineno = 1
		int charindex = 'a' 
		def taxableclasses = getClassifications()
		def firstspecial = taxableclasses.find{ it.special == 1 }
		taxableclasses.add( taxableclasses.indexOf( firstspecial), [objid:'SPECIAL', name:'SPECIAL', special:0] )
		
		taxableclasses.each{ item ->
			def taxable = taxables.find{ it.classid == item.objid }
			if( taxable ) {
				item.putAll( taxable )
			}
			item.taxability = 'TAXABLE' 
			if( item.special == 0 ) {
				item.classname = lineno + '. ' + item.name 
				lineno += 1
			}
			else {
				item.classname = '   ' + ((char)charindex) + '. ' + item.name 
				charindex += 1;
			}
		}
	}


	def buildRestrictions(params){
		def restrictions = em.getLintRestrictions(params)
		restrictions.each{ item -> 
			if (params.reporttype.type == 'standard'){
				item.basicrate = params.basicrate/100.0
				item.sefrate = params.sefrate/100.0
				item.basictax = numSvc.round((item.totalav - item.totalrestrictionav) * item.basicrate)
				item.seftax = numSvc.round((item.totalav - item.totalrestrictionav) * item.sefrate)
				
			}
			else {
				def cls =params.classifications.find{it.objid == item.classid}
				item.basicrate = (cls?.basicrate == null ? 0 : cls.basicrate / 100.0)
				item.sefrate = (cls?.sefrate == null ? 0 : cls.sefrate / 100.0)

				item.basictax = numSvc.round(item.totalav * item.basicrate )
				item.seftax = numSvc.round(item.totalav * item.sefrate)	
				
			}
		}
	}



	def buildExemptClasses(exempts, params){
		int lineno = 1
		exempts.each{ 
			it.basictax = 0.0
			it.seftax = 0.0
		}
		
		def exemptclasses  = getExemptionTypes();
		exemptclasses.each { item -> 
			def exempt = exempts.find{ it.classid == item.objid }
			if( exempt ) {
				item.putAll( exempt )
			}
			item.classname = lineno + '. ' + item.name 
			item.taxability = 'EXEMPT'
			lineno += 1
		}
	}


    @ProxyMethod
    public def getClassifications(){
    	return 	propertyclassification.find([state:'APPROVED']).orderBy('orderno').list()
    }

    @ProxyMethod
    public def getExemptionTypes(  ) {
    	return 	exemptiontype.find([state:'APPROVED']).orderBy('orderno').list()
    }

    @ProxyMethod
    public def getBarangays(params){
    	return lguSvc.lookupBarangaysByRootId(params.lguid)	
    }


}
