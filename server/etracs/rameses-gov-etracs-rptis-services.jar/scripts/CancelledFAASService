import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class CancelledFAASService
{
	@ActiveDB('cancelledfaas')
    def em
    
	@Env
	def env
	
	@Service('TxnRefService')
    def txnRef

    @Service('DateService')
    def dateSvc

    @Service('SequenceService')
    def seqSvc

    @Service('RPTUtil')
    def util 
    
    @Service('CancelTDReasonService')
    def reasonSvc

    @Service('FAASService')
    def faasSvc 

    def STATE_DRAFT 		= 'DRAFT'
    def STATE_FORAPPROVAL 	= 'FORAPPROVAL'
    def STATE_APPROVED 		= 'APPROVED'
    
    def SCHEMA_NAME = 'cancelledfaas'
	def SCHEMA_SIGNATORY = 'signatory'
    

	@ProxyMethod
    public def getList( params ) {
    	params.searchtext = (params.searchtext ? params.searchtext : '') + '%'
        def filters = [
            ' and f.tdno LIKE $P{searchtext}',
            ' and f.owner_name LIKE $P{searchtext}',
            ' and r.fullpin LIKE $P{searchtext}',
        ]
        return util.getListFromQuery( 'cancelledfaas:getList' , filters, params, 'cf.objid' )
    }

    @ProxyMethod
    public def initCancelledFaas(entity){
        createCancelledFaas(entity)
        return entity
    }

    @ProxyMethod
    public def createCancelledFaas(entity){
        txnRef.checkReference(entity.faas.objid)
        validateFaas(entity.faas)
        entity.faasid = entity.faas.objid 
        if (!entity.txndate)
            entity.txndate = dateSvc.serverDate
        if (!entity.lguid)
            entity.lguid = env.ORGID
        txnRef.insertRef( entity.faas.objid, entity.objid, 'FAAS is currently referenced by Cancellation No. ' + entity.txnno + '.')
        if (!entity.state ) 
            entity.state = STATE_DRAFT
        em.create(entity)
        saveSignatory(entity)
        return entity
    }


    @ProxyMethod
    public def updateCancelledFaas( entity) {
        def old = openCancelledFaas(entity)
        if (old.state == STATE_APPROVED ) 
            throw new Exception('Document has already been approved.')
        em.update(entity)
        return entity 
    }


    @ProxyMethod
    public void deleteCancelledFaas( entity ) {
        txnRef.delete(entity.objid)
        em.deleteSignatories(entity)
        em.deleteRequirements(entity)
        em.deleteTasks(entity)
        em.delete(entity)
    }


    @ProxyMethod
    public def openCancelledFaas( entity ) {
        entity = em.findById(entity)
        if (!entity)
            throw new Exception('Record does not exist or has already been deleted.')
        return entity 
    }


    @ProxyMethod
    public def submitForApproval(entity){
        entity.state = STATE_FORAPPROVAL
        updateCancelledFaas(entity)
        return entity 
    }


    @ProxyMethod
    public def disapproveFaasCancellation( entity ) {
        entity.state = STATE_DRAFT
        updateCancelledFaas(entity)
        return entity 
    }


    @ProxyMethod
    public def approveFaasCancellation( entity ) {
        entity.state = STATE_APPROVED
        updateCancelledFaas(entity) 
        cancelFaas(entity)
        txnRef.delete(entity.objid)
        return entity 
    }

    @ProxyMethod
    public def approveFaasCancellationByProvince( entity ) {
        return approveFaasCancellation(entity)
    }


    @ProxyMethod
    public def getCancelReasons(  ) {
        return reasonSvc.getList([:])    
    }


    @ProxyMethod
    public void updateSignatoryInfo(task) {
        if (task.state.matches('assign.*') || env.action?.matches('return.*'))
            return 
        if (!task.state.matches('taxmapper|taxmapper_chief|appraiser|appraiser_chief|provrecommender|recommender|approver|provtaxmapper|provtaxmapperchief|provappraiser|provappraiserchief'))
            return

        def state = task.state.replaceAll('_', '') 

        def updatefields = '';
        updatefields += state + '_taskid = $P{' + state + '_taskid},'
        updatefields += state + '_objid = $P{' + state + '_objid},'
        updatefields += state + '_name = $P{' + state + '_name},'
        updatefields += state + '_title = $P{' + state + '_title},'
        updatefields += state + '_dtsigned = $P{' + state + '_dtsigned}'

        def params = [
            objid                   : task.refid,
            (state + '_taskid')     : task.objid,
            (state + '_objid')      : task.actor.objid,
            (state + '_name')       : task.actor.name,
            (state + '_title')      : task.actor.title,
            (state + '_dtsigned')   : task.enddate,
            updatefields            : updatefields,
        ]
        em.updateSignatoryInfo(params)
    }    

    @ProxyMethod
    public void saveSignatory( signatory ) {
        if (signatory)
            em.save(signatory, SCHEMA_SIGNATORY)
    }


    @ProxyMethod
    public def buildReportData(entity){
        entity = openCancelledFaas(entity)
        entity.putAll( em.read(entity, SCHEMA_SIGNATORY))

        if ('province'.equalsIgnoreCase(env.ORGCLASS))
            entity.salutation = 'To the Municipal Treasurer'
        else if ('municipality'.equalsIgnoreCase(env.ORGCLASS))
            entity.salutation = 'To the Provincial Treasurer'
        else 
            entity.salutation = 'To the City Treasurer'

        entity.location = 'Barangay ' + entity.barangay 

        def parentlgu = em.findParetLguByBarangayId(entity)
        if(parentlgu){
            if (parentlgu.iscity == 1){
                entity.location += ', City of ' + parentlgu.cityprov
            }
            else {
                entity.location += ', Municipality of ' + parentlgu.munidistrict 
                entity.location += ', ' + parentlgu.cityprov 
            }
        }

        if (!entity.approver || !entity.approver.dtsigned){
            entity.approver = [dtsigned:entity.txndate]
        }

        return entity 
    }


    void validateFaas(faas){
        //validate state 
        def state = faasSvc.getState(faas.objid)
        if ( state == 'CANCELLED') throw new Exception('FAAS has already been cancelled.')
        if ( state != 'CURRENT') throw new Exception('FAAS is not yet approved. Only current record is allowed.')

        //if land check that all improvements are cancelled
        if (faas.rputype == 'land'){
            def improvements = em.getNonCancelledImprovements([realpropertyid:faas.realpropertyid])

            if (improvements.size() == 1) {
                throw new Exception('Improvement with TD No. ' + improvements[0].tdno + ' is not yet cancelled. Cancel this improvement first before cancelling this land.')
            }
            else if( improvements.size() > 1 ){
                def tdnos = improvements.tdno.join(', ')
                throw new Exception('Improvements with TD No(s). ' + tdnos + ' are not yet cancelled. Cancel these improvements first before cancelling this land.')
            }
        }
    }

    void cancelFaas(entity){
        if (!entity.dtapproved)
            entity.dtapproved = dateSvc.serverDate
        def pdate = dateSvc.parseDate(entity.dtapproved, null)

        def faas = entity.faas 

        def cancelinfo = [
            objid : faas.objid,
            cancelreason : entity.reason.code,
            canceldate   : pdate.date, 
            cancelledyear : pdate.year, 
            cancelledqtr  : pdate.qtr,
            cancelledmonth : pdate.month,
            cancelledday : pdate.day 
        ] 

        em.cancelFaas(cancelinfo)
        em.cancelRpu([objid:faas.rpuid])
        if (faas.rputype == 'land'){
            em.cancelRealProperty([objid:faas.realpropertyid])
        }
    }
}

