import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class ConsolidationListService extends ActiveListService
{
	@ActiveDB('consolidation')
	def em
	
	@Service('ListUtilService')
	def listSvc 


    @Service('NumberService')
    def numSvc
	
    @ProxyMethod
    public def getColumns(params) {
        return [
          [name:"txnno", caption:"Txn No.", width:70],
          [name:"txndate", caption:"Txn Date", width:80],
          [name:"ry", caption:"RY", width:50, type:'integer', format:'0000'],
          [name:"newtdno", caption:"New TD No.", width:100],
          [name:"rp.pin", caption:"New PIN", width:180],
          [name:"owner.name", caption:"New Owner Name", width:250],
          [name:"owner.address", caption:"New Owner Address", width:250],
          [name:"rpu.totalareasqm", caption:"New Area (sqm)", width:120, type:'decimal', format:'#,##0.00'],
          [name:"rpu.totalareaha", caption:"New Area (ha)", width:120, type:'decimal', format:'#,##0.0000'],
          [name:"state", caption:"State", width:100],
        ]
    }

	@ProxyMethod
    public def getNodes(o) {
        return [
           [name:'all', caption:'All', leaf:true, folder:true, allowSearch:true],
           [name:'receiver', caption:'Review and Verification', leaf:true, folder:true, allowSearch:true],
           [name:'assign-examiner', caption:'For Examination', leaf:true, folder:true, allowSearch:true],
           [name:'examiner', caption:'Examination', leaf:true, folder:true, allowSearch:true],
           [name:'assign-taxmapper', caption:'For Taxmapping', leaf:true, folder:true, allowSearch:true],
           [name:'taxmapper', caption:'Taxmapping', leaf:true, folder:true, allowSearch:true],
           [name:'assign-taxmapping-approval', caption:'For Taxmapping Chief Approval', leaf:true, folder:true, allowSearch:true],
           [name:'taxmapper_chief', caption:'Taxmapping Chief Approval', leaf:true, folder:true, allowSearch:true],
           [name:'assign-appraiser', caption:'For Appraisal', leaf:true, folder:true, allowSearch:true],
           [name:'appraiser', caption:'Appraisal', leaf:true, folder:true, allowSearch:true],
           [name:'assign-appraisal-chief', caption:'For Appraisal Chief Approval', leaf:true, folder:true, allowSearch:true],
           [name:'appraiser_chief', caption:'Appraisal Chief Approval', leaf:true, folder:true, allowSearch:true],
           [name:'assign-recommender', caption:'For Recommending Approval', leaf:true, folder:true, allowSearch:true],
           [name:'recommender', caption:'Recommending Approval', leaf:true, folder:true, allowSearch:true],
           [name:'assign-approver', caption:'For Assessor Approval', leaf:true, folder:true, allowSearch:true],
           [name:'approver', caption:'Assessor Approval', leaf:true, folder:true, allowSearch:true],
           [name:'draft', caption:'Draft', leaf:true, folder:true, allowSearch:true],
           [name:'approved', caption:'Approved', leaf:true, folder:true, allowSearch:true],
        ];
    }   

    void beforeList( params ) {
        params.state = (params.state ? params.state : '%')
 		params.searchtext = (params.searchtext ? params.searchtext : '%')
 		params._pagingKeys = ' c.objid '
 		params.filters = '';
		
		def whereclause = ''

        switch(params.name) {
            case 'all':
                break;
            case 'draft':
                params.state = 'DRAFT'
                if (whereclause) whereclause += ' AND ' 
                whereclause += ' c.state = $P{state}  '
                break;
            case 'approved':
                params.state = 'APPROVED'
                if (whereclause) whereclause += ' AND ' 
                whereclause += ' c.state = $P{state}  '
                break;
            default:
                params.taskstate = params.name
                if (whereclause) whereclause += ' AND ' 
                whereclause += ' tsk.state = $P{taskstate} AND tsk.enddate IS NULL  '

                if (params.mytask ){
                    params.userid = env.USERID 
                    if (whereclause) whereclause += ' AND ' 
                    whereclause += ' tsk.assignee_objid = $P{userid} '
                }
        }

        if (whereclause) {
            params.filters = ' AND ' + whereclause
        }
    }   
}

