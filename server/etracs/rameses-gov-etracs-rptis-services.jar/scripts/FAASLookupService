import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class FAASLookupService
{
	@ActiveDB('faas')
	def em 
	
	@Service('RPTUtil')
	def utilSvc
	

	@ProxyMethod
	public def lookupFaas( params ) {
		params.fixfilters = ''
		params.filters    = ''
		params.orderby    = ''
		params.columns    = getColumns()

		if (params.state){
			params.fixfilters += ' and f.state = $P{state} '
		}
		if (params.rputype){
			params.fixfilters += ' and r.rputype = $P{rputype} '
		}
		if (params.taxpayerid){
			params.fixfilters += ' and f.taxpayer_objid = $P{taxpayerid}'
		}

		if (params.searchtext){
			params.orderby = ' order by f.tdno '
			params.searchtext 	= (params.searchtext ? params.searchtext : '') + '%';
			def filters = [
				' and fl.tdno LIKE $P{searchtext} ',
				' and fl.pin LIKE $P{searchtext} ',
				' and fl.owner_name LIKE $P{searchtext} ',
				' and fl.cadastrallotno LIKE $P{searchtext} ',
				' and fl.blockno LIKE $P{searchtext} ',
				' and fl.surveyno LIKE $P{searchtext} ',
				' and fl.trackingno LIKE $P{searchtext} ',
			]
			return utilSvc.getListFromQuery('faas:getLookupFaas', filters, params, 'f.objid');
		}
		else{
			return em.getLookupFaas(params)
		}
	}

	def getColumns(){
		return '''
			f.*,
			e.name as taxpayer_name, 
			e.address_text as taxpayer_address,
			pc.code AS classification_code, 
			pc.code AS classcode, 
			pc.name AS classification_name, 
			pc.name AS classname, 
			r.ry, r.rputype, r.totalmv, r.totalav,
			r.totalareasqm, r.totalareaha, r.suffix, r.rpumasterid, 
			rp.barangayid, rp.cadastrallotno, rp.blockno, rp.surveyno, rp.pintype, 
			rp.section, rp.parcel, rp.stewardshipno,
			b.name AS barangay_name,
			t.trackingno
		'''
	}



}

