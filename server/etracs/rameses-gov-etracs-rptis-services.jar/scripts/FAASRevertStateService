import com.rameses.annotations.*;
import com.rameses.rules.common.*;
import com.rameses.services.extended.*;


public class FAASRevertStateService  
{
	@Env 
	def env

	@ActiveDB('faas_revert')
	def em;

	@Service('RPTLedgerService')
	def ledgerSvc 

    @Service('RPTUtil')
    def util

    @Service(value='CloudNotificationService', connection='notification_proxy')
    def cloudNotificationSvc;
    
    @XConnection('async_remote') 
    def asyncConn;	

    @DataContext('faas_list')
    def faaslistDb


	@ProxyMethod
	public def revertStateToInterim(faas){
		def entity = em.findById(faas)
		if (!entity)
			throw new Exception('Record does not exist or has already been deleted.')
		if (entity.state != 'CURRENT')  
            throw new Exception('State is invalid. Only current state is allowed.');
        if (entity.datacapture == 0 || entity.datacapture == false)
            throw new Exception('Unable to process this record. Only Data Captured record is allowed.');

        revertLedgerToManual(entity)
        revertFaas(entity)
        return entity
	}


	void revertLedgerToManual(entity){
		def ledger = em.findLedgerByFaasId(entity)
		if (!ledger) return 

		em.clearLedgerFaasId(ledger)
		em.clearLedgerFaasIds(ledger)
	}


	/* delete ledger if no payments 
	** otherwise delete ledgerfaas and change state to pending
	*/
	void deleteLedger(entity){
		def ledger = em.findLedgerByFaasId(entity)
		if (!ledger) return 

		def credits = ledgerSvc.getLedgerCredits(ledger.objid)
		if (!credits){
			ledgerSvc.deleteLedger(ledger)
		}
		else {
			ledgerSvc.deleteLedgerFaases(ledger)
		}

		ledger.state = 'PENDING'
		ledgerSvc.updateState(ledger)
	}

    void revertFaas(entity){
    	entity.state = 'INTERIM'
    	em.updateFaasState(entity)
    	em.updateRpuState(entity)
    	if (entity.rputype == 'land')
    		em.updateRealPropertyState(entity)

    	def faaslist = [:]
    	faaslist.objid = entity.objid
    	faaslist.state = entity.state
    	faaslist.taskid = null
    	faaslist.taskstate = null
    	faaslist.assignee = null
    	faaslistDb.update(faaslist)
    }
}

