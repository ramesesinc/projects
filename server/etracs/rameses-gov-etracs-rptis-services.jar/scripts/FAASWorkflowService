import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.util.*
import com.rameses.services.extended.*


class FAASWorkflowService extends ActiveWorkflowService
{
	@ActiveDB('faas_task')
	def taskDB;

	@Service('NotificationService')
	def notificationService

	@Service('FAASService')
	def faasSvc 


	@Service('RPTTrackingService')
	def trackingSvc;

	@ActiveDB('faas_list')
	def faaslistEm

	String processname = 'faas'


	@ProxyMethod
	public def findReturnToInfo( param ) {
		return taskDB.findReturnToInfo(param)	
	}

	public void beforeCreateTask(task) {
		def assignee = [objid:env.USERID, name:env.FULLNAME, title:env.JOBTITLE]
		if ( env.action?.matches('return.*')){
			def returnto = findReturnToInfo(task)
			if (!returnto) 
				throw new Exception('This document did not pass from ' + task.state + '.\nReturn task to another personnel.')

			env.returnto = returnto.assignee
			task.assignee = assignee
		}
		else if ( ! task.state.toLowerCase().matches('assign.*')){
			task.assignee = assignee
		}
	}

	public void afterCreateTask(task){
		def msg = '';
		if (task.state.matches('assign.*'))
			msg = 'FAAS is already submitted ' + task.title + '.'
		else
			msg = 'FAAS is currently for ' + task.title + ' by ' + task.assignee.name + '.'
		faaslistEm.updateFaasList(env.data)
	}
	

	public void afterOpenTask(task) {
		if (task.state.matches('assign.*'))
			task.owner = true 

		task.data = faasSvc.openFaas([objid:task.refid])
		removeUserNotification(task)
	}

	public void afterSignal(Object result) {
		if (result && result.task && !result.data)
			result.data = faasSvc.openFaas([objid:result.task.refid])
	}


	public void afterCloseTask(task){
		faasSvc.updateSignatoryInfo(task)

		if (env.data.parentfaasid){
			saveNewTask(task, env.data.parentfaasid )
		}		

		faasSvc.getAffectedRpus(env.data).each{
			if( it.newfaasid){
				saveNewTask(task, it.newfaasid)
			}
		}
		env.data.backtaxes?.each{
			if(faasSvc.faasExist(it)){
				saveNewTask(task, it.objid)
			}
		}
	}

	void saveNewTask(task, refid){
		def t = [:]
		t.putAll(task)
		t.objid = 'T' + new java.rmi.server.UID()
		t.refid = refid
		if (t.signature && t.signature.trim().length() > 0){
			Base64Cipher cipher = new Base64Cipher()
			def map = cipher.decode(t.signature)
			map.taskid = t.objid 
			t.signature = cipher.encode(map)
		}
		taskDB.save(t)
		faasSvc.updateSignatoryInfo(t)
	}

	void removeUserNotification(task){
		if (task.assignee?.objid == env.USERID )
			removeNotification(task)
	}

	def getNotificationMessage(task){
		if (task?.state?.matches('assign.*')){
			return notifyGroup(task)
		}
		else if (env.action?.matches('return.*')){
			return notifyAssignee(task)
		}
		else if (env.prevtask?.state.matches('assign.*')){
			removeNotification(task)
		}
	}


	void removeNotification(task) {
		if (task){
        	notificationService.removeMessage([objid:task.refid])
		}
	}


	def notifyGroup(task){
		def faas = env.data 
		def msg = faas.txntype.name +  ' of FAAS ' + faas.fullpin + ' (' + task.state + ')'
        return [
            objid     		: task.refid,
            senderid  		: env.prevtask?.actor?.objid,
            sender    		: env.prevtask?.actor?.name,
            recipientid   	: task.state,
            recipienttype 	: 'group',
            message   		: msg,
            filetype  		: 'faas',
            data 	  		: [taskid: task.objid],
        ]
	}

	def notifyAssignee( task ) {
		def faas = env.data 
		taskDB.updateTaskAssignee([
			objid 			: task.objid, 
			assigneeid 		: env.returnto.objid,
			assigneename 	: env.returnto.name,
			assigneetitle 	: env.returnto.title
		])

        return [
            objid     : task.refid,
            recipientid : (env.returnto ? env.returnto.objid : task.assignee.objid),
            recipienttype : 'user',
            senderid  : task.assignee.objid,
            sender    : task.assignee.name,
            message   : 'FAAS No. ' + ( faas.tdno ? faas.tdno : faas.utdno ) + '   was resent by ' + env.prevtask?.actor?.name,
            filetype  : 'faas',
            data 	  : [taskid: task.objid],
        ]
	}

}

