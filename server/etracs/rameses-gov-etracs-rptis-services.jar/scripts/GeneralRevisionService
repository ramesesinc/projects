import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;
import com.rameses.util.*;

class GeneralRevisionService
{
	
	@ActiveDB('generalrevision')
	def grdb 

	@PersistenceContext('rpt')
	def em
    
	@Env
	def env

	@Service('FAASService')
	def faasSvc 


	@Service('RPUService')
	def rpuSvc

	@Service('RealPropertyService')
	def rpSvc 


    @Service('Var')
	def var

	
	@Service('RPTUtil')	
	def utilSvc

	@DataContext('batchgr_error')
	def em_error 



	@ProxyMethod
	public def initOnlineGeneralRevision( info ) {
		def faas = initGeneralRevision(info)
		faasSvc.createFaas(faas)
		return faas 
	}



	@ProxyMethod
	public def initGeneralRevision( info ) {
		utilSvc.required('Property to process', info.faas)
		utilSvc.required('New Revision Year', info.newry)
		info.txntype = faasSvc.getTxnType('GR');
		def faas = faasSvc.initTransaction(info)
		
		if (faas.rpu.rputype == 'land'){
			faas.rpu.realpropertyid = faas.rp.objid
		}
		else {
			def landrpu = grdb.findCurrentRevisedLandRpu([objid:faas.rpu.landrpuid, ry:info.newry])
			if (!landrpu)
				landrpu = grdb.findCurrentRevisedLandRpuByPin([pin:faas.rp.pin, ry:info.newry])
			if (!landrpu)
				landrpu = grdb.findRevisedLandRpu([previd:faas.rpu.landrpuid, ry:info.newry])
			if (!landrpu) 
				landrpu = grdb.findRevisedLandByRealPropertyId([realpropertyid:faas.rpu.realpropertyid, ry:info.newry])
			if (!landrpu) 
				throw new Exception('Land RPU is not yet revised for Revision Year ' + info.newry + '.')
			faas.rp = rpSvc.open([objid:landrpu.realpropertyid])
			faas.realpropertyid = faas.rp.objid
			faas.rpu.realpropertyid = faas.rp.objid 
			faas.rpu.landrpuid = landrpu.objid 
		}
		faas.rpu.ry = info.newry
		faas.rp.ry = info.newry 
		faas.rpu.rp = faas.rp
		faas.restrictions.each{ it.objid = 'FR' + new java.rmi.server.UID()}
		rpuSvc.reviseRpu(faas.rpu)
		return faas 
	}

	@ProxyMethod
	public def createDataCaptureGeneralRevision( info ) {
		def faas = initGeneralRevision( info )
		em_error.find([objid:info.faas.objid]).delete()
		return faasSvc.createFaas(faas)
	}	


	/*--------------------------------------------------------
	*
	* Support Methods
	*
	* --------------------------------------------------------*/

	/* returns the list of revision settings which is greater than the specified ry*/
	@ProxyMethod
	public def getRyList(lguid, ry, rputype ) {
		lguid = (lguid ? lguid : var.lgu_objid)
		ry = (ry == null ? var.current_ry : ry)
		rputype = (rputype ? rputype : 'LAND')
		return em.sqlContext.createNamedQuery('generalrevision:getRyList' + rputype.toUpperCase())
				.setParameters([lguid:lguid, ry:ry]).resultList.ry.unique() 
	}
}

