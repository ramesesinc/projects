import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.util.*
import com.rameses.services.extended.*


public class LandRYSettingService
{
    @Env
    def env 

    @ActiveDB('landrysetting')
    def em

    @DataContext('propertyclassification')
    def propertyclassification

    @Service('LandRYSettingListService')
    def listSvc 
    
    @Service('RYSettingService')
    def rysettingSvc
    
    @Service('Var')
    def var 

    @Service('RPTUtil')
    def util

    @Service()
    def self
    
    def SCHEMA_LANDASSESSLEVEL      = 'landassesslevel' 
    def SCHEMA_LANDASSESSLEVELRANGE = 'landassesslevelrange' 
    def SCHEMA_SPECIFICCLASS        = 'lcuvspecificclass' 
    def SCHEMA_SUBCLASS             = 'lcuvsubclass' 
    def SCHEMA_STRIPPING            = 'lcuvstripping' 
    def SCHEMA_LANDADJUSTMENTTYPE   = 'landadjustmenttype' 

    def STATE_DRAFT     = 'DRAFT'
    def STATE_APPROVED  = 'APPROVED'

    def SETTING_TYPE    = 'land' 
    
    
    @ProxyMethod
    public boolean settingExists() {
        def settings = listSvc.getList( null )
        return settings.size() > 0
    }
    
    
    @ProxyMethod
    public List getPropertyClassifications() {
        return propertyclassification.find([state:'APPROVED']).orderBy('orderno').list()
    }
    
    
    @ProxyMethod
    public def create( entity ) {
        entity.state = STATE_DRAFT
        buildAppliedToInfo(entity)
        validate( entity )
        em.create(entity )
        loadInitialAssessesLevels(entity)
        rysettingSvc.createLgus( SETTING_TYPE, entity )
        return entity 
    }


    @ProxyMethod 
    public Map open( entity ) {
        entity = em.read(entity)
        entity.lgus = rysettingSvc.loadLgus(SETTING_TYPE, entity.objid)
        return entity
    }


    @ProxyMethod
    public def update( entity ) {
        buildAppliedToInfo(entity)
        validate( entity )
        em.update( entity)
        rysettingSvc.createLgus(SETTING_TYPE, entity )
        return entity 
    }


    @ProxyMethod
    public void delete( entity ) {
        em.deleteLandAdjustmentTypeClassificationBySettingId(entity)
        em.deleteLandAdjustmentTypesBySettingId(entity)
        em.deleteStrippingsBySettingId(entity)
        em.deleteSubClassesBySettingId(entity)
        em.deleteSpecificClassesBySettingId(entity)
        em.deleteRangesBySettingId(entity)
        em.deleteAssessLevelsBySettingId(entity)
        em.deleteRySettingLgu(entity)
        em.delete(entity)
    }

    @ProxyMethod
    public def approve( entity ) {
        checkApproved( entity )
        entity.state = STATE_APPROVED
        em.update(SCHEMA_LANDRYSETTING, entity)    
        return entity
    }
    

    

    /*----------------------------------------------------------
    * AssessLevel Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public List getAssessLevels( landrysettingid )  {
        return em.getAssessLevels([landrysettingid:landrysettingid]).each{
            it.fixrate = util.toBoolean(it.fixrate, true)
        }
    }


    @ProxyMethod
    public void saveAssessLevel( assesslevel ) {
        em.save(assesslevel, SCHEMA_LANDASSESSLEVEL)
        if( util.isTrue(assesslevel.fixrate)) {
            deleteRangesByAssessLevelId(assesslevel.objid)
        }
    }

    
    @ProxyMethod
    public void deleteAssessLevel( assesslevel ) {
        deleteRangesByAssessLevelId(assesslevel.objid)
        em.delete(assesslevel, SCHEMA_LANDASSESSLEVEL)
    }


    @ProxyMethod
    public List getRanges( landassesslevelid )  {
        return em.getAssessLevelRanges([landassesslevelid:landassesslevelid])
    }


    @ProxyMethod
    public def saveRange( range  ) {
        em.save(range,SCHEMA_LANDASSESSLEVELRANGE)
    }


    @ProxyMethod
    public def deleteRange( range  ) {
        em.delete(range, SCHEMA_LANDASSESSLEVELRANGE)
    }

    @ProxyMethod
    public void deleteRangesByAssessLevelId(landassesslevelid){
        em.deleteRangesByAssessLevelId([landassesslevelid:landassesslevelid])
    }



    /*----------------------------------------------------------
    * SPECIFICCLASS SUPPORT
    ----------------------------------------------------------*/
    
    @ProxyMethod
    public def getSpecificClasses( landrysettingid, classificationid ){
        return em.getSpecificClasses([landrysettingid:landrysettingid, classification_objid:classificationid])
    }

    
    @ProxyMethod
    public void saveSpecificClass( specificclass ) {
        em.save(specificclass, SCHEMA_SPECIFICCLASS)
    }

    
    @ProxyMethod
    public void deleteSpecificClass( specificclass ) {
        em.deleteSubclasses([specificclass_objid:specificclass.objid])
        em.delete(specificclass, SCHEMA_SPECIFICCLASS)
    }



    /*----------------------------------------------------------
    * SUBLCLASS SUPPORT
    ----------------------------------------------------------*/
    @ProxyMethod
    public def getSubClasses( specificclassid ){
        return em.getSubClasses([specificclass_objid:specificclassid])
    }
    
    
    @ProxyMethod
    public void saveSubClass( subclass ) {
        em.save(subclass, SCHEMA_SUBCLASS)
    }

    
    @ProxyMethod
    public void deleteSubClass( subclass ) {
        em.delete(subclass, SCHEMA_SUBCLASS)
    }



    /*----------------------------------------------------------
    * STRIPPING SUPPORT
    ----------------------------------------------------------*/
    @ProxyMethod
    public def getStrippings( landrysettingid, classificationid ){
        return em.getStrippings([landrysettingid:landrysettingid, classification_objid:classificationid])
    }
    

    @ProxyMethod
    public void saveStripping( stripping ) {
        em.save(stripping, SCHEMA_STRIPPING)
    }

    
    @ProxyMethod
    public void deleteStripping( stripping ) {
        em.delete(stripping, SCHEMA_STRIPPING)
    }
    
    

    /*----------------------------------------------------------
    * LandAdjustmentTypes Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public List getLandAdjustmentTypes( landrysettingid )  {
        return em.getLandAdjustmentTypes([landrysettingid:landrysettingid])
    }


    @ProxyMethod
    public void saveLandAdjustmentType( landadjustmentype ) {
        em.save(landadjustmentype, SCHEMA_LANDADJUSTMENTTYPE)
        deleteLandAdjustmentTypeClassifications(landadjustmentype)
        landadjustmentype.classifications.each{
            insertLandAdjustmentTypeClassification(landadjustmentype, it.classification)
        }
    }
    

    @ProxyMethod
    public def openLandAdjustmentType( objid  ) {
        def adjustment = em.read([objid:objid], SCHEMA_LANDADJUSTMENTTYPE) 
        if ( adjustment ){
            adjustment.classifications = getAdjustmentClassifications( adjustment )
        }
        return adjustment 
    }

    @ProxyMethod
    public List getAdjustmentClassifications( adjustment ){
        return em.getLandAdjustmentTypeClassifications([landadjustmenttypeid:adjustment.objid])
    }


    @ProxyMethod
    public void deleteLandAdjustmentType( landadjustmenttype ) {
        deleteLandAdjustmentTypeClassifications(landadjustmenttype)
        em.delete(landadjustmenttype, SCHEMA_LANDADJUSTMENTTYPE)
    }

    void deleteLandAdjustmentTypeClassifications(landadjustmenttype){
        em.deleteLandAdjustmentTypeClassifications([landadjustmenttypeid:landadjustmenttype.objid])
    }

    void insertLandAdjustmentTypeClassification(landadjustmenttype, classification){
        em.insertLandAdjustmentTypeClassification([
            landrysettingid      : landadjustmenttype.landrysettingid,
            landadjustmenttypeid : landadjustmenttype.objid,
            classification_objid : classification.objid,
        ])
    }
    


    /*----------------------------------------------------------
    * COPY Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public Map copy( objid, ry ) {
        //create setting 
        def oldsettingid = objid
        def setting = em.read([objid:objid] )
        if (!setting) throw new Exception('Setting does not exists or has already been deleted.')

        setting.previd = null
        setting.objid = util.generateId('LS')
        setting.ry = ry  
        setting.appliedto = null
        em.create( setting )
        
        copyAssessLevels( setting.objid, oldsettingid )
        copyLcuvs( setting.objid, oldsettingid )
        copyLandAdjustmentTypes( setting.objid, oldsettingid )
        return open( setting )
    }

    
    @ProxyMethod
    public Map reviseSettings( newry, copyYear ) {
        util.required('Copy Year', copyYear )
        if( newry <= copyYear ) throw new Exception('New Revision Year must be greater than copy year.')
        def settings = em.getSettingsByRy([ry:copyYear])
        if( !settings ) throw new Exception('Revision Year ' + copyYear  + ' settings are not defined.')
        
        settings.each{ setting ->
            def oldsettingid = setting.objid 
            setting = em.read([objid:oldsettingid] )
            setting.previd = oldsettingid
            setting.objid = util.generateId('LS')
            setting.ry = newry  
            if ( ! isDuplicateSetting( setting ) ){
                em.create(setting )
                copyAssessLevels( setting.objid, oldsettingid )
                copyLcuvs( setting.objid, oldsettingid )
                copyLandAdjustmentTypes( setting.objid, oldsettingid )
                rysettingSvc.copyLgus( SETTING_TYPE, setting.objid, oldsettingid)
            }
        }
        return open( settings[0] )
    }


    @ProxyMethod
    public void syncData( msg ) {
        self.doSyncData(msg)
    }

    @Async
    @ProxyMethod
    public void doSyncData( msg ) {
        if (msg.msgtype == 'landrysetting'){
            em.save( msg.data )
            rysettingSvc.createLgus( SETTING_TYPE, msg.data )
        }
        else if (msg.msgtype == 'landassesslevels'){
            msg.data.each{lvl -> 
                println 'updating landassesslevel -> ' + lvl.objid 
                saveAssessLevel(lvl)
                lvl.ranges.each{ range ->
                    println 'updating landassesslevelrange -> ' + range.objid 
                    saveRange(range)
                }
            }
        }
        else if (msg.msgtype == 'specificclasses'){
            msg.data.each{spc ->
                println 'updating specificclass -> ' + spc.objid 
                saveSpecificClass(spc)
                spc.subclasses.each{sub ->
                    println 'updating subclass -> ' + sub.objid 
                    saveSubClass(sub)
                }
            }
        }
        else if (msg.msgtype == 'strippings'){
            msg.data.each{
                saveStripping(it)
            }
        }
        else if (msg.msgtype == 'adjustmenttypes'){
            msg.data.each{
                saveLandAdjustmentType(it)
            }
        } 
    }


    /*----------------------------------------------------------
    * Support Methods
    ----------------------------------------------------------*/
    void validate( entity ) {
        if( entity.ry <= 0 ) 
            throw new Exception('Revision Year must be greater than zero.')
    }
    

    boolean isDuplicateSetting( entity ) {
        def data = em.findDuplicate(entity)
        return data != null 
    }
    
    
    void buildAppliedToInfo(entity){
        if (entity.lgus == null)
            entity.lgus = []
        entity.appliedto = entity.lgus.sort{a,b -> a.lguname <=> b.lguname}.lguname.join(', ')
    }


    void loadInitialAssessesLevels(entity){
        getPropertyClassifications().each{
            saveAssessLevel([
                objid               : it.objid,
                landrysettingid     : entity.objid,
                classification_objid: it.objid,
                classification      : it,
                code                : it.code,
                name                : it.name, 
                fixrate             : true,
                rate                : 0.0
            ])
        }
    }


    void copyLandAdjustments( newsettinTypegid, oldsettingid ) {
        def landadjustments = getLandAdjustments( oldsettingid )
        landadjustments.each {
            it.previd = it.objid
            it.objid = util.generateId('LA')
            it.landrysettingid = newsettingid
            saveLandAdjustmentType( it )
        }
    }
    
    void copyLcuvs( newsettingid, oldsettingid ) {
        getPropertyClassifications().each{ pc ->
            def specificclasses = getSpecificClasses( oldsettingid, pc.objid )
            specificclasses.each { sc ->
                sc.previd = sc.objid
                sc.objid = util.generateId('SC')
                sc.landrysettingid = newsettingid 
                saveSpecificClass( sc )
                
                def subclasses = getSubClasses( sc.previd )
                subclasses.each { sbc ->
                    sbc.previd = sbc.objid
                    sbc.objid = util.generateId('SB')
                    sbc.specificclass_objid = sc.objid
                    sbc.landrysettingid = newsettingid 
                    saveSubClass( sbc )
                }
            }
            
            def strippings = getStrippings( oldsettingid, pc.objid )
            strippings.each { st ->
                st.previd = st.objid
                st.objid = util.generateId('ST')
                st.landrysettingid = newsettingid 
                saveStripping( st )
            }
        }
    }
    
    void copyAssessLevels( newsettingid, oldsettingid ) {
        def assesslevels = getAssessLevels( oldsettingid )
        assesslevels.each { al ->
            al.previd = al.objid 
            al.objid = util.generateId('AL')
            al.landrysettingid = newsettingid
            saveAssessLevel( al )

            getRanges(al.previd).each{ range ->
                range.previd = range.objid 
                range.objid = util.generateId('RA')
                range.landassesslevelid = al.objid 
                range.landrysettingid = newsettingid
                saveRange( range )
            }
        }
    }

    void copyLandAdjustmentTypes( newsettingid, oldsettingid ) {
        def landadjustments = getLandAdjustmentTypes( oldsettingid );
        landadjustments.each { la ->
            la.previd = la.objid;
            la.objid =  util.generateId('LA') 
            la.landrysettingid = newsettingid
            saveLandAdjustmentType( la );

            def adjclassifications = getAdjustmentClassifications([objid:la.previd])
            adjclassifications.each{ac ->
                ac.objid = la.objid 
                ac.landrysettingid = newsettingid
                insertLandAdjustmentTypeClassification(ac, ac.classification)
            }
        }

    }


    void checkApproved( entity ){
        def old = open(entity)
        if (old.state == STATE_APPROVED)
        throw new Exception('Setting has already been approved.')
    }


    @Async
    @ProxyMethod
    public def exportData(setting) {
        setting = open(setting);
        setting.type = 'land';
        setting.levels = getAssessLevels(setting.objid);
        setting.ranges = [];
        setting.levels.each{
            setting.ranges += getRanges(it.objid);
        }
        setting.specificclasses = getSpecificClasses(setting.objid, '%');
        setting.subclasses = [];
        setting.specificclasses.each{
            setting.subclasses += getSubClasses(it.objid);
        }
        setting.strippings = getStrippings(setting.objid, '%');
        setting.adjustmenttypes = getLandAdjustmentTypes(setting.objid);
        setting.adjustmenttypes.each{
            it.classifications = getAdjustmentClassifications(it)
        }
        return setting
    }


    @Async
    @ProxyMethod
    public def importData(setting) {
        if (setting.type != 'land')
            throw new Exception('Invalid data. Imported data is for ' + setting.type.toUpperCase() + ' setting.');
            
        try{
            create(setting);
        }
        catch( e){
            update(setting);
        }
        
        setting.levels.each{
            saveAssessLevel(it);
        }
        setting.ranges.each{
            saveRange(it);
        }
        setting.specificclasses.each{
            saveSpecificClass(it);
        }
        setting.subclasses.each{
            saveSubClass(it);
        }
        setting.strippings.each{
            saveStripping(it);
        }
        setting.adjustmenttypes.each{
            saveLandAdjustmentType(it);
        }
    }

}
