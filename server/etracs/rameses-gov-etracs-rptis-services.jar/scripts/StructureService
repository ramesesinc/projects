import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import com.rameses.util.*

class StructureService extends ActiveCrudListService
{
	@ActiveDB('structure')
	def em


	void beforeList(params){
		if (params == null) params = [:]
		params.searchtext = (params.searchtext ? params.searchtext :'')+'%'
	}

	void afterCreate(entity){
		saveStructureMaterial( entity )
	}

	void afterUpdate(entity){
		saveStructureMaterial( entity )
	}

	void afterOpen(entity){
		entity.materials = em.getStructureMaterials([structure_objid:entity.objid])
	}

	void beforeRemoveEntity(entity){
		em.deleteStructureMaterials([structure_objid:entity.objid])
	}


	@ProxyMethod
	public def getColumns( params ) {
		return [
			[name:"code", caption:"Code", width:80],
            [name:"name", caption:"Structure", width:250],
            [name:"indexno", caption:"Index No.", width:80],
            [name:"state", caption:"State", width:100],
            [name:"showinfaas", caption:"Show in FAAS", width:100, type:"boolean"],
		]	
	}


	@ProxyMethod
	public def getStructures( params ) {
		beforeList(params)
		return em.getStructures(params)
	}


	@ProxyMethod
	public def getMaterials( params ) {
		beforeList(params)
		return em.getMaterials(params)
	}


	void saveStructureMaterial( entity ){
		def oldMaterials 		= em.getStructureMaterials([structure_objid:entity.objid])
		if (!entity.materials)
			entity.materials = []
		def deletedMaterials 	= oldMaterials - entity.materials 
		def newMaterials 		= entity.materials - oldMaterials

		deletedMaterials.each{
			em.deleteStructureMaterial([structure_objid:entity.objid, material_objid:it.material.objid])
		}

		newMaterials.each{
			em.create(it, 'structurematerial')
		}
	}


	@Async
	@ProxyMethod
	public def exportData(params) {
		def structures = getStructures([:])
		structures.each{
			it.materials = em.getStructureMaterials([structure_objid:it.objid])
		}

		return [
			filetype: 'structure',
			structures: structures
		] 
	}

	@Async
	@ProxyMethod
	public def importData( data ) {
		if (data.filetype != 'structure')
			throw new Exception('Invalid data.')
		data.structures.each{
			save(it)
		}
	}

}
