import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;
import com.rameses.util.*


class SubdivisionFromConsolidationService
{
    @ActiveDB('subdivision')
    def em

    @ActiveDB('subdivisionfromcs')
    def adb 

    @ActiveDB('faas')
    def faasem

    @Env
    def env

    @Service('RPTTrackingService')
    def trackingSvc   

	@Service('WorkflowStateService')
    def workflowRef 

	@Service('SequenceService')
	def seqSvc

	@Service('FAASService')
	def faasSvc 

	@Service('RPTUtil')
	def util	

    @Service('DateService')
    def dtSvc	

    @Service('Var')
    def var     

    @Service('RPTLedgerService')
    def ledgerSvc    

    @Service('RPUService')
    def rpuSvc     

    @Service('TxnRefService')
    def txnRef    


    @Service('SubdivisionService')
    def subdivisionSvc

    @Service('LGUService')
    def lguSvc



	def TXNTYPE_SD = 'CS/SD'


	def SCHEMA_SUBDIVISION 		= 'subdivision'
	def SCHEMA_SUBDIVIDED_LAND 	= 'subdividedland'
	def SCHEMA_AFFECTED_RPU 	= 'affectedrpu'
	def SCHEMA_CONSOLIDATEDLAND = 'consolidatedland'

    def STATE_DRAFT             = 'DRAFT'
    def STATE_APPROVED          = 'APPROVED'
	def STATE_PENDING 			= 'PENDING'

    @ProxyMethod
    public def createSubdivision(info) {
        def pdate = dtSvc.parseCurrentDate()
        
        def subdivision  = [:]
        subdivision.putAll(info)
        subdivision.state = STATE_DRAFT
        subdivision.txnno = seqSvc.getNextFormattedSeries('SUBDIVISION')
        subdivision.txndate = pdate.date 
        subdivision.txntype = faasSvc.getTxnType(TXNTYPE_SD)
        subdivision.ry = util.toInteger(var.current_ry)
        subdivision.lguid = info.lgu.objid 
        subdivision.lgutype = info.lgu.lgutype
        subdivision.autonumber = util.toBoolean(var.td_autonumber, false)
        subdivision.effectivityyear = pdate.year + 1
        subdivision.effectivityqtr  = 1
    	em.create(subdivision)
    	workflowRef.insert(subdivision)
        trackingSvc.assignTrackingNo(subdivision, 'subdivision', 'Document is currently reviewed.')
    	return openSubdivision(subdivision.objid)
    }

    @ProxyMethod
    public def openSubdivision( objid ) {
        def subdivision = em.findSubdivisionById([objid:objid])
        subdivision.txntype = faasSvc.getTxnType(TXNTYPE_SD)
        subdivision.autonumber = util.toBoolean(subdivision.autonumber, false)
        loadConsolidatedLandAffectedRpus(subdivision)
        loadSignatories(subdivision)
        return subdivision 
    }

    @ProxyMethod
    public def loadSignatories(subdivision){
        def signatories = em.getSignatories(subdivision)
        signatories.each{
            subdivision[it.type] = it.assignee
        }
    }

    void loadConsolidatedLandAffectedRpus(subdivision){
        getConsolidatedLands(subdivision.objid).each{ consolidatedland ->
                def affectedrpus = adb.getAffectedRpusByConsolidatedLand([
                                        subdivisionid     : consolidatedland.subdivisionid,
                                        realpropertyid      : consolidatedland.rpid,
                                    ])
                checkAffectedRpus(affectedrpus)
                affectedrpus.each{arpu -> 
                    doCreateAffectedRpu(subdivision, arpu)
                }
        }
    }


    @ProxyMethod
    public def updateSubdivision(subdivision) {
    	em.update(subdivision)
    	return subdivision
    }

    @ProxyMethod
    public def deleteSubdivision( subdivision ) {
    	getConsolidatedLands(subdivision.objid).each{
    		txnRef.delete(it)
    		em.delete(it, SCHEMA_CONSOLIDATEDLAND)
    	}
    	subdivisionSvc.deleteSubdivision(subdivision)
    }



    @ProxyMethod
    public def findBarangayFromConsolidatedLands(subdivisionid) {
    	def brgy =  adb.findBarangayFromConsolidatedLands([subdivisionid:subdivisionid])
    	if (!brgy) throw new Exception('Consolidated Lands are not yet added.')
    	return lguSvc.lookupBarangayById(brgy.barangayid)
    }


	/*------------------------------------------------------------------------
 	*
 	* WORKFLOW SUPPORT
 	*
 	------------------------------------------------------------------------*/
    @ProxyMethod
    public def validateSubmit( subdivision ) {
        return subdivisionSvc.validateSubmit(subdivision)
    }


    /*===================================================-
    *
    * SUBDIVIDED LANDS SUPPORT
    *
    *====================================================*/    
    @ProxyMethod
    public def initSubdividedLand( subdivision) {
    	return subdivisionSvc.initSubdividedLand( subdivision )
    }

    @ProxyMethod
    public def updateSubdividedLand( sland ) {
    	return subdivisionSvc.updateSubdividedLand( sland )
    }

    @ProxyMethod
    public def getSubdividedLands( subdivisionid ) {
    	return 	subdivisionSvc.getSubdividedLands(subdivisionid)
    }


    @ProxyMethod
    public def createSubdividedLand( sland ) {
    	return subdivisionSvc.createSubdividedLand(sland)
    }

    @ProxyMethod
    public void deleteSubdividedLand(sland){
    	subdivisionSvc.deleteSubdividedLand(sland)
    }

    @ProxyMethod
    public def getAffectedRpus( subdivisionid ) {
    	return subdivisionSvc.getAffectedRpus(subdivisionid)
    }

    @ProxyMethod
    public def saveAffectedRpu( arpu ) {
        return subdivisionSvc.saveAffectedRpu(arpu)
    }


    /*===================================================-
    *
    * CONSOLIDATED LANDS SUPPORT
    *
    *====================================================*/
    @ProxyMethod
    public def getConsolidatedLands( subdivisionid ) {
    	adb.getConsolidatedLands([subdivisionid:subdivisionid])
    }


    @ProxyMethod
    public void validateConsolidatedLand( consolidatedland ) {
    	util.required('TD No.', consolidatedland.faas);

        //check duplicate entry 
        def dup = adb.findDuplicateConsolidatedLand([subdivisionid:consolidatedland.subdivisionid, landfaasid:consolidatedland.faas.objid])
        if (dup) throw new Exception('Duplicate item is not allowed.')

        //check same barangay consolidation
        if (util.isTrue(var.consolidation_allow_same_barangay_property_only)){
            def brgy = em.findBarangayId([objid:consolidatedland.subdivisionid])
            if (brgy.barangayid != consolidatedland.faas.barangayid ){
                throw new Exception('Consolidation is allowed only for properties within the same barangay.')
            }
        }

        //check allow with balance
        if (util.toBoolean(var.allow_consolidation_with_balance, false) == false){
          ledgerSvc.checkLedgerBalance(consolidatedland.faas.objid)
        }
    }

   	@ProxyMethod
   	public def saveConsolidatedLand( consolidatedland ) {
   		em.save(consolidatedland, SCHEMA_CONSOLIDATEDLAND)	
        txnRef.insertRef(consolidatedland.landfaasid, consolidatedland.subdivisionid, 'FAAS is currently referenced by Subdivision No. ' + consolidatedland.txnno + '.')
        createAffectedRpusByConsolidatedLand(consolidatedland)
   		return consolidatedland
   	}

   	@ProxyMethod
   	public void deleteConsolidatedLand( consolidatedland ) {
   		def affectedrpus = adb.getAffectedRpusByConsolidatedLandId([landfaasid:consolidatedland.landfaasid ])
        adb.deleteAffectedRpuByLandFaasId(consolidatedland)
        affectedrpus.each{ arpu ->
            rpuSvc.deleteRpu(arpu)
            txnRef.delete(arpu)
        }
   		em.delete(consolidatedland, SCHEMA_CONSOLIDATED_LAND)
   	}
    

    def createAffectedRpusByConsolidatedLand(consolidatedland){
        def affectedrpus = adb.getAffectedRpusByConsolidatedLand([
                                consolidationid     : consolidatedland.consolidationid,
                                realpropertyid      : consolidatedland.rpid,
                            ])
        checkAffectedRpus(affectedrpus)
        def subdivision = openSubdivision(consolidatedland.subdivisionid)
        affectedrpus.each{arpu -> 
            doCreateAffectedRpu(subdivision, arpu)
        }
    }

    void doCreateAffectedRpu(subdivision, arpu){
        txnRef.insertRef(arpu.prevfaasid, subdivision.objid, 'FAAS is currently referenced by Subdivision No. ' + subdivision.txnno + '.')

        def rpu = rpuSvc.openRpu([objid:arpu.prevrpuid])
        rpuSvc.generateNewIds(rpu)
        rpu.realpropertyid = null
        rpu.fullpin = null 
        rpu.ry  = subdivision.ry 
        rpuSvc.createRpu(rpu)

        arpu.memoranda  = subdivision.memoranda
        arpu.newutdno   = faasSvc.generateUniqueTdNo(arpu)
        arpu.newrpuid   = rpu.objid
        arpu.newrpid    = null
        saveAffectedRpu(arpu)
    }


    void checkAffectedRpus(affectedrpus){
        def msg = ''
        def interims = affectedrpus.findAll{it.state != 'CURRENT'}
        if (interims){
            msg = 'The following affected Improvement(s) are not yet current.\nApprove the FAAS before proceeding the transaction.\n\n'
            interims.each{
                if (it.tdno)
                    msg +=  '* FAAS No. ' + it.tdno + '.\n'
                else
                    msg +=  '* FAAS Doc No. ' + it.utdno + '.\n'

            }
            throw new Exception(msg);
        }

        //check pending ledgers
        def pendings = affectedrpus.findAll{it.ledgerstate == 'PENDING'}
        if (pendings){
            msg = 'The ledgers for the following affected Improvement(s) are still pending.\nApprove the ledgers before proceeding the transaction.\n\n'
            pendings.each{
                msg += '* FAAS No. ' + it.tdno + '.\n'
            }
            throw new Exception(msg)
        }
    }






    @ProxyMethod
    public void initApproveSubdivisionAsync( subdivision ) {
        //check owner name for each subdivided lands
        getSubdividedLands(subdivision.objid).each{
            if (!it.taxpayer.objid) throw new Exception('New Taxpayer for Subdivided Land with PIN No. ' + it.newpin + ' must be specified.')
            if (!it.owner.name) throw new Exception('New Owner for Subdivided Land with new PIN No. ' + it.newpin + ' must be specified.')
        }
        
    	subdivisionSvc.initApproveSubdivisionAsync(subdivision)
    }

    @ProxyMethod
    public void assignNewTdNos(subdivision){
    	subdivisionSvc.assignNewTdNos(subdivision)
    }

    @ProxyMethod
    public void createSubdividedLandFaasRecord(subdivision, land){
        subdivisionSvc.createSubdividedLandFaasRecord(subdivision, land)
    }

    @ProxyMethod
    public void createAffectedRpuFaasRecord(subdivision, arpu){
        subdivisionSvc.createAffectedRpuFaasRecord(subdivision, arpu)
    }

    @ProxyMethod
    public def approveSubdivisionAsync(subdivision){
        subdivision = subdivisionSvc.approveSubdivisionAsync(subdivision)
        
        //cancel consolidated lands'
        def subdividedlands = getSubdividedLands(subdivision.objid)
        getConsolidatedLands(subdivision.objid).each{cl ->
            adb.cancelRealProperty([objid:cl.rpu.realpropertyid])
            adb.cancelLandLedger([faasid:cl.landfaasid])
        }
        return subdivision
    }

    @ProxyMethod
    public def getFaasListing( objid ) {
        return subdivisionSvc.getFaasListing(objid)
    }
}


