import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.util.*
import com.rameses.services.extended.*


class SubdivisionFromConsolidationWorkflowService extends ActiveWorkflowService
{
	@ActiveDB('subdivision_task')
	def taskDB;

	String processname = 'subdivision'


	public void beforeCreateTask(task) {
		if (task.prevtask && task.prevtask.state.toLowerCase().matches('assign.*')){
			task.assignee = [objid:env.USERID, name:env.FULLNAME, title:env.JOBTITLE]
			task.message = env.prevtask.message 
		}
	}



	def getNotificationMessage(task){
		if (task?.state.matches('assign.*'))
			return notifyGroup(task)
		else if (task?.assignee?.objid != null && env.prevtask?.action?.matches('return.*'))
			return notifyAssignee(task)
		else if (env.prevtask?.state.matches('assign.*'))
			removeGroupNotification(task)
	}

	void removeGroupNotification(task) {
        notificationService.removeMessage([objid:task.refid])
	}


	def notifyGroup(task){
		def subdivision = env.data 
        return [
            objid     		: task.refid,
            senderid  		: env.prevtask?.actor?.objid,
            sender    		: env.prevtask?.actor?.name,
            recipientid   	: task.state,
            recipienttype 	: 'group',
            message   		: 'Subdivision No. ' + subdivision.txnno + '    (' + task.state + ')',
            filetype  		: subdivision.filetype,
            data 	  		: [taskid: task.objid],
        ]
	}

	def notifyAssignee( task ) {
		def subdivision = env.data 
		def returntoinfo = findReturnToInfo(task);
        return [
            objid     : task.refid,
            recipientid : (returntoinfo.assignee.objid ? returntoinfo.assignee.objid : '-'),
            recipienttype : 'user',
            senderid  : returntoinfo.assignee.objid,
            sender    : returntoinfo.assignee.name,
            message   : 'Subdivision No. ' + subdivision.txnno + '   was resent by ' + env.prevtask?.actor?.name,
            filetype  : subdivision.filetype,
            data 	  : [taskid: task.objid],
        ]
	}
}

