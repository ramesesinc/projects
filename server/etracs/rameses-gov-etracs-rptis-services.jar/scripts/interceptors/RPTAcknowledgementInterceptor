import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class RPTAcknowledgementInterceptor
{
	@DataContext('faas_list')
	def em_faaslist

	@DataContext('rpttracking')
	def em 

	@Service('DateService')
	def dtSvc

	@Service('Var')
	def var

	@Service('SequenceService')
	def seqSvc

	@Service('OrgService')
	def orgSvc 



	@Before(pattern='PersistenceService.create', eval="#{args[0]._schemaname=='rptacknowledgement'}")
	public void beforeCreate(evt){
		def entity = evt.args[0]

		def serverDate = dtSvc.serverDate 
		if ( dtSvc.parse('yyyy-MM-dd', entity.releasedate) < serverDate ){
			throw new Exception('Release Date should not be greater than current date');
		}
		
		entity.state = 'DRAFT'
		entity.txnno = getNextAcknowledgementSeries()
		entity.txndate = dtSvc.serverDate 
	}

	@Before(pattern='PersistenceService.update', eval="#{args[0]._schemaname=='rptacknowledgement' && args[0].state == 'APPROVED'}")
	public void beforeApprove(evt){
		def entity = evt.args[0]

		entity.items.each{
			it.trackingno = getNextTrackingSeries()
		}
	}

	def getNextAcknowledgementSeries() {
		def orgcode =  getRootCode() 
		def key = 'RPTACKNOWLEDGEMENT-' + orgcode
		return  'RA' + orgcode + seqSvc.getNextFormattedSeries(key)
	}

	def getNextTrackingSeries() {
		def orgcode =  getRootCode() 
		def key = 'RPTTRACKING-' + orgcode
		return  'RT' + orgcode + seqSvc.getNextFormattedSeries(key)
	}

	def getRootCode() {
		def org = orgSvc.getRoot()
		return org.code.replaceAll('-','') 
	}

}

