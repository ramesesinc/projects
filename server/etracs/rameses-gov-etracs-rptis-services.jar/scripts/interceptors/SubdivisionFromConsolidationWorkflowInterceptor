import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.common.*;

class SubdivisionFromConsolidationWorkflowInterceptor
{
	@Env 
	def env 

	@ActiveDB('subdivision')
	def em

	@ActiveDB('subdivisionfromcs')
	def em_cs

	@ActiveDB('rpt_requirement')
	def em_requirement

	@Service('SubdivisionFromConsolidationWorkflowService')
	def workflowSvc

	@Service('SubdivisionFromConsolidationService')
	def subdivisionSvc

	@Service('RPTUtil')
	def util

	@Service('RPTRequirementRuleService')
    def ruleReqSvc

	@Service('RPTRequirementService')
	def reqSvc

	@Service('ExaminationService')
	def examinationSvc

	@Service('Var')
	def var 


	@Service(value="GroupNotificationService", connection="notification_proxy")
    def groupNotificationSvc

    @Service(value="UserNotificationService", connection="notification_proxy")
    def userNotificationSvc



	@After(pattern='SubdivisionFromConsolidationService.createSubdivision')
	public void afterCreate(evt){
		def subdivision = evt.result 
		def info = evt.args[0] 

		subdivision.task = workflowSvc.start([refid:subdivision.objid, data:subdivision])[0]
		subdivision.taskid = subdivision.task.objid 
		subdivision.taskaction = subdivision.task.state

		def requirements = ruleReqSvc.getRequirements([
			txntype 		: subdivision.txntype,
			txntypemode 	: info?.txntypemode,
			planrequired    : true,
		])

		requirements.each{
			em_requirement.create([
				objid  				: 'R' + new java.rmi.server.UID(),
				requirementtypeid 	: it.objid,
				handler 			: it.handler,
				refid 				: subdivision.objid,
				value_objid 		: null,
				value_txnno			: null,
				value_txndate 		: null,
				value_txnamount 	: 0.0,
				value_remarks 		: null,
				complied 			: 0,
			])
		}
	}


	@After(pattern="SubdivisionFromConsolidationWorkflowService.openTask") 
	public void handleWorkflowOpen( evt ) {
		def task = evt.result 
		if ( ! task.refid ) throw new Exception('RefId is required.')
		task.data = subdivisionSvc.openSubdivision(task.refid)
		task.data.taskid = task.objid 
		task.data.taskaction = task.state
		def tracking = em.findTrackingNo(task.data)
		task.data.trackingno = tracking?.trackingno
	}


	@Before(pattern="SubdivisionFromConsolidationWorkflowService.signal", eval="#{args[0].state.equalsIgnoreCase('receiver') && args[0].action != 'delete'}", index=10) 
	public void validateReceiveInfo( evt ) {
		def subdivision = evt.args[0].data
		reqSvc.checkCompliance(subdivision.objid)
	}

	@Before(pattern="SubdivisionFromConsolidationWorkflowService.signal", eval="#{args[0].action =='delete'}", index=10) 
	public void deleteSubdivision( evt ) {
		def subdivision = evt.args[0].data
		subdivisionSvc.deleteSubdivision(subdivision)
	}

	@Before(pattern="SubdivisionFromConsolidationWorkflowService.signal", eval="#{args[0].state.equalsIgnoreCase('examiner')}", index=10) 
	public void validateExaminationInfo( evt ) {
		def subdivision = evt.args[0].data
		def findings = examinationSvc.getFindings(subdivision.objid)
		if (!findings )
			throw new Exception('Examination Finding is required.')
	}


	@Before(pattern="SubdivisionFromConsolidationWorkflowService.signal", eval="#{args[0].state.equalsIgnoreCase('taxmapper')}", index=10) 
	public void validateTaxmappingInfo( evt ) {
		def subdivision = evt.args[0].data

		//check consolidated lands count, at least 2
		def consolidatedlands = em_cs.getConsolidatedLands([subdivisionid:subdivision.objid])
		if (consolidatedlands.size() <= 1)
			throw new Exception('At least two (2) consolidated lands are required.')

		//check landpin count, at least 2
		def lands = em.getSubdividedLands([subdivisionid:subdivision.objid])
		if (lands.size() <= 1)
			throw new Exception('Subdivision requires at least two (2) Subdivided Lands.')


		//check all affected rpus are assigned with new PIN
		def nopinRpus = em.getAffectedRpuWithNoPin(subdivision)
		if (nopinRpus)
			throw new Exception('Affected RPU with TD No. ' + nopinRpus[0].tdno + ' is not assigned with a new PIN.');

	}


	@Before(pattern="SubdivisionFromConsolidationWorkflowService.signal", eval="#{args[0].state.equalsIgnoreCase('appraiser')}", index=15) 
	public void validateAppraisalInfo( evt ) {
		def subdivision = evt.args[0].data


		def lands = em.getSubdividedLands([subdivisionid:subdivision.objid])
		lands.each{
			if (! it.newrpuid )
				throw new Exception('Subdivided Land with New PIN ' + it.newpin + ' is not yet appraised.')
			if (it.areasqm <= 0.0)
				throw new Exception('Area for Subdivided Land with New PIN ' + it.newpin + ' must be greater than zero.')
			if (! it.memoranda)
				throw new Exception('Memoranda is required for Subdivided Land with New PIN ' + it.newpin + '.')
		}

		def rpus  = em.getAffectedRpuWithNoPin(subdivision)
		rpus.each{
			if (! it.memoranda)
				throw new Exception('Memoranda is required for Affected RPU with New PIN ' + it.newpin + '.')
		}

	}



}

