import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;

class RPTSyncService
{   
	@Env
	def env 

	@Service('SyncService')
	def syncSvc 

    @Service('RPTUtil')
    def util 

    @DataContext('sys_org')
    def em_org 

    @Service('RPTSyncMasterSupport')
    def masterSvc

    @Service('RPTSyncRevisionSettingSupport')
    def revisionSvc

	@ProxyMethod
	public def syncMaster(params) {
		util.required('schemaname', params.schemaname)

		params.reftype = params.schemaname
		params.action = 'SYNCMASTER'
		params.remote = getProvinceOrg()

		def data = syncSvc.send(params)

		return masterSvc.sync(params.schemaname, data.items)
	}


	@ProxyMethod
	public def syncSetting(params) {
		util.required('schemaname', params.schemaname)

		params.reftype = params.schemaname
		params.action = 'SYNC-REVISION-SETTING'
		params.orgid = env.ORGID
		params.orgcode = env.ORGCODE 
		params.remote = getProvinceOrg()
		
		def data = syncSvc.send(params)
		return revisionSvc.sync(params.schemaname, data.settings)
	}

	def getProvinceOrg() {
		def remote = [:]
		if ('MUNICIPALITY'.equalsIgnoreCase(env.ORGCLASS)) {
			def muni = em_org.find([objid: env.ORGID]).first()
			if (muni) {
				def prov = em_org.select('objid,code').find([objid: muni.parent.objid]).first()
				remote.orgid = prov.objid
				remote.orgcode = prov.code 
			}
		}
		return remote
	}

}