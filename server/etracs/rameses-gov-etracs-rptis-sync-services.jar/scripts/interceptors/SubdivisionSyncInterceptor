import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*


/*----------------------------------------------------------------
* Subdivision Synchronization support shared 
* between province and municipalities 
-----------------------------------------------------------------*/
class SubdivisionSyncInterceptor
{
    @Env
    def env

    @Service('SubdivisionSyncService')
    def syncSvc 


    /*---------------------------------------------------------
    *
    * SCHEDULING SUPPORT
    *
    ---------------------------------------------------------*/
    @After(pattern="SubdivisionWorkflowService.signal", eval="#{args[0].state=='forprovsubmission' && args[0].action=='completed'}", index=10000) 
    public void scheduleSubmitToProvince( evt ) {
        def subdivision = evt.args[0].data;
        syncSvc.scheduleSubmitToProvince(subdivision)
    }

    @After(pattern="SubdivisionWorkflowService.signal", eval="#{args[0].state.matches('approver|provapprover') && args[0].action=='completed'}", index=10000) 
    public void scheduleSubdivisionApproval( evt ) {
        def subdivision = evt.args[0].data;
        syncSvc.scheduleSubdivisionApproval(subdivision)
    }

    /*---------------------------------------------------------
    *
    * SEND/RECEIVE HANDLERS
    *
    ---------------------------------------------------------*/
    @After(pattern="SyncService.asyncSend", eval="#{result.reftype == 'subdivision' && result.action.matches('SUBDIVISION-.*')}") 
    public void sendData( evt ) {
        def syncdata = evt.result 
        syncSvc.send(syncdata)
    }   

    @After(pattern="SyncService.receive", eval="#{args[0].reftype == 'subdivision' && args[0].action.matches('SUBDIVISION-.*')}") 
    public void receiveData(evt){
        def syncdata = evt.args[0]
        syncSvc.receive(syncdata)
        evt.result.status = 'OK'
    }


}

