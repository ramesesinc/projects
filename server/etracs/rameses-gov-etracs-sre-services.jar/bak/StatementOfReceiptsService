import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;


class StatementOfReceiptsService  
{

	@ActiveDB('statementofrevenue')
	def db 

	@PersistenceContext("main")
	def em; 

	@Service('RPTUtil')
	def util

	@Service('DateService')
	def dtSvc 

	def PADDING_SIZE = 10

	@Service('NumberService')
	def numSvc

	@ProxyMethod 
	public def getAcctGroupList( ) {
		return db.getSREAcctGroups()*.acctgroup 
	}


	@ProxyMethod
	public def generateReport( params ) {
		util.required('Year', params.year)
		util.required('Qtr', params.qtr)
		
		buildDateFilter(params)
		
		def items = getSummarizedRevenueItems(params)
		if(! items ) throw new Exception("No record(s) found.               ");

		def reportdata = buildChartOfAccountFormat(params, items)
		if (params.hidezeroamount) {
			reportdata.removeAll(reportdata.findAll{it.amount <= 0.0 })
		}

		return [
			title 		: 'STATEMENT OF RECEIPTS SOURCES',
			period 		: util.buildPeriod(params),
			total 		: reportdata.findAll{it.level == 0 }.amount.sum() ,
			totaltarget	: reportdata.findAll{it.level == 0 }.target.sum() ,
			reportdata  : reportdata,
		]
	}


	def padTitle(acct, idx){
		def title = acct.title 
		if (acct.leaf == 1){
			title = acct.code + ' - ' + title 
		}
		return (' ' * PADDING_SIZE * idx) + title 
	}


	def buildChartOfAccountFormat(params, items){
		def data = []
		data += items.findAll{it.objid == 'unmapped' || it.parentid == 'unmapped'}.each{ it.leaf = 1}
		def idx = -1
		def rootaccts = db.getSreRootAccountsByAccountGroup(params)
		
		rootaccts.each{ 
			if (params.type.equalsIgnoreCase('standard')) {
				doBuildStandardFormat(params, data, items, idx, it)
			}
			else if (params.type.equalsIgnoreCase('extended')){
				doBuildExtendedFormat(params, data, items, idx, it)
			}
		}
		params.total = data.total.sum();
		calculateGroupTotals(data)
		return data 
	}


	void calculateGroupTotals(data){ 
		def maxlevel = data.level.max() 
		for(int i = maxlevel - 1; i > 0; i--){
			['detail','group'].each{ type -> 
				def groupaccts = data.findAll{it.level == i && it.type == type } 
				groupaccts.each{ grpacct -> 
					def colls = data.findAll{it.parentid == grpacct.objid}.each{
						it.target = it.target ? it.target : 0.0 
						it.percentage = it.percentage ? it.percentage : "0.00 %" 
					}

					def amt = colls.amount.sum()
					def target = colls.unique{ it.objid }.target.sum()
					if (amt > 0.0 && grpacct.amount == 0){
						grpacct.amount = amt
						grpacct.target = target
						grpacct.percentage = "0.00 %"
						if( target  > 0.0 ) {  
							grpacct.percentage = numSvc.format( '#,##0.00', ( grpacct.amount / target ) * 100 ) + " %"
						} 
					}
					else if (amt > 0.0 && grpacct.amount != 0){
						def idx = data.indexOf(grpacct) + colls.size() + 1
						def otheracct = [objid:'O'+ grpacct.objid, parentid:grpacct.objid, title:(' '*PADDING_SIZE) + grpacct.title + ' (OTHERS)', amount:grpacct.amount, leaf:1, type:'subaccount', level:grpacct.level+1]
						data.add(idx, otheracct)
						grpacct.amount += amt
						grpacct.target = target
						grpacct.percentage = "0.00 %"
						if( target  > 0.0 ) {  
							grpacct.percentage = numSvc.format( '#,##0.00', ( grpacct.amount / target ) * 100 ) + " %"
						} 
						grpacct.leaf = null
					} else if( target != null && type == 'group') {
						grpacct.target = target
						grpacct.percentage = "0.00 %"
						grpacct.amount = amt
					}

				}
				
			}
		}

		//update rootgroups
		data.findAll{it.level == 0 }.each{ rgrp ->
			def colls = data.findAll{it.parentid == rgrp.objid};
			def amt = colls.amount.sum();
			def target = colls.unique{ it.objid }.target.sum() 
			rgrp.target = target 
			rgrp.percentage = "0.00 %"
			if (amt > 0.0){
				rgrp.amount = amt  
				if( target  > 0.0 ) {  
					rgrp.percentage = numSvc.format( '#,##0.00', ( rgrp.amount / target ) * 100 ) + " %"
				}
			} 
		}

	}

	void doBuildStandardFormat(params, data, items, idx, acct){
		idx += 1
		acct.amount = 0.0
		acct.level = idx 
		acct.target = acct.target ? acct.target : 0.0 

		acct.percentage = 0.00 + " %" 
		def collections = items.findAll{it.accountid == acct.objid} 
		if (collections){
			acct.amount = collections.amount.sum()
			acct.target = acct.target ? acct.target : 0.0 
			acct.percentage = 0.00 + " %"
			if( acct.target  > 0.0 ) {  
				acct.percentage = numSvc.format( '#,##0.00', ( acct.amount / acct.target ) * 100 ) + " %"
			}
			acct.leaf = 1
		} 
		acct.title = padTitle(acct, idx)

		data << acct 

		def subaccts = db.getSreSubAccounts([parentid:acct.objid, year: params.year])
		subaccts.each{
			doBuildStandardFormat(params, data, items, idx, it )
		}
	}


	void doBuildExtendedFormat(params, data, items, idx, acct){
		idx += 1
		acct.title = padTitle(acct, idx)
		acct.amount = 0.0
		acct.level = idx 
		acct.target = acct.target ? acct.target : 0.0 
		acct.percentage = 0.00 + " %" 
		def collections = items.findAll{it.accountid == acct.objid}
		if (collections){
			acct.amount = collections.amount.sum()
			if( acct.target  > 0.0 ) {  
				acct.percentage = numSvc.format( '#,##0.00', ( acct.amount / acct.target )  * 100 ) + " %"
			}
			acct.leaf = 1
		} 
		data << acct

		def subaccts = db.getSreExtendedSubAccounts([parentid:acct.objid, year: params.year ])

		subaccts.each{
			doBuildExtendedFormat(params, data, items, idx, it )
		}
	}


	void doBuildDetailedFormat(params, data, items, idx, acct){
		idx += 1
		acct.title = padTitle(acct, idx)
		acct.amount = 0.0
		acct.level = idx 
		data << acct

		def collections = items.findAll{it.parentid == acct.objid}.each{
			it.title = padTitle(it, idx+1)
			it.leaf = 1
		}
		if (collections){
			acct.amount = collections.amount.sum()
			acct.leaf = null
			data.addAll(collections)
		}
		
		def subaccts = db.getSreExtendedSubAccounts([parentid:acct.objid])
		subaccts.each{
			doBuildDetailedFormat(params, data, items, idx, it )
		}
	}


	def getSummarizedRevenueItems(params){
		if (params.type.equalsIgnoreCase('standard')) {
			return db.getSREStandardRevenueItemSummaries(params)
		}
		else if (params.type.equalsIgnoreCase('extended')) {
			return db.getSREExtendedRevenueItemSummaries(params)
		} else {
			throw new Exception('Report type ' + params.type + ' is not supported.')
		}
	}


	void buildDateFilter(params){
		if (params.qtr != null && params.month != null) {
			params.fromdate = params.year + '-' + params.month.index + '-01 00:00:00'
			params.todate   = dtSvc.format('yyyy-MM-dd', dtSvc.getMonthEndDate(dtSvc.parse('yyyy-MM-dd', params.fromdate))) + " 23:59:59"
		}
		else {
			params.fromdate = dtSvc.format('yyyy-MM-dd', dtSvc.getBeginningQtrDate( params.qtr, params.year, 1 ) ) + " 00:00:00"
			params.todate   = dtSvc.format('yyyy-MM-dd', dtSvc.getQtrEndDate( params.qtr, params.year )) + " 23:59:59"
		}
	}

}
