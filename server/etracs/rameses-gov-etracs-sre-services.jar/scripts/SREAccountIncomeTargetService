import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*;


class SREAccountIncomeTargetService extends ActiveListService {

	@ActiveDB("sreaccount_incometarget")
	def em;

	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public def getColumns(def p) {
		def list = [
			[name:'title', caption:'Item Title', width:450, maxWidth:600 ],
			[name:'target', caption:'Target', width:150, resizable:false, type:'decimal', editable:true, editableWhen:'#{item.haschildren==0}' ],
			[name:'', caption:'' ],
		];
	}

	@ProxyMethod
	public def getCurrentYear() {
		return dateSvc.serverYear;
	}

	public void beforeList(o) {
		o.code = (!o.code)? "%": o.code +"%";
	}

	def loop( ctx, items, acctGrps ) {
		def children = acctGrps.remove( ctx.objid );
		ctx.haschildren = 0;
		if(children) {
			ctx.haschildren = 1;
		    for( c in children ) {
		    	c.level = ctx.level + 1;
		    	c.title = ("   ".multiply(c.level)) + c.account.title;
		    	items << c;
		    	loop( c, items, acctGrps );
		    }	
		}
	}

	public void afterList(o, list) {
		def items = [];
		def acctGrps = list.groupBy{it.parentid};
		def roots = acctGrps.remove('ROOT');
		for( r in roots ) {
			r.level = 0;
			r.type = 'root'
			r.title = r.account.title;
			items << r;	
			loop( r, items, acctGrps );
		}
		list.clear();
		items.findAll{it.haschildren == 1}.each { it.title += "*"; }
		list.addAll( items );
	}

	@ProxyMethod
	public void saveTarget(p) {
		if(!p.year) p.year = dateSvc.serverYear;
		em.save(p);
	}




}
