import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;


class SREStatementOfReceiptsService {

	@ActiveDB('sre_report')
	def em; 

	@ActiveDB('fund')
	def fund; 

	@Service('DateService')
	def dtSvc 

	@Service('NumberService')
	def numSvc

	@ProxyMethod
	public def getReport( params ) {
		buildParams( params ); 

		def incomesummaries = em.getIncomeSummary( params ); 
		if ( !incomesummaries ) throw new Exception('No available income summary'); 

		def incomesummarydetails = []; 
		if ( params.type == 'details' ) {
			incomesummarydetails = em.getIncomeSummaryByItemAccounts( params );	
			println 'fetching incomesummarydetails '
		}
		
		def sourcelist = em.getSreAccounts( params ); 
		if ( !sourcelist ) throw new Exception('No available SRE accounts'); 

		def incometargets = em.getIncomeTargets( params ); 

		int itemindex = 0;		
		sourcelist.each{ it.itemindex=itemindex; itemindex++ } 
		sourcelist.findAll{ it.parentid=='ROOT' }.each{ it.itemindex = -1 }
		sourcelist.sort{ it.itemindex } 

		incomesummaries.each{x-> 
			sourcelist.find{ it.objid==x.objid }?.actual = x.amount 
		}
		incometargets.each{x-> 
			sourcelist.find{ it.objid==x.objid }?.target = x.target 
		}
		sourcelist.findAll{ it.parentid=='ROOT' }.each{ 
			setupAmounts( it, sourcelist ) 
		} 

		def noamounts = sourcelist.findAll{ it.hasamount==false }
		if ( noamounts ) sourcelist.removeAll( noamounts ); 

		def sreaccts = [];
		sreaccts.addAll( sourcelist ); 
		incomesummarydetails.groupBy{ it.parentid }
							.each{ k,v-> 
								def sre = sreaccts.find{ it.objid==k }
								if ( !sre ) return; 

								v.each{ 
									it.type='itemaccount'; 
									it.account = [code:it.code, title:it.title];
									it.actual = it.amount;
									it.itemindex = 999999;
									sreaccts << it; 
								}
							}

		if ( params.type.toString().matches('standard|details') ) {
			def subaccts = sreaccts.findAll{ it.type=='subaccount' } 
			if (subaccts) sreaccts.removeAll( subaccts ); 
		} 
		if ( params.opthidenoactual==true ) {
			def rmlist = sreaccts.findAll{ (it.actual>0.0)==false }
			if (rmlist) sreaccts.removeAll( rmlist ); 
		} 
		
		def list = sreaccts; 
		def groupids = [];
		list.groupBy{ it.parentid }
			.each{ k,v-> 
				def o = list.find{ it.objid==k } 
				if ( !o ) o = [objid:k, itemindex:-1];
				
				groupids << [groupid:o.objid, groupindex:o.itemindex, items:v] 
			} 

		groupids.sort{ it.groupindex }

		def acctGrps = new LinkedHashMap(); 
		groupids.each{ acctGrps.put(it.groupid, it.items) }
		groupids.clear();

		def items = [];	
		def totaltarget = 0.0;
		def totalactual = 0.0;
		def roots = acctGrps.remove('ROOT'); 
		for( r in roots ) {
			r.level = 0;
			r.type = 'root'
			r.title = r.account.title+'*';

			items << r;	
			loop( r, items, acctGrps );
			totaltarget += (r.target? r.target: 0.0);
			totalactual += (r.actual? r.actual: 0.0);			
		}
    	
		if ( !items ) throw new Exception('No records found'); 

		def totals = [target: totaltarget, actual: totalactual]; 
		calculateAmounts( totals ); 

		def p = [:]; 
		p.title = 'STATEMENT OF RECEIPTS SOURCES';
		p.reportdata = items; 
		p.period = params.strperiod; 
		p.totalactual = totalactual; 
		p.totaltarget = totaltarget; 
		p.totalexcess = totals.excess; 
		p.totalpercentage = totals.percentage;
		p.totalpercentagevalue = totals.percentagevalue; 
		return p; 
	}

	@ProxyMethod 
	public def getFunds() { 
		def list = fund.getAll(); 
		def results = [];
		list.findAll{ it.parentid==null }?.each{a-> 
			results.add( a ); 
			list.findAll{ it.parentid==a.objid }?.each{b-> 
				results.add( b ); 
				b.title = '   ' + b.title;				
			} 
		} 
		return results; 
	} 

	@ProxyMethod 
	public def getAcctGroups() {
		return em.getAcctGroups(); 
	}

	@ProxyMethod 
	public def getReportOptions() {
		return [
			acctgroups: getAcctGroups(), 
			funds: getFunds() 
		]; 
	} 


	def loop( ctx, items, acctGrps ) {
		def children = acctGrps.remove( ctx.objid );
		ctx.haschildren = 0;
		if(children) {
			ctx.haschildren = 1;
		    for( c in children ) {
		    	def stitle = c.account.title;
		    	def stype = c.type.toString();

		    	if ( stype.matches('detail|subaccount|itemaccount') ) {
		    		def buff = new StringBuilder();
		    		if ( stype == 'itemaccount' ) buff.append('* '); 
		    		if ( c.account?.code ) buff.append( c.account.code + ' ' );
		    		if ( c.account?.title ) buff.append( c.account.title );

		    		stitle = buff.toString(); 
		    	}

		    	c.level = ctx.level + 1;
		    	c.title = ("    ".multiply(c.level)) + stitle;
				calculateAmounts( c ); 
		    	items << c;
		    	loop( c, items, acctGrps );
		    } 
		} 
	} 

	void calculateAmounts( c ) {
		if ( !c ) return;

		def target0 = (c.target? c.target: 0.0); 
    	def actual0 = (c.actual? c.actual: 0.0);
    	def excess0 = actual0 - target0; 
    	if ( target0 == 0.0 && actual0 == 0.0 ) {
    		c.target = c.actual = c.excess = null; 

    	} else if ( excess0 == actual0 ) {
    		c.target = null;
    		c.excess = excess0; 
    		c.percentage = 100.0;
    		c.percentagevalue = c.percentage; 
    	} else if ( target0 > 0 && actual0 == 0.0 ) {
    		c.actual = null;
    		c.excess = excess0; 
    		c.percentage = -100.0;
    		c.percentagevalue = c.percentage; 
    	} else {
    		c.excess = excess0; 
    		c.percentage = actual0 / target0; 
    		c.percentagevalue = c.percentage * 100.0; 
    	} 

    	target0 = (c.target? c.target: 0.0); 
    	actual0 = (c.actual? c.actual: 0.0);
    	c.hasamount = (target0 > 0.0 || actual0 > 0.0); 
	} 

	void buildRootPath( selitem, sourcelist, targetlist ) {
		if ( !selitem || !sourcelist ) return; 
		
		def sre = sourcelist.find{ it.objid==selitem.objid }
		def ainfo = targetlist.find{ it.objid==selitem.objid } 
		if ( !ainfo ) { 
			ainfo = [:]; 
			ainfo.putAll( selitem ); 
			ainfo.account = sre?.account; 
			ainfo.parentid = sre?.parentid; 
			ainfo.itemindex = sre?.itemindex; 
			targetlist << ainfo; 
		} 

		def parent = sourcelist.find{ it.objid==ainfo?.parentid }
		buildRootPath( parent, sourcelist, targetlist ); 
	}

	void setupAmounts( selitem, sourcelist ) {
		def items = sourcelist.findAll{ it.parentid==selitem.objid }
		if ( !items ) {
			calculateAmounts( selitem );

		} else {
			items.each{ 
				setupAmounts( it, sourcelist ) 
			} 
			
			if ( selitem.actual == null ) {
				def actual = items.sum{ (it.actual? it.actual: 0.0) }
				if ( actual ) selitem.actual = actual; 
			}

			if ( selitem.target == null ) {
				def target = items.sum{ (it.target? it.target: 0.0) } 
				if ( target ) selitem.target = target; 
			}
	
			calculateAmounts( selitem ); 
		} 
	} 

	void buildParams( params ) {
		params.filter = '';

		def period = new StringBuffer();
		def rundate = dtSvc.getServerDate(); 
		if ( params.period == 'quarterly' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.qtr ) throw new Exception('qtr is required');

			def months = dtSvc.getMonthsByQtr( params.qtr );
			def monthindex = months[0].index;
			def strmonth = (monthindex > 9? monthindex: '0'+monthindex); 
			params.startdate = params.year +'-'+ strmonth +'-01'; 
			params.enddate = dtSvc.getQtrEndDate( params.qtr, params.year ); 
			period.append( months[0].caption +' - '+ months[-1].caption +' '+ params.year ); 

		} else if ( params.period == 'asofqtr' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.qtr ) throw new Exception('qtr is required');

			def months = dtSvc.getMonths(); 
			period.append( months[0].caption );
			params.startdate = params.year +'-01-01'; 
			params.enddate = dtSvc.getQtrEndDate( params.qtr, params.year ); 

			months = dtSvc.getMonthsByQtr( params.qtr );
			period.append(' - '+ months[-1].caption +' '+ params.year ); 

		} else if ( params.period == 'monthly' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.month ) throw new Exception('month is required');

			def monthindex = params.month.index; 
			def strmonth = (monthindex > 9? monthindex: '0'+monthindex); 
			def dtstart = java.sql.Date.valueOf(''+ params.year +'-'+ strmonth +'-01'); 
			def dtend = dtSvc.getMonthEndDate( dtstart ); 
			def months = dtSvc.getMonths(); 
			params.startdate = dtstart;
			params.enddate = dtend;
			period.append( months[monthindex-1].caption +' '+ params.year ); 
		
		} else if ( params.period == 'asofmonth' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.month ) throw new Exception('month is required');

			def monthindex = params.month.index; 
			def strmonth = (monthindex > 9? monthindex: '0'+monthindex); 
			def dtstart = java.sql.Date.valueOf(''+ params.year +'-01-01'); 
			def dtend = java.sql.Date.valueOf(''+ params.year +'-'+ strmonth +'-01');
			dtend = dtSvc.getMonthEndDate( dtend ); 

			def months = dtSvc.getMonths(); 
			params.startdate = dtstart;
			params.enddate = dtend;
			if ( months[0].index != months[monthindex-1].index ) { 
				period.append( months[0].caption ).append(' - '); 
			} 
			period.append( months[monthindex-1].caption ).append(' '+ params.year); 
		
		} else {
			if ( !params.date ) throw new Exception('date is required');

			def syear = params.date.toString().split('-')[0]; 
			if ( params.period == 'asofday' ) {
				period.append("As of "); 	
				params.startdate = syear +'-01-01'; 
			} else {
				params.startdate = params.date;
			}

			params.enddate = params.date; 
			params.year = syear; 

			def formatter = new java.text.SimpleDateFormat('MMMMM dd, yyyy');
			if ( params.date instanceof java.util.Date ) {
				period.append(formatter.format( params.date ));
			} else {
				period.append(formatter.format( java.sql.Date.valueOf( params.date ) )); 
			} 
		}
		params.strperiod = period.toString(); 
		params.compress = false; 
		params.hasfund = false; 
		params.hasacctgroup = false; 

		def fundid = params.fund?.objid; 
		if ( fundid ) params.hasfund = true; 
		if ( params.acctgroup ) params.hasacctgroup = true; 

		if ( !params.hasacctgroup ) params.acctgroup = '%'; 

		params.fundid = (fundid? fundid: '%'); 
		params.filter = ' 1=1 '; 
		if ( params.type=='standard' ) { 
			params.filter = ''' a.type in ('group','detail') '''; 
		} 
	} 
} 
