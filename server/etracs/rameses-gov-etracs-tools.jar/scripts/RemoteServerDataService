import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.util.*;

class RemoteServerDataService {

	@ActiveDB('remoteserver_data')	
	def adb; 

	@ProxyMethod 
	public def getOrgData( def entity) {
		if(! entity.data.org) throw new Exception("'org' parameter is required.   ")

		def params = [orgid: entity.data.org.objid]
		entity.data.collectiontypeorgs = adb.getCollectionTypeOrgs( params ); 
		entity.data.collectiontypes = adb.getCollectionTypes( params );
		entity.data.collectiontypes.each{
			it.org = [ objid: it.orgid, name: it.orgname ] 
		}
		entity.data.collectionTypesAccounts = adb.getCollectionTypeAccounts( params );
		entity.data.collectiongroups = adb.getCollectionGroups( params );
		entity.data.collectiongroupitems = adb.getCollectionGroupItems( params );
		entity.data.afs = adb.getAFs( params);
		entity.data.funds = adb.getFunds( params);
		entity.data.funds.addAll( adb.getParentFunds( params ));
		entity.data.fundgroups = adb.getFundGroups( params ); 
		entity.data.funds = entity.data.funds.unique(); 

		entity.data.itemaccounts = adb.getItemAccounts( params );
		if( !entity.data.itemaccounts ) throw new Exception("There are no item accounts define on the collection types. ");

		entity.data.itemaccounts.each{ 
			it.state = (it.state.toString().toUpperCase() == 'ACTIVE' ? 'APPROVED' : 'DRAFT'); 
		} 

		entity.data.users = adb.getUsers(params)
		if( !entity.data.users )  throw new Exception("There are no users define on the org.  ");

		entity.data.usergroups = adb.getUserGroups(params)
		if(! entity.data.usergroups ) throw new Exception("There are no roles assign to the user for this org.  ");
		if(! entity.data.usergroups.find{it.role == 'COLLECTOR'} ) throw new Exception("There must be a collector for this org.  ");
		
		entity.data.orgs = adb.getOrgs( params ); 
		entity.data.orgclasses = adb.getOrgClasses( params ); 
		entity.data.userMemberships = adb.getUserMemberships( params ); 
		entity.data.banks = adb.getBanks( params ); 
		return new Base64Cipher().encode(entity); 
	}
}
