import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.util.*;
import com.rameses.services.extended.*;


class RemoteServerDataService
{
	@PersistenceContext('main')
	def em
 
	@ActiveDB('remoteserver_data')	
	def adb


	String pagingKeys = 'objid'

	@ProxyMethod 
	public def getOrgData( def entity) {
		if(! entity.data.org) throw new Exception("'org' parameter is required.   ")

		def params = [orgid: entity.data.org.objid]
		entity.data.collectiontypes = adb.getCollectionTypes( params );
		entity.data.collectionTypesAccounts = adb.getCollectionTypeAccounts( params );
		entity.data.collectiongroups = adb.getCollectionGroups( params );
		entity.data.collectiongroupitems = adb.getCollectionGroupItems( params );
		entity.data.afs = adb.getAF( params) 
		entity.data.funds = adb.getFunds( params) 
		entity.data.itemaccounts = adb.getItemAccounts( params )
		if( !entity.data.itemaccounts ) throw new Exception("There are no item accounts define on the collection types. ");

		entity.data.users = adb.getUser(params)
		if( !entity.data.users )  throw new Exception("There are no users define on the org.  ");

		entity.data.usergroups = adb.getUserGroups(params)
		if(! entity.data.usergroups ) throw new Exception("There are no roles assign to the user for this org.  ");
		if(! entity.data.usergroups.find{it.role == 'COLLECTOR'} ) throw new Exception("There must be a collector for this org.  ");
		
		entity.data.orgs = adb.getOrgs( params ); 
		entity.data.orgclasses = adb.getOrgClasses( params ); 
		entity.data.userMemberships = adb.getUserMemberships( params ); 
		entity.data.cashbooks = adb.getUserCashBooks( params ).each{ 
			it.details  = []; 
			it.beginbalance = 0.0;
			it.forwardbalance = 0.0;
			it.totaldr = 0.0;
			it.totalcr = 0.0;
			it.endbalance = 0.0; 
			it.currentlineno = 0; 
		} 
		return new Base64Cipher().encode(entity); 
	}


	@ProxyMethod
	public def create( entity ) {
		entity.data = em.serializer.write(entity.data)
		adb.create(entity)	
	}

	@ProxyMethod
	public def update( entity ) {
		entity.data = em.serializer.write(entity.data)
		adb.update(entity)	
	}

	@ProxyMethod
	public def open( entity ) {
		entity = adb.read(entity)	
		entity.state = 'POSTED'
		entity.data = em.serializer.read(entity.data)
		return entity 
	}

	@ProxyMethod
	public def removeEntity( entity ) {
		adb.removeEntity(entity)	
	}
	

	@ProxyMethod
	public def getList( params ) {
		return adb.getList(params)
	}


	@ProxyMethod 
	public def getColumns( params ) {
		return [
			[name:'objid', caption:'Remote Server'],  
		];
	}
}
