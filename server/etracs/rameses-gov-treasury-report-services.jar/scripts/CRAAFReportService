import com.rameses.annotations.*;
import com.rameses.common.*
import com.rameses.util.*

class CRAAFReportService {

	@ActiveDB('craaf_report')
	def adb;

	@Env
	def env; 
 

	@ProxyMethod
	public def generateCraafData( params ) {

		def data = [ items : getCraafData(params) ]; 
		if ( !data.items ) throw new Exception("No record(s) found");

		data.info = [ 
			PREPAREDBY 		: env.FULLNAME,
			PREPAREDBYTITLE : env.JOBTITLE,
			PERIOD			: 'FOR THE MONTH OF ' + params.month.caption + ', ' + params.year 
		]; 
		return data; 
	}

	@ProxyMethod
	public def getFormControlList(  ) {
		return [
			[type:"integer", caption:'Year', name:'entity.year', required:true, preferredSize:'80,19', captionWidth:120],
            [type:"combo", caption:'Month', name:'entity.month', items:'months', expression:'#{item.name}', preferredSize:'80,19', captionWidth:120],
		]
	}


	private def getCraafData( params ) { 
		def YMD = new java.text.SimpleDateFormat('yyyy-MM-dd'); 
		def startdate = YMD.parse( params.year +'-'+ params.month.index.toString().padLeft(2, '0') +'-01' );
		def enddate = DateUtil.add( startdate, '1M' ); 	

		def list = adb.getCraafData([ startdate: startdate, enddate: enddate ]); 
		list.eachWithIndex{ o,idx-> o.lineno = idx; }

		def unissuedlist = list.findAll{( it.qtyissued==0 )} 
		list.removeAll( unissuedlist ); 

		list.findAll{ it.formtype != 'serial' }.each{
			it.beginstartseries = it.beginendseries = null; 
			it.issuedstartseries = it.issuedendseries = null; 
			it.endingstartseries = it.endingendseries = null; 
			it.receivedstartseries = it.receivedendseries = null; 
		}

		def groupindex = 1000; 
		def serials = unissuedlist.findAll{ it.formtype == 'serial' } 
		unissuedlist.removeAll( serials ); 

		serials.groupBy{[ ownerid: it.ownerid, formno: it.formno, prefix: it.prefix, suffix: it.suffix ]}.each{ k,v-> 
			v.sort{ it.startseries } 

			def nextseries = 0; 
			v.each{ vo-> 
				if ( vo.startseries == nextseries ) {
					vo.groupindex = groupindex;  
				} else {
					vo.groupindex = groupindex + 1; 
				} 
				groupindex = vo.groupindex; 
				nextseries = vo.nextseries; 
			} 

			v.groupBy{ it.groupindex }.each{ kk,vv-> 
				def fo = vv.first(); 
				def receivedstartseries = vv.collect{ it.receivedstartseries }.findAll{( it )}.min{( it )}
				def receivedendseries = vv.collect{ it.receivedendseries }.findAll{( it )}.max{( it )}
				def endingstartseries = vv.collect{ it.endingstartseries }.findAll{( it )}.min{( it )}
				def endingendseries = vv.collect{ it.endingendseries }.findAll{( it )}.max{( it )}
				def beginstartseries = vv.collect{ it.beginstartseries }.findAll{( it )}.min{( it )}
				def beginendseries = vv.collect{ it.beginendseries }.findAll{( it )}.max{( it )}

				fo.qtyreceived = vv.findAll{( it.qtyreceived > 0 )}.sum{ it.qtyreceived } 
				if ( fo.qtyreceived == null ) fo.qtyreceived = 0; 

				fo.qtyending = vv.findAll{( it.qtyending > 0 )}.sum{ it.qtyending } 
				if ( fo.qtyending == null ) fo.qtyending = 0; 

				fo.qtybegin = vv.findAll{( it.qtybegin > 0 )}.sum{ it.qtybegin } 
				if ( fo.qtybegin == null ) fo.qtybegin = 0; 

				fo.receivedstartseries = receivedstartseries; 
				fo.receivedendseries = receivedendseries; 
				fo.beginstartseries = beginstartseries; 
				fo.beginendseries = beginendseries; 

				def e1 = [ receivedstartseries, beginstartseries ].findAll{( it )}.min{( it )} 
				def e2 = [ receivedendseries, beginendseries ].findAll{( it )}.max{( it )} 
				fo.endingstartseries = ( e1 ? e1 : endingstartseries ); 
				fo.endingendseries = ( e2 ? e2 : endingendseries ); 
				list << fo; 
			} 
		} 
		serials.clear(); 

		unissuedlist.groupBy{[ ownerid: it.ownerid, formno: it.formno, prefix: it.prefix, suffix: it.suffix ]}.each{ k,v-> 
			def fo = v.first(); 
			def qtyreceived = 0; def qtyending = 0; def qtybegin = 0; 
			v.each{
				if ( it.qtyreceived > 0 ) qtyreceived += it.qtyreceived; 
				if ( it.qtyending > 0 ) qtyending += it.qtyending; 
				if ( it.qtybegin > 0 ) qtybegin += it.qtybegin; 
			} 
			fo.qtyreceived = qtyreceived;
			fo.qtyending = qtyending; 
			fo.qtybegin = qtybegin; 
			fo.receivedstartseries = fo.receivedendseries = null; 
			fo.endingstartseries = fo.endingendseries = null; 
			fo.beginstartseries = fo.beginendseries = null; 
			list << fo; 
		} 
		unissuedlist.clear(); 
		list.sort{ it.lineno } 
		return list;  
	} 
} 
