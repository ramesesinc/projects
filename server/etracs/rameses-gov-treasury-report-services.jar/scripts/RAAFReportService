import com.rameses.annotations.*;
import com.rameses.common.*
import com.rameses.util.*

class RAAFReportService { 

	@ActiveDB('raaf_report')
	def adb; 
 
	@Service('DateService')
	def dtSvc;

	@Service('ReportParameterService')
	def reportSvc;

	@Service('Var') 
	def varSvc; 

	@Env
	def env; 

	@ProxyMethod
	public def getReportData( params ) {
		if ( !params.year ) throw new Exception('year parameter is required'); 
		if ( !params.month?.index ) throw new Exception('month parameter is required'); 

		def YMD = new java.text.SimpleDateFormat('yyyy-MM-dd'); 
		def startdate = YMD.parse( params.year +'-'+ params.month.index.toString().padLeft(2, '0') +'-01' );
		def enddate = DateUtil.add( startdate, '1M' ); 	
		def collectorid = (params.collector? params.collector.objid: env.USERID);
		def items = adb.getReportData([startdate: startdate, enddate: enddate, collectorid: collectorid]); 
		if ( !items ) throw new Exception('No record(s) found                  ');

		items.eachWithIndex{ o,idx-> o.lineno = idx; }

		def unissuedlist = items.findAll{( it.qtyissued==0 )} 
		items.removeAll( unissuedlist ); 

		items.findAll{ it.formtype != 'serial' }.each{
			it.beginstartseries = it.beginendseries = null; 
			it.issuedstartseries = it.issuedendseries = null; 
			it.endingstartseries = it.endingendseries = null; 
			it.receivedstartseries = it.receivedendseries = null; 
		}

		def groupindex = 1000; 
		def serials = unissuedlist.findAll{ it.formtype == 'serial' } 
		unissuedlist.removeAll( serials ); 

		serials.groupBy{[ ownerid: it.ownerid, formno: it.formno, prefix: it.prefix, suffix: it.suffix ]}.each{ k,v-> 
			v.sort{ it.startseries } 

			def nextseries = 0; 
			v.each{ vo-> 
				if ( vo.startseries == nextseries ) {
					vo.groupindex = groupindex;  
				} else {
					vo.groupindex = groupindex + 1; 
				} 
				groupindex = vo.groupindex; 
				nextseries = vo.nextseries; 
			} 

			v.groupBy{ it.groupindex }.each{ kk,vv-> 
				def fo = vv.first(); 
				def receivedstartseries = vv.collect{ it.receivedstartseries }.findAll{( it )}.min{( it )}
				def receivedendseries = vv.collect{ it.receivedendseries }.findAll{( it )}.max{( it )}
				def endingstartseries = vv.collect{ it.endingstartseries }.findAll{( it )}.min{( it )}
				def endingendseries = vv.collect{ it.endingendseries }.findAll{( it )}.min{( it )}
				def beginstartseries = vv.collect{ it.beginstartseries }.findAll{( it )}.min{( it )}
				def beginendseries = vv.collect{ it.beginendseries }.findAll{( it )}.min{( it )}

				fo.qtyreceived = vv.findAll{( it.qtyreceived > 0 )}.sum{ it.qtyreceived } 
				if ( fo.qtyreceived == null ) fo.qtyreceived = 0; 

				fo.qtyending = vv.findAll{( it.qtyending > 0 )}.sum{ it.qtyending } 
				if ( fo.qtyending == null ) fo.qtyending = 0; 

				fo.qtybegin = vv.findAll{( it.qtybegin > 0 )}.sum{ it.qtybegin } 
				if ( fo.qtybegin == null ) fo.qtybegin = 0; 

				fo.receivedstartseries = receivedstartseries; 
				fo.receivedendseries = receivedendseries; 
				fo.beginstartseries = beginstartseries; 
				fo.beginendseries = beginendseries; 

				def e1 = [ receivedstartseries, beginstartseries ].findAll{( it )}.min{( it )} 
				def e2 = [ receivedendseries, beginendseries ].findAll{( it )}.max{( it )} 
				fo.endingstartseries = ( e1 ? e1 : endingstartseries ); 
				fo.endingendseries = ( e2 ? e2 : endingendseries ); 
				items << fo; 
			} 
		} 
		serials.clear(); 

		unissuedlist.groupBy{[ ownerid: it.ownerid, formno: it.formno, prefix: it.prefix, suffix: it.suffix ]}.each{ k,v-> 
			def fo = v.first(); 
			def qtyreceived = 0; def qtyending = 0; def qtybegin = 0; 
			v.each{
				if ( it.qtyreceived > 0 ) qtyreceived += it.qtyreceived; 
				if ( it.qtyending > 0 ) qtyending += it.qtyending; 
				if ( it.qtybegin > 0 ) qtybegin += it.qtybegin; 
			} 
			fo.qtyreceived = qtyreceived;
			fo.qtyending = qtyending; 
			fo.qtybegin = qtybegin; 
			fo.receivedstartseries = fo.receivedendseries = null; 
			fo.endingstartseries = fo.endingendseries = null; 
			fo.beginstartseries = fo.beginendseries = null; 
			items << fo; 
		} 
		unissuedlist.clear(); 
		items.sort{ it.lineno } 	
		items.each{
			it.qtyreceived = (it.qtyreceived ? it.qtyreceived : null); 
			it.qtybegin = (it.qtybegin ? it.qtybegin : null); 
			it.qtyissued = (it.qtyissued ? it.qtyissued : null); 
			it.qtyending = (it.qtyending ? it.qtyending : null); 
		}

		def data = [:]
		data.items = items;
		data.info = [
			COLLECTORNAME	: params.collector ? params.collector.fullname : env.FULLNAME,
			COLLECTORTITLE  : params.collector ? params.collector.title : env.JOBTITLE,
			PERIOD			: 'FOR THE MONTH OF ' + params.month.caption + ', ' + params.year,
		]; 
		return data; 
	} 

	@ProxyMethod
	public def getRAAFByRemittance( params ) { 
		if ( !params.remittanceid ) throw new Exception('remittanceid parameter is required');
		if ( !params.formno ) params.formno = '%';

		def items = adb.getReportDataByRef([ refid: params.remittanceid, formno: params.formno ]);  
		buildRAAF( items, true ); 
		return items; 
	} 

	@ProxyMethod
	public def getRAAFByLiquidation( params ) { 
		if ( !params.liquidationid ) throw new Exception('liquidationid parameter is required');
		if ( !params.formno ) params.formno = '%';

		def items = adb.getReportDataByRef([ refid: params.liquidationid, formno: params.formno ]);  
		buildRAAF( items, true ); 
		return items; 
	} 	


	void buildRAAF( list, withrefid ) { 
		list.each {
			it.beginstartseries = (it.receivedstartseries>0? null: it.beginstartseries); 
			it.beginendseries = (it.receivedstartseries>0? null: it.beginendseries); 
			if ( it.issuedstartseries>0 ) {
				it.beginstartseries = (it.prevendingstartseries>0 ? it.prevendingstartseries : it.beginstartseries); 
				it.beginendseries = (it.prevendingendseries>0 ? it.prevendingendseries : it.beginendseries); 
			} 

			if ( it.receivedstartseries>0 && it.receivedendseries>0 ) { 
				it.qtyreceived = (it.receivedendseries-it.receivedstartseries)+1; 
			} 
			if ( it.beginstartseries>0 && it.beginendseries>0 ) { 
				it.qtybegin = (it.beginendseries-it.beginstartseries)+1; 
			} 
			if ( it.issuedstartseries>0 && it.issuedendseries>0 ) { 
				it.qtyissued = (it.issuedendseries-it.issuedstartseries)+1; 
			} 
			if ( it.endingstartseries>0 && it.endingendseries>0 ) {
				it.qtyending = (it.endingendseries-it.endingstartseries)+1; 
			} 

			if ( it.formtype=='cashticket' ) {
				def denomination = (it.denomination? it.denomination: 1) * 1.0;
				if ( it.qtyreceived>0 ) it.receivedamt = it.qtyreceived * denomination;  
				if ( it.qtybegin>0 ) it.beginamt = it.qtybegin * denomination;  
				if ( it.qtyissued>0 ) it.issuedamt = it.qtyissued * denomination;  
				if ( it.qtyending>0 ) it.endingamt = it.qtyending * denomination;  

				it.receivedstartseries = it.receivedendseries = null; 
				it.beginstartseries = it.beginendseries = null; 
				it.issuedstartseries = it.issuedendseries = null; 
				it.endingstartseries = it.endingendseries = null; 
				if ( it.stubno  ) it.afid = (''+ it.afid +'  #'+ it.stubno);
			} 

			if ( it.qtyissued > 0 && it.qtycancelled > 0 )	{
				it.qtyissued -= it.qtycancelled; 
				it.qtyissued = ( it.qtyissued > 0 ? it.qtyissued : 0 ); 
			} 

			it.receivedstartseries = (Integer) it.receivedstartseries;
			it.receivedendseries = (Integer) it.receivedendseries;
			it.beginstartseries = (Integer) it.beginstartseries;
			it.beginendseries = (Integer) it.beginendseries;
			it.issuedstartseries = (Integer) it.issuedstartseries;
			it.issuedendseries = (Integer) it.issuedendseries;
			it.endingstartseries = (Integer) it.endingstartseries;
			it.endingendseries = (Integer) it.endingendseries;
			it.qtyreceived = (Integer) it.qtyreceived;
			it.qtybegin = (Integer) it.qtybegin;
			it.qtyissued = (Integer) it.qtyissued;
			it.qtyending = (Integer) it.qtyending;
			
			if ( it.serieslength > 0 ) it.pattern = '0'*it.serieslength; 
			if ( !it.qtybegin ) it.qtybegin = it.beginstartseries = it.beginendseries = null; 
			if ( !it.qtyissued ) it.qtyissued = it.issuedstartseries = it.issuedendseries = null; 
			if ( !it.qtyending ) it.qtyending = it.endingstartseries = it.endingendseries = null; 
			if ( !it.qtyreceived ) it.qtyreceived = it.receivedstartseries = it.receivedendseries = null; 
		}

		boolean splitAF = varSvc.getProperty('rcd_split_unissued_accountable_form', 0).toString().equals("1");  

		def targetlist = list.findAll{( it.qtyissued > 0 )} 
		if ( targetlist ) list.removeAll( targetlist ); 

		def startindex = 0; 
		def forms = list.collect{[ formno: it.formno, formtype: it.formtype ]}.unique().sort{ it.formno } 
		if ( splitAF ) { 
			def list2 = list.findAll{( it.formno=='serial' )}
			list2.sort{ a,b-> a.formno<=>b.formno ?: a.sortseries<=>b.sortseries }
			list2.each{
				targetlist << it; 
			}

			list2 = list.findAll{( it.formno != 'serial' )}
			list2.sort{ a,b-> a.formno<=>b.formno ?: a.sortseries<=>b.sortseries }
			list2.each{
				targetlist << it; 
			}

		} else { 
			forms.findAll{( it.formtype=='serial' )}.each{ o-> 
				suppressSerialForms( targetlist, list, o.formno, startindex );  
				startindex += 1000; 
			} 
			forms.findAll{( it.formtype != 'serial' )}.each{ o-> 
				suppressNonSerialForms( targetlist, list, o.formno, startindex );  
				startindex += 1000; 
			} 			
		}

		list.clear(); 
		list.addAll( targetlist ); 
		targetlist.clear(); 
	}

	private void suppressSerialForms( targetlist, sourcelist, afid, startindex ) { 
		def groupindex = startindex; 
		def nextstartseries = 0; 
		def list = []; 
		sourcelist.findAll{( !it.qtyissued && it.receivedstartseries && it.formno==afid )}.sort{ it.receivedstartseries }.each{ 
			if ( it.receivedstartseries != nextstartseries ) groupindex++; 
			
			it.groupindex = groupindex; 
			nextstartseries = it.receivedendseries+1; 
			list << it; 
		} 
		list.groupBy{ it.groupindex }.each{k,v-> 
			def o = v.first(); 
			o.receivedstartseries = v.min{ it.receivedstartseries }.receivedstartseries; 
			o.receivedendseries = v.max{ it.receivedendseries }.receivedendseries;
			o.endingstartseries = o.receivedstartseries;
			o.endingendseries = o.receivedendseries; 
			o.qtyreceived = v.sum{( it.qtyreceived? it.qtyreceived : 0.0 )} 
			o.qtyending = o.qtyreceived; 
			o.endstub = o.startstub + v.size()-1;
			targetlist << o; 
		} 
		list.clear();

		nextstartseries = 0; 
		sourcelist.findAll{( !it.qtyissued && it.beginstartseries && it.formno==afid )}.sort{ it.beginstartseries }.each{ 
			if ( it.beginstartseries != nextstartseries ) groupindex++; 
			
			it.groupindex = groupindex; 
			nextstartseries = it.beginendseries+1; 
			list << it; 
		} 		
		list.groupBy{ it.groupindex }.each{k,v-> 
			def o = v.first(); 
			o.beginstartseries = v.min{ it.beginstartseries }.beginstartseries; 
			o.beginendseries = v.max{ it.beginendseries }.beginendseries;
			o.endingstartseries = o.beginstartseries;
			o.endingendseries = o.beginendseries; 
			o.qtybegin = v.sum{( it.qtybegin? it.qtybegin : 0.0 )} 
			o.qtyending = o.qtybegin; 
			o.endstub = o.startstub + v.size()-1;
			targetlist << o; 
		} 
		list.clear();		
	}

	private void suppressNonSerialForms( targetlist, sourcelist, afid, startindex ) { 
		def list = sourcelist.findAll{( it.formno==afid )} 
		if ( !list ) return; 

		def qtyreceived = 0;
		def qtybegin = 0;
		def qtyissued = 0;
		def qtyending = 0;
		list.each{
			qtyreceived += ( it.qtyreceived ? it.qtyreceived : 0 );
			qtybegin += ( it.qtybegin ? it.qtybegin : 0 );
			qtyissued += ( it.qtyissued ? it.qtyissued : 0 );
			qtyending += ( it.qtyending ? it.qtyending : 0 );
		}

		qtyreceived = ( qtyreceived ? qtyreceived : null ); 
		qtybegin = ( qtybegin ? qtybegin : null ); 
		qtyissued = ( qtyissued ? qtyissued : null ); 
		qtyending = ( qtyending ? qtyending : null ); 

		def o = list.first(); 
		o.qtyreceived = qtyreceived; 
		o.qtybegin = qtybegin;
		o.qtyissued = qtyissued; 
		o.qtyending = qtyending; 
		o.receivedamt = ( qtyreceived ? qtyreceived * o.denomination : null ); 
		o.beginamt = ( qtybegin ? qtybegin * o.denomination : null ); 
		o.issuedamt = ( qtyissued ? qtyissued * o.denomination : null ); 
		o.endingamt = ( qtyending ? qtyending * o.denomination : null ); 
		targetlist << o; 
		list.clear(); 
	} 
}
