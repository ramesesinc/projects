import com.rameses.annotations.*;
import com.rameses.common.*
import com.rameses.services.extended.*
import com.rameses.util.*


class TCReportService { 

	@ActiveDB('tcreport')
	def adb; 

	@Env
	def env; 
 
	@Service('DateService')
	def dtSvc; 

	@ProxyMethod 
	public def initReport() {
		def rundate = new java.sql.Date( dtSvc.getServerDate().getTime()); 
		def arrs = rundate.toString().split("-"); 
		return [		
			funds  : getFunds(), 
			months : dtSvc.getMonths(), 
			year   : arrs[0].toInteger(),  
			month  : arrs[1].toInteger(),  
			day    : arrs[2].toInteger() 
		]; 
	}

	@ProxyMethod 
	public def getCollectionByFund( params ) { 
		if ( !params.year ) throw new Exception('year parameter is required'); 
		if ( !params.month ) throw new Exception('month parameter is required'); 
		if ( !params.month?.index ) throw new Exception('month.index parameter is required'); 
		if ( !params.month?.caption ) throw new Exception('month.index parameter is required'); 

		def periodtype = 'MONTHLY'; 
		def YMD = new java.text.SimpleDateFormat("yyyy-MM-dd"); 

		if ( params.day ){ 
			def dtstr = params.year +'-'+ params.month.index.toString().padLeft(2, '0') +'-'+ params.day.toString().padLeft(2, '0'); 
			params.fromdate =  new java.sql.Date( YMD.parse( dtstr ).getTime()); 
			params.todate   =  new java.sql.Date( com.rameses.util.DateUtil.add( params.fromdate, "1d").getTime()); 
			periodtype = 'DAILY';

		} else { 
			def dtstr = params.year +'-'+ params.month.index.toString().padLeft(2, '0') +'-01'; 
			params.fromdate =  new java.sql.Date( YMD.parse( dtstr ).getTime()); 
			params.todate   =  new java.sql.Date( com.rameses.util.DateUtil.add( params.fromdate, "1M").getTime()); 
		} 

		params.filter = ''; 
		if( params.fund?.objid ) {
			params.fundid = params.fund.objid; 
			params.fundparentid = (params.withsubfund==true? params.fundid: null);  
		} else { 
			params.fundid = '%'; 
		} 
		
		def reportdata = [:]
		if ( params.postingtype?.objid == 'BY_REMITTANCE' ) { 
			reportdata.items = adb.getCollectionByFund( params ); 
		} else { 
			reportdata.items = adb.getCollectionByFundByLiquidation( params ); 
		} 
		
		if ( !reportdata.items ) throw new Exception("No record(s) found.     "); 

		reportdata.totalamount = reportdata.items.sum{( it.amount? it.amount : 0.0)}

		reportdata.summaries = []; 
		reportdata.items.groupBy{[ fundid: it.fundid, acctid: it.acctid ]}.each{ k,v-> 
			def fo = v.first(); 
			reportdata.summaries << [
				fundid: k.fundid, fundname: fo.fundname, 
				acctid: k.acctid, acctname: fo.acctname, 
				amount: v.sum{( it.amount? it.amount: 0.0 )} 
			]; 
		}
		reportdata.summaries.sort{( it.fundcode +'-'+ it.fundname )} 

		def reportheader = [
			REPORTTITLE     : 'REPORT OF COLLECTION BY FUND', 
			PREPAREDBY 		: env.FULLNAME, PREPAREDBYTITLE: env.JOBTITLE, 
			POSTINGTYPE     : params.postingtype.title.toUpperCase(), 
			PERIODTYPE      : periodtype.toUpperCase() 
		]; 

		if ( periodtype=='DAILY' ) {
			def formatter = new java.text.SimpleDateFormat("MMMMM dd, yyyy"); 
			reportheader.PERIOD = formatter.format( params.fromdate).toUpperCase(); 
		} else if ( periodtype=='MONTHLY' ) {
			def formatter = new java.text.SimpleDateFormat("MMMMM yyyy"); 
			reportheader.PERIOD = formatter.format( params.fromdate).toUpperCase(); 
		} 
		return [header: reportheader, reportdata: reportdata]; 
	}	


	@ProxyMethod 
	public def getAbstractOfCollection( params ) {
		if(params.day){
			def dt = params.year + '-' + params.month.index +  '-' + params.day.toString().padLeft(2, '0')

			params.fromdate =  dt + ' 00:00:00'
			params.todate =  dt + " 23:59:59"
		} else {
			params.fromdate = params.year + '-' + params.month.index + '-01 00:00:00'
			params.todate = dtSvc.format( 'yyyy-MM-dd', dtSvc.getMonthEndDate( dtSvc.parse('yyyy-MM-dd', params.fromdate) ) ) + " 23:59:59"
		}


		params.filter = ''
		if( params.fund ) {
			params.fundid = params.fund.objid
			params.filter += ' and ri.fund_objid = $P{fundid}  ' 

		}

		if(params.collector) {
			params.collectorid = params.collector.objid 
			params.filter += ' and cr.collector_objid = $P{collectorid} '

		}
		def data = [:]

		data.info = [
			PREPAREDBY 		: env.FULLNAME,
			PREPAREDBYTITLE : env.JOBTITLE, 
			PERIOD			: params.day ?  "FOR THE DAY OF " + params.month.caption + ' ' + params.day +  ', ' + params.year  : 'FOR THE MONTH OF ' + params.month.caption + ', ' + params.year,
			TITLE 			: "Abstract of Collection Report ",
			COLLECTORNAME	: params.collector ? params.collector.fullname : 'ALL'
		]
		
		data.items = adb.getAbstractOfCollection(params) 

		if(! data.items) throw new Exception("No record(s) found.     ")
		return data;
	}	



	@ProxyMethod
	public def getFunds( ) {
		return adb.getFunds()
	}

	@ProxyMethod
	public def getSubFunds( objid ) {
		return adb.getSubFunds([objid: objid])
	}

	@ProxyMethod
	public List getNumDays( year, month ) {
		if ( !month && month < 0 ) return []
		
		Calendar cal = Calendar.getInstance()
        cal.set( year, month, 1)
        int maxday = cal.getActualMaximum(cal.DAY_OF_MONTH)
		def numdays = []
		1.upto( maxday ) { numdays.add( it ) }
		return numdays 
	}	
}
