import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;

class AFReceiptService  {

	@DataContext("af_control")
	def afControl;

	@DataContext("af_control_detail")
	def afControlDetail;

	@DataContext("afiritem")
	def afRctItem;

	@DataContext("afir")
	def afRct;

	@Env
	def env;

    def formatSeries( def o,  int len ) {
    	return  o.toString().padLeft( len, '0');
    }
	
	@ProxyMethod
	public void addNewBatch( o ) { 
		

		def afunit = o.ref.afunit;
		

		int len = (afunit.serieslength ? afunit.serieslength : 10);	
		int batchno = 1;
		def v = afControl.find( [receiptid: o.ref.refid ] ).select("batchno:{MAX(batchno)}").groupBy( "receiptid" ).first();
		if(v) {
			batchno = v.batchno + 1;
		}

		int stubno = o.startstub; 
 		int starter = (o.startseries ? Integer.parseInt( o.startseries ) : 0);
		def afid = o.ref.item.objid;
		(1..o.qty).each { 
			def m = [:];
			m.receiptid = o.ref.refid;
			m.afid = afid;
			m.txnmode = 'ONLINE';
			m.state = 'DRAFT';
			m.unit = o.ref.unit;
			if( afunit.formtype == 'serial' ) {				
				m.startseries = formatSeries( starter, len  );
				m.currentseries = m.startseries;
				m.endseries = formatSeries( starter + afunit.qty - 1, len );
				starter += afunit.qty ;
			} else {
				m.startseries = 1;
				m.endseries = afunit.qty; 
				m.currentseries = m.startseries; 
			} 
			m.dtfiled = o.ref.dtfiled;
			m.stubno = stubno++;
			m.active = 0;
			m.prefix = o.prefix;
			m.suffix = o.suffix;
			m.batchno = batchno;
			m.currentindexno = 1;
			m.respcenter = o.ref.respcenter; 
			m.cost = o.ref.cost;
			m = afControl.create(m);
		} 
		throw new Exception("fire test " + o.itemid );
		afRctItem.find( [objid: o.itemid] ).update( [qtyserved: "{qtyserved + :qty}"], [qty: o.qty] ); 
		def z = afRctItem.find( [objid: o.itemid] ).select( "qty,qtyserved" ).first();
		if( z.qtyserved > z.qty )
			throw new Exception("Qty received must be less than or equal to qty requested");
	}


	@ProxyMethod
	public def post( def o ) {
		def z = afRctItem.find( [parentid: o.objid] ).where( " (qtyserved - qty) > 0" ).first();
		if (z) throw new Exception("Please ensure that all qty requested equal to qty received");
		def r = afRct.find([ objid: o.objid ]).select("txntype").first();

		afRct.find([ objid: o.objid ]).update([state: 'POSTED']);
		afControl.find( [receiptid: o.objid ]).update([state: 'OPEN' ]);

		if(r.txntype=='PURCHASE') {
			afControlDetail.addPurchaseReceiptDetails([ receiptid: o.objid ]); 
		}
		else {
			afControlDetail.addForwardReceiptDetails([ receiptid: o.objid ]); 
		}
	}

}
