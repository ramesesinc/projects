import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class AFCancelSeriesService  {

	@PersistenceContext("main")
	def em;

	@Service("AFControlService")
	def afSvc;

	@Env
	def env;
	
	@Service("DateService")
	def dateService;

	@Service("CollectionTypeService")
	def colsvc 

	@ProxyMethod
	public def init( def entity ) { 
		entity.objid = "CRCT"+new java.rmi.server.UID();
		def coltypes = colsvc.getCollectionTypes( entity )
		if( coltypes ) entity.collectiontype = coltypes[0]
		entity.user = [objid: env.USERID, name:env.USER];
		entity.collector = [objid: env.USERID, name:env.USER, title: env.JOBTITLE];
		entity.org = [objid:env.ORGID, name:env.ORGNAME];
		entity.receiptdate =  dateService.serverDate;
		entity.txndate = dateService.serverDate;
		entity.state = "CANCELLED"
		entity.paidby = "-"
		entity.paidbyaddress = "-"
		entity.amount = 0.0 
		entity.totalcash = 0.0
		entity.totalnoncash=0.0
		entity.cashchange=0.0
		entity.totalcredit=0.0
		entity.txnmode ='ONLINE'
		return entity
	}

	@ProxyMethod
	public def post( def receipt ) {
		em.create("cashreceipt", receipt );  

		def v = [objid: "CRCT"+new UID()];
		v.postedby = [ objid:env.USERID, name:env.FULLNAME ];
		v.receiptid = receipt.objid;
		v.controlid = receipt.controlid; 
		v.reason = receipt.reason;
		v.txndate = dateService.serverDate;
		
		em.create("cashreceipt:cancelseries", v );
	
		afSvc.updateNextSeries([objid: receipt.controlid]);
		return receipt;
	}	
		
		
}
