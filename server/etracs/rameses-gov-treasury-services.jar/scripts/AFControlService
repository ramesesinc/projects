import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;

class AFControlService  {

	@DataContext("af_control")
	def em;

	@Env
	def env;

	@ProxyMethod
	public void activate( def o ) {
		em.find( [objid: o.objid] ).update( [active:1 ]);
	}

	@ProxyMethod
	public void deactivate( def o ) {
		em.find( [objid: o.objid] ).update( [active:0]);	
	}

	@ProxyMethod 
	public void assignFund(def o) {
		em.find([objid: o.objid] ).update( [fund: o.fund ] );
	}

	@ProxyMethod 
	public void unassignFund(def o) {
		em.find([objid: o.objid] ).update( [fund: [objid: null, title: null] ] );
	}

	@ProxyMethod 
	public void changeMode(def o) {
		em.find([objid: o.objid] ).update( [txnmode: o.txnmode] );
	}

	@ProxyMethod
	public void assignSubcollector(def o) {
		em.find([objid: o.objid] ).update( [assignee: o.assignee] );
	}

	@ProxyMethod
	public void unassignSubcollector(def o) {
		em.find([objid: o.objid] ).update( [assignee: o.owner] );
	}


	@ProxyMethod
	public def findActiveControlForCashReceipt(def params) {
		params.filter = ' and ac.fund_objid is null ';
		if( params.fundid ) {
			params.filter =  ''' and ac.fund_objid = $P{fundid} ''';
		} 
		return em.findActiveControlForCashReceipt( params );
	}

	@ProxyMethod
	public void updateNextSeries( p ) {
		if (!p.qtyissued) p.qtyissued = 1;

		//open and check if the end series is not valid
		def o = em.find([ objid: p.objid ]).first(); 
		if( p.qtyissued >  (o.endseries - o.currentseries + 1)  ) {
			throw new Exception("There is not enough accountable forms for this batch");
		} 

		def nextseries = o.currentseries + p.qtyissued; 
		em.find([ objid: p.objid ]).update([ currentseries: nextseries ]); 		
	}

	/*
	@ProxyMethod
	public void activateControl(def p) {
		def m = [:];
		m.objid = p.objid;
		m.txnmode = p.txnmode;
		m.filter = ''
		if( p.fund && p.fund.objid) {
			m.filter = " and fund_objid='${p.fund.objid}'".toString()
		}
		
		if(!m.txnmode)
			throw new Exception("Please indicate txn mode first");

		m.afid = p.formno;
		if(!p.collector) 
			m.userid = env.USERID;
		else	
			m.userid = p.collector.objid
			
		def z = em.findActiveControlForDeactivation(m);
		if(z) {
			deactivateControl( z )
		}
		em.reactivateControl(m);
		
	}

	

	@ProxyMethod
	public void deactivateControl(def p) {
		def m =[ objid: p.objid ]
		m.filter = ''
		if( p.fund && p.fund.objid ) {
			m.filter = " and fund_objid='${p.fund.objid}'".toString()
		}
		em.deactivateControl(m);
	}

	

	@ProxyMethod
	public void changeMode( p ) { 
		em.find([ objid: p.objid ]).update([ txnmode: p.txnmode ]); 

		def o = em.find([ objid: p.objid ]).first(); 
		if ( !o ) return; 

		if ( o.active == 1 ) {
			em.debug = true;
			def sqlparam = [ownerid: o.owner.objid, afid: o.afid, txnmode: o.txnmode];
			def list = em.where('owner.objid= :ownerid and afid= :afid and txnmode= :txnmode and active=1', sqlparam).list(0,2);
			if ( list.size() > 1 ) em.find([ objid: p.objid ]).update([ active: 0]); 
		}
	} 

	@ProxyMethod
	public void assignToSubcollector(def p) {
		def m = [:];
		m.objid = p.objid;
		m.assigneeid = p.assignee.objid;
		m.assigneename = p.assignee.name;
		em.assignSubcollector(m);
	}

	@ProxyMethod
	public void unassign(def p) {
		em.unassignSubcollector([objid:p.objid]) 
	}

	@ProxyMethod 
	public def findAFSummary( params ) {
		if ( !params.controlid ) throw new Exception('controlid parameter is required'); 

		return em.findAFSummary( params ); 
	} 
	*/
}
