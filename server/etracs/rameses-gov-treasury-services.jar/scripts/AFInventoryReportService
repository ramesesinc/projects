import com.rameses.annotations.*;
import com.rameses.common.*
import com.rameses.services.extended.*
import com.rameses.util.*


class AFInventoryReportService  
{ 
	@ActiveDB('afinventory_report')
	def adb 

	@Env
	def env 
 
	@Service('DateService')
	def dtSvc

	@Service('ReportParameterService')
	def reportSvc

	@ProxyMethod
	public def generateReport( params ) {
		def p = [year:params.year, month:params.month.index]
		def items = adb.getReport( p ); 
		if ( !items ) throw new Exception("No record(s) found. ")
		
		items.each{
			if ( it.qtyissued>0 ) {
				it.endingstartseries = (it.issuedendseries < it.endseries? it.issuedendseries+1 : null); 
				it.endingendseries = (it.issuedendseries < it.endseries? it.endseries : null); 
			} else if ( it.qtyreceived>0 ) { 
				it.endingstartseries = it.receivedstartseries; 
				it.endingendseries = it.receivedendseries; 
			} else { 
				it.endingstartseries = it.beginstartseries; 
				it.endingendseries = it.beginendseries; 
			} 

			if ( it.endingstartseries>0 && it.endingendseries>0 ) {
				it.qtyending = (it.endingendseries-it.endingstartseries+1)/it.qtyunit; 
				it.qtyendingcost = it.qtyending * it.costperstub; 
			} 

			if ( it.gaincost == null ) it.gaincost = 0.0; 

			it.qtybegin = (Integer) it.qtybegin;
			it.qtyreceived = (Integer) it.qtyreceived;
			it.qtyissued = (Integer) it.qtyissued;
			it.qtyending = (Integer) it.qtyending;
			it.qtybegincost = (java.math.BigDecimal) it.qtybegincost;
			it.qtyreceivedcost = (java.math.BigDecimal) it.qtyreceivedcost;
			it.qtyissuedcost = (java.math.BigDecimal) it.qtyissuedcost;
			it.qtyendingcost = (java.math.BigDecimal) it.qtyendingcost;
			it.gaincost = (java.math.BigDecimal) it.gaincost;

			if ( it.formtype == 'serial' ) { 
				if ( it.qtybegin>0 ) it.beginseries = ''+ it.beginstartseries + ' - ' + it.beginendseries; 
				if ( it.qtyreceived>0 ) it.receivedseries = ''+ it.receivedstartseries + ' - ' + it.receivedendseries; 
				if ( it.qtyissued>0 ) it.issuedseries = ''+ it.issuedstartseries + ' - ' + it.issuedendseries; 
				if ( it.qtyending>0 ) it.endingseries = ''+ it.endingstartseries + ' - ' + it.endingendseries; 
			} 
		}

		def data =[ items: items ]; 
		data.info = [
			PREPAREDBY 		: env.FULLNAME,
			PREPAREDBYTITLE : env.JOBTITLE,
			TREASURERNAME	: reportSvc.standardParameter.TREASURERNAME, 
			TREASURERTITLE	: reportSvc.standardParameter.TREASURERTITLE,
			PERIOD			: 'FOR THE MONTH OF ' + params.month.caption + ', ' + params.year,
		]
		return data; 
	}
}
