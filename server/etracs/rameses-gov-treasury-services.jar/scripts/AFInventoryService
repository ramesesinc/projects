import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

public class AFInventoryService  {
	
	@ActiveDB("af_inventory")
	def em
 
	@ActiveDB("af_control")
	def afserial;

	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public def getListByAf( params ) {
		return em.getList( params );
	}

	@ProxyMethod
	public def getDetails( params) {
		return em.getDetails( params );
	}

	@ProxyMethod 
	public def getRespCenters( ) {
		return em.getRespCenters([:]);
	}

	private def initDetail(def o) {
		def m = [:];
		m.objid = "AFDETAIL"+ new UID();
		m.refid = o.refid;
		m.refno = o.refno;
		m.reftype = o.reftype;
		m.refdate = o.refdate;
		m.txndate = dateSvc.serverDate;
		m.qtyreceived = 0;
		m.qtybegin = 0;
		m.qtyissued= 0;
		m.qtycancelled = 0;
		m.qtyending = 0;
		return m;
	}


	@ProxyMethod
	public def postReceipt( o ) { 
		def m = [:]; 
		m.objid = "AFCTRL"+new UID(); 
		m.afid = o.afid; 
		m.txntype = o.txntype; 
		m.currentseries = o.startseries;
		m.startseries = o.startseries;
		m.endseries = o.endseries;
		m.currentstub = o.startstub;
		m.startstub = o.startstub;
		m.endstub = o.endstub;
		m.unit = o.unit;
		m.prefix = o.prefix;
		m.suffix = o.suffix;
		m.qtyin = o.qty;
		m.qtyout = 0;
		m.qtycancelled = 0;
		m.qtybalance = o.qty;
		m.currentlineno = 1;
		m.cost = o.cost;
		m.respcenter = o.respcenter;

		if ( o.currentseries ) {
			def nstartseries = o.currentseries.toString().toInteger();
			def nendseries = o.endseries.toString().toInteger();
			m.qtybalance = (nendseries - nstartseries) + 1; 
			m.currentseries = o.currentseries; 
			m.qtybegin = m.qtybalance; 			
		} 
		em.create( m );

		def detail = initDetail(o);
		detail.controlid = m.objid;
		detail.lineno = m.currentlineno;
		detail.txntype = o.txntype;
		detail.receivedstartseries= o.startseries;
		detail.receivedendseries = o.endseries;
		detail.endingstartseries = o.startseries;
		detail.endingendseries = o.endseries;
		detail.qtyreceived = m.qtyin; 
		detail.qtyending = m.qtyin; 
		detail.remarks = o.remarks; 
		detail.cost = 0.0; 
		if ( m.qtybegin ) { 
			detail.beginstartseries = m.currentseries; 
			detail.beginendseries = m.endseries; 
			detail.qtybegin = m.qtybegin; 

			detail.endingstartseries = detail.beginstartseries;
			detail.endingendseries = detail.beginendseries; 
			detail.qtyending = detail.qtybegin; 
		}
		em.create( detail, "detail" );

		m.detail = detail;
		return m;
	}


	@ProxyMethod
	public def postIssue( o ) {  
		def head = em.read([ objid: o.controlid ]);
		if ( !head ) {
			throw new Exception('AF control '+ o.controlid + ' record does not exist in the inventory. Please verify.'); 
		}		

		def cqty = 0;
		if ( o.cqty ) cqty = o.cqty;
		if ( !o.qtyissued ) o.qtyissued = o.qty; 

		def diff = o.qty - o.qtyissued; 
		o.qtycancelled = (diff > 0 ? diff : 0);
		head.qtycancelled += o.qtycancelled; 
		head.qtybalance -= (o.qty + cqty);
		head.qtyout = head.qtyin - head.qtybalance; 
		if( o.currentseries ) {
			head.currentseries = o.currentseries; 
		} else {
			head.currentseries = o.startseries + o.qty;	
		} 
		
		if ( head.startstub != head.endstub ) {
			head.currentstub = o.endstub + 1; 
		} 
		head.currentlineno += 1;
		em.update( head );

		def startseries = o.startseries; 
		def endseries = o.startseries + o.qtyissued - 1; 
		def estartseries = o.startseries + o.qty - 1; 
		def detail = initDetail(o);
		detail.controlid = head.objid;
		detail.lineno = head.currentlineno;
		detail.txntype = o.txntype;
		detail.issuedstartseries = startseries;
		detail.issuedendseries = endseries;
		detail.endingstartseries = (estartseries==head.endseries ? null : estartseries+1); 
		detail.endingendseries = (estartseries==head.endseries ? null : head.endseries); 
		detail.qtyissued = o.qtyissued;
		detail.qtyending = head.qtybalance;
		detail.qtycancelled = o.qtycancelled + cqty;
		if ( detail.qtycancelled > 0 ) {
			detail.cancelledstartseries = startseries + o.qtyissued; 
			detail.cancelledendseries = detail.cancelledstartseries + detail.qtycancelled - 1; 
		} 
		detail.remarks = o.remarks;
		detail.cost =  o.cost 
		em.create( detail, "detail" );
		if( o.cancelSeriesList) {
			def cs = [
				objid: detail.objid, 
				controlid: detail.controlid 
			]
			o.cancelSeriesList.each {
				cs.series = it.series 
				em.create( cs, "detail_cancelseries" );
			}
		}
	}

	@ProxyMethod
	public def postSale(def o)	{
		def m = [:];
		m.objid = "AFCTRL"+new UID();
		m.txntype = o.txntype;
		m.afid = o.afid;
		m.startseries = o.startseries;
		m.endseries = o.endseries;
		m.startstub = o.startstub;
		m.endstub = o.endstub;
		m.unit = o.unit;
		m.prefix = o.prefix;
		m.suffix = o.suffix;
		m.currentseries = o.endseries + 1;
		m.currentstub = o.startstub;
		m.qtyin = 0;
		m.qtyout = o.qty;
		m.qtycancelled = 0;
		m.qtybalance = 0;
		m.currentlineno = 1; 
		m.respcenter = o.respcenter;
		m.cost  = o.cost 
		em.create( m );
		
		def detail = initDetail(o);
		detail.controlid = m.objid;
		detail.lineno = m.currentlineno;
		detail.txntype = o.txntype;
		detail.receivedstartseries= o.startseries;
		detail.receivedendseries = o.endseries;
		detail.issuedstartseries = o.startseries;
		detail.issuedendseries = o.endseries;
		detail.qtyreceived = o.qty;
		detail.qtyissued= o.qty;
		detail.remarks = o.remarks; 
		detail.cost  = o.cost 
		em.create( detail, "detail" );
		return m;
	}

	@ProxyMethod
	public def postBegin(def o)	{
		def head = em.read( [objid: o.controlid]);
		head.currentlineno+=1;
		em.update( head );
		def detail = initDetail(o);
		detail.controlid = head.objid;
		detail.lineno = head.currentlineno;
		detail.txntype = o.txntype;
		detail.beginstartseries = o.startseries;
		detail.beginendseries = o.endseries;
		detail.endingstartseries = o.startseries 
		detail.endingendseries = o.endseries; 
		detail.qtybegin = o.qty;
		detail.qtyending = head.qtybalance;
		detail.remarks = o.remarks;
		em.create( detail, "detail" );
	}
	

	@ProxyMethod 
	public def transferAF( def o) {
		def control = em.read( o )
		def head = [
			controlid: o.objid, 
			txnmode: "TRANSFER",
			active: 0, 
			objid: o.objid, 
			currentseries:control.endseries + 1, 
			currentlineno: control.currentlineno + 1 
		]

		control.respcenter.objid = o.collector.objid
		control.respcenter.name = o.collector.name 
		control.respcenter.type = "COLLECTOR"
		control.startseries = o.currentseries 
		control.qty = control.qtybalance 
		control.remarks = "TRANSFERED FROM " + o.respcentername 
		control.refid = "TRANSFER";
		control.refno = "TRANSFER";
		control.reftype = "TRANSFER";
		control.txntype = "TRANFER";
		control.refdate = dateSvc.serverDate;
		control = postReceipt(control) 

		def c = [:];
		c.putAll(control);
		c.owner = control.respcenter;
		c.assignee = control.respcenter;
		c.refdate = control.dtfiled;
		c.txnmode = 'ONLINE'
		c.active = 0;
		c.stubno = control.startstub;
		afserial.create( c );
		
		em.update( head );
		afserial.closeAFControl( head )

		def m = [:];
		m.objid = "AFDETAIL"+ new UID();
		m.refid = "TRANSFER";
		m.refno = "TRANSFER";
		m.reftype = "TRANSFER";
		m.refdate = dateSvc.serverDate;
		m.txndate = dateSvc.serverDate;
		m.qtyreceived = 0;
		m.qtybegin = 0;
		m.qtyissued=  (o.endseries - o.currentseries) + 1;
		m.qtycancelled = 0;
		m.qtyending = 0;
		m.controlid = head.objid;
		m.lineno = head.currentlineno;
		m.txntype = "TRANFER";
		m.issuedstartseries = o.currentseries;
		m.issuedendseries = o.endseries;
		m.remarks = "TRANSFERRED TO " + control.respcenter.name;
		em.create( m, "detail" );
	}



	@ProxyMethod 
	def fixInventory( params ) {
		return params; 
	} 
}