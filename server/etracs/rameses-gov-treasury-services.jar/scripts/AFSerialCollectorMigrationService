import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*


/****************************************************
* this is a temporary solution to allow a collector
* to start transaction
*****************************************************/
class AFSerialCollectorMigrationService  { 


	@Service("AFInventoryService")
	def afInventorySvc ;

	@ActiveDB("af_control")
	def afControl;

	@ActiveDB('af_stock') 
	def afstock_em; 

	@ActiveDB('af_inventory') 
	def afinventory_em; 

	@Service("SequenceService") 
	def seqSvc;

	@PersistenceContext("main")
	def em; 

	@ProxyMethod
	public def getFormTypesSerial() { 
		def list = [];
		def aftypes = afstock_em.getAFByType([ formtype: 'serial' ]);
		aftypes.eachWithIndex{o,i-> o.rindex=i } 
		aftypes.groupBy{[objid: it.objid]}.each{k,v-> 
			def item = v.first().clone(); 
			item.units = []; 

			v.each{ o-> 
				item.units << [unit: o.unit, qty: o.qty]; 
			}
			item.remove('unit'); 
			item.remove('qty'); 
			list << item; 
		} 
		return list.sort{ it.rindex }; 
	}

	/**********************************************************
	* pass the ff. parameters:
	*    collector [objid, name]
	*    afid, 
	*    startseries
	*    suffix
	*    prefix
	*	 endseries
	*    currentseries
	*	 stub
	*    reason
	* 	 refno = transaction ref no. just create one
	*    refid = objid of transaction
	*    reftype = type of transaction
	*    refdate = date of transaction
	*    remarks
	**********************************************************/
	@ProxyMethod
	public void post( m ) {
		if (!m.afid) throw new Exception('afid parameter is required');
		if (!m.unit) throw new Exception('unit parameter is required');
		if (!m.startseries) throw new Exception('startseries parameter is required');
		if (!m.currentseries) throw new Exception('currentseries parameter is required');
		if (!m.endseries) throw new Exception('endseries parameter is required');

		def startseries = m.startseries.toString().toInteger(); 
		def testdata = afinventory_em.findOverlappingAF([afid: m.afid, unit: m.unit, startseries: startseries]); 
		if (testdata) throw new Exception('Series '+ m.startseries + ' already exists ');

		def afdata = afstock_em.findAF([objid: m.afid, unit: m.unit]); 
		if (!afdata) throw new Exception('AF#' + m.afid + ' ' + m.unit + ' does not exist'); 

		def endseries = m.endseries.toString().toInteger();
		def currentseries = m.currentseries.toString().toInteger(); 
		def afqty = (endseries - startseries) + 1; 
		if (afqty > afdata.qty) throw new Exception("Series quantity must not exceed to " + afdata.qty); 

		if (!m.refno) m.refno = 'SYSTEM' + seqSvc.getNextFormattedSeries("AFSERIALFORWARD")

		def head = [:];
		head.refid = m.refid;
		head.reftype = m.reftype;
		head.refno = m.refno;
		head.refdate = m.refdate;
	    head.startstub = m.stub;
	    head.endstub = m.stub;
	    head.afid = m.afid;
	    head.currentstub = m.stub;
		head.startseries = startseries;
		head.currentseries = currentseries;
		head.endseries = endseries;
		head.prefix = m.prefix;
		head.suffix = m.suffix;
		head.unit = afdata.unit;
		head.remarks = m.remarks;
		head.respcenter = m.collector;
		head.txntype = "COLLECTOR BEG.BAL.";
		head.qtybalance = (endseries - currentseries) + 1; 
		head.qty = afqty;		

		if(!head.respcenter.type) head.respcenter.type = 'COLLECTOR';
		
		def q = afInventorySvc.postReceipt(head);
		q.txnmode = 'ONLINE'; 
		q.active = 0; 		
		q.assignee = q.respcenter; 
		q.stubno = q.startstub; 
		q.owner = q.respcenter; 
		afControl.create( q ); 
	}
}
