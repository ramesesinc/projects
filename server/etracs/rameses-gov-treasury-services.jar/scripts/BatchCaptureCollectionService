import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

public class BatchCaptureCollectionService  {
	
	@ActiveDB("batchcapture_collection")
	def em

	@ActiveDB("collectiontype")
	def colltype;

	@ActiveDB("cashreceipt")
	def cashreceipt_em;

	@ActiveDB("af_control")
	def afcontrol_em;

	@ActiveDB("af_inventory")
	def afinventory_em;

	@PersistenceContext('main')
	def pem 

	@Service("DateService")
	def dtSvc

	@Service("CashReceiptService")
	def crSvc;

	@Service("CashReceiptVoidService")
	def voidSvc;

	@Env
	def env

	
	@ProxyMethod
	public def initBatchCapture( entity ){ 
		if( em.findBatchControlByState(entity) ) 	
			throw new Exception("There are still unposted collection for this series. ");

		def receiptdate = entity.defaultreceiptdate;
		if ( receiptdate instanceof String ) {
			receiptdate = java.sql.Date.valueOf( receiptdate );  
		} 

		def x = em.findMaxReceiptDate([ controlid: entity.controlid ]); 
		if ( x?.maxreceiptdate && receiptdate.before(x.maxreceiptdate) ) { 
			def sdate = new java.text.SimpleDateFormat('yyyy-MM-dd').format( x.maxreceiptdate ); 
			throw new Exception('Transaction date must be greater than or equal to ' + sdate ); 
		} 

		entity.objid = "BCC"+new java.rmi.server.UID();
		entity.state = 'DRAFT';
		entity.org =  [objid:env.ORGID, name:env.ORGNAME];
		entity.txndate = dtSvc.getServerDate(); 
		entity.paymenttype = 'CASH';
		entity.totalamount = 0.0
		entity.totalnoncash = 0.0;
		entity.totalcash = 0.0;
		entity.amount = 0.0
		em.create(entity, "batchcapture_collection" )

		entity.batchitems = []; 
		entity.fund = entity.collectiontype?.fund; 
		return entity; 
	}

	@ProxyMethod 
	public def addUpdateItem( entity, item ) { 
		em.deleteBatchEntryItems( item ); 
		em.delete( item, 'entry' ); 
		em.create( item, "entry");

		item.items.each { 
			it.objid ="BCCEI"+new java.rmi.server.UID();
			it.parentid = item.objid;
			it.item.fund = it.fund;
			it.amount = ( it.amount? it.amount : item.amount );
			em.create( it, "entry_item" ); 
		} 

		def bes = em.findBatchSummary([ objid : item.parentid ]); 
		if ( bes == null ) bes = [:]; 

		bes.totalcash = ( bes.totalcash ? bes.totalcash : 0.0 ); 
		bes.totalnoncash = ( bes.totalnoncash ? bes.totalnoncash : 0.0 ); 
		bes.totalamount = bes.totalcash + bes.totalnoncash;
		bes.objid = item.parentid;
		em.updateBatchSummary( bes ); 

		if ( item.paymentitems ) {
			item.totalnoncash = item.paymentitems.sum{ it.amount } 
			item.totalcash = 0.0; 
		} else { 
			item.totalnoncash = 0.0;
			item.totalcash = item.items.sum{ it.amount } 
		} 

		def oitem = em.findBatchEntry([ objid: item.objid ]); 		
		def header = em.read([ objid: item.parentid ]); 
		def maxentry = em.getBatchEntries([ objid: item.parentid ]).max{ it.series } 
		if ( maxentry && maxentry.series ) {
			header.currentseries = maxentry.series + 1; 
		} else {
			header.currentseries = header.startseries; 
		} 
		return [ header: header, item: oitem ];  
	} 

	@ProxyMethod  
	public def removeItem( item, entity ) { 
		em.deleteBatchEntryItems( item ); 
		em.delete( item, "entry" ); 

		def bes = em.findBatchSummary([ objid : item.parentid ]); 
		if ( bes == null ) bes = [:]; 

		bes.totalcash = ( bes.totalcash ? bes.totalcash : 0.0 ); 
		bes.totalnoncash = ( bes.totalnoncash ? bes.totalnoncash : 0.0 ); 
		bes.totalamount = bes.totalcash + bes.totalnoncash;
		bes.objid = item.parentid;
		em.updateBatchSummary( bes ); 
		
		def header = em.read([ objid: item.parentid ]); 
		def maxentry = em.getBatchEntries([ objid: item.parentid ]).max{ it.series } 
		if ( maxentry && maxentry.series ) {
			header.currentseries = maxentry.series + 1; 
		} else {
			header.currentseries = header.startseries; 
		} 
		return header; 
	} 


	@ProxyMethod
	public def submitForPosting( params ) {
		if ( !params.objid ) throw new Exception('objid parameter is required');
		if ( !params.checksum ) throw new Exception('checksum parameter is required');

		def header = em.read( params, 'batchcapture_collection' ); 
		if ( !header ) throw new Exception('Could not open batchcapture collection');  

		def entries = em.getBatchEntries( params ); 
		if ( !entries ) throw new Exception('Process failed. There must be at least 1 item for this transaction');

		def checklist = [ header.objid, header.totalamount, entries.size() ]; 
		entries.each{ checklist << it.series }

		def targetchecksum = com.rameses.util.Encoder.MD5.encode(checklist.join(',')); 
		if (!( params.checksum == targetchecksum )) {
			throw new Exception('Invalid checksum value. Please reopen and verify the transaction');
		}

		def nextseries = entries.min{ it.series }.series; 
		entries.each{
			if ( it.series == nextseries ) {
				nextseries = it.series + 1; 
			} else { 
				throw new Exception('Process failed. Receipt# '+ it.receiptno +' may have been tampered. Please verify');
			} 
		}

		def item = params.batchitems.find{it.amount == 0.0 && (it.voided == 0 || it.voided == false)}
		validateAmount(item)

		header.state = 'FORPOSTING'; 
		em.update( header, 'batchcapture_collection' ); 
		return header; 
	} 

	@ProxyMethod
	public void removeBatchCapture(def entity) {
		em.deleteBatchEntryItemByRootid(entity);
		em.deleteBatchEntry(entity);
		em.delete(entity, "batchcapture_collection"); 
	}

	@ProxyMethod
	public def disapproved( params ) {
		def header = em.read( params, 'batchcapture_collection' ); 
		if ( !header ) throw new Exception('Could not open batchcapture collection');  

		header.state = 'DRAFT'; 
		em.update( header, 'batchcapture_collection' ); 
		return header;  
	} 

	@ProxyMethod
	public def post( params ) { 
		if ( !params.objid ) throw new Exception('objid parameter is required');

		def entity = em.read( params, 'batchcapture_collection' ); 
		if ( !entity ) throw new Exception('Could not open batchcapture collection');  

		params.batchid = params.objid; 
		def forpostings = em.getForPostingSummary( params ); 
		if ( forpostings ) {
			def x = forpostings.find{ it.objid != params.batchid } 
			if ( x ) throw new Exception('There is a previous for posting transaction with the same accountable form. Please verify.'); 
		} 

		entity.batchitems = em.getBatchEntries( params ); 
		if ( !entity.batchitems ) throw new Exception('Process failed. There must be at least 1 item for this transaction');

		entity.batchitems.each {bi->
			validateAmount(bi);

			bi.batchcapture = true;
			bi.collector = entity.collector;
			bi.formtype = entity.formtype;
			bi.formno = entity.formno;
			bi.stub = entity.stub;
			bi.controlid = entity.controlid;
			bi.txnmode = entity.txnmode;
			bi.org = entity.org;
			bi.cashchange = 0;
			bi.totalcredit = 0;
			bi.user = entity.capturedby;

			bi.items = em.getBatchEntryItems( bi );  			
			bi.items.each { 
				it.item.fund = it.fund; 
				it.amount = (it.amount? it.amount: bi.amount);
				it.remarks = bi.remarks; 
			}

			if ( !bi.paymentitems ) bi.paymentitems = []; 
			else if ( bi.paymentitems instanceof String ) {
				bi.paymentitems = em.serializer.read( bi.paymentitems ); 
			}

			crSvc.post( bi );
		} 
		entity.batchitems.findAll{ it.voided > 0 }.each{
			it.collector = entity.collector;
			voidSvc.post([ receipt: it, reason: "CANCELLED" ]); 
		}

		entity.state = 'POSTED';
		entity.postedby = [ objid: env.USERID, name: env.USER, date: dtSvc.serverDate ]; 
		em.post( entity ); 
		return entity; 
	}

	@ProxyMethod
	public def submitForOnlineRemittance( params ) { 
		if ( !params.objid ) throw new Exception('objid parameter is required');

		def entity = em.read( params, 'batchcapture_collection' ); 
		if ( !entity ) throw new Exception('Could not open batchcapture collection');  

		params.batchid = params.objid; 
		def postedlist = em.getPostedSummary( params ); 
		if ( postedlist ) {
			def x = postedlist.find{ it.objid != params.batchid } 
			if ( x ) throw new Exception('There is a previous posted transaction with the same accountable form. Please verify.'); 
		} 

		def batchitems = em.getBatchEntries( params ); 
		if ( !batchitems ) throw new Exception('Process failed. There must be at least 1 item for this transaction');

		batchitems.each {bi-> 
			em.updateCashReceiptState(bi); 
		} 

		entity.state = 'CLOSED';  
		em.updateBatchCaptureState( entity ); 
		return [ state: 'CLOSED' ]; 
	} 

	@ProxyMethod
	public def getColumns(def p) {
		return [
			[name:'state', caption:'State'],
			[name:'txndate', caption:'TxnDate', type:'date', outputFormat:'yyyy-MM-dd HH:mm:ss'],
            [name:'formno', caption:'AF No.'],
            [name:'collectorname', caption:'Collector'],
            [name:'startseries', caption:'Start Series', type:'integer'],
            [name:'endseries', caption:'Endseries', type:'integer'],
            [name:'totalamount', caption:'Amount', type:'decimal', format:'#,##0.00' ],
            [name:'capturedbyname', caption:'Encoded By']
		];
	}

	@ProxyMethod
	public def getList( params ) {
		params.searchtext = params.searchtext ? params.searchtext + "%" : "%"
		params.filter = '';
		if( params.listtype == 'bysubcollector') {
			params.collectorid = env.USERID;
			params.filter = ''' AND bcc.capturedby_objid like $P{collectorid} ''';
		}
		else if( params.listtype == 'bycollector') {
			params.collectorid = env.USERID;
			params.filter = ''' AND bcc.collector_objid like $P{collectorid} ''';
		} 
		return em.getList(params);
	}

	@ProxyMethod 
	public def open( params ) {
		def entity = em.read(params, "batchcapture_collection" )
		if ( !entity ) throw new Exception("Could not open selected item.  ")

		def colltypedata = colltype.read( entity.collectiontype ); 
		entity.fund = colltypedata?.fund; 

		entity.batchitems = em.getBatchEntries( entity );
		if ( entity.batchitems ) {
			entity.currentseries = entity.batchitems.max{ it.series }.series + 1; 
		} else { 
			entity.currentseries = entity.startseries; 
		} 

		entity.batchitems.each {
			it._filetype = "batchcapture:misc"
			it.items = em.getBatchEntryItems(it)
			it.items.each {
				it.item.fund = it.fund;
			}
			
			def fi = (it.items? it.items[0]: [:]); 
			it.acctinfo = (it.items.size() > 1) ? '( Multiple Accounts )' : fi.item?.title 
			it.remarks = fi.remarks;
			it.paymentitems = (it.paymentitems ? pem.serializer.read(it.paymentitems)  : [])
			it.collector = entity.collector
		} 
		
		def xxa = em.findRemitCount([ batchid: params.objid ]); 
		entity.remitted = (xxa?.remitcount && xxa.remitcount>0) ? true: false;  
		return entity; 
	}

	void validateAmount(item){
		if (item && item.amount <= 0.0 && item.voided == 0){
			throw new Exception('Amount for Receipt No. ' + item.receiptno + ' must be greater than zero.')
		}
	}

	@ProxyMethod 
	public def revertPosting( params ) {
		if ( !params.objid ) throw new Exception('objid parameter is required'); 

		def entity = em.read( params, "batchcapture_collection" ); 
		if ( entity.state != 'POSTED' ) {
			throw new Exception('Cannot revert transaction since status is not POSTED');  
		}

		params.batchid = params.objid; 
		def history = em.getAFHistory( params ); 
		if ( history ) {
			def o = history.find{ it.objid==params.batchid } 
			if ( o.hasremittance > 0 ) {
				throw new Exception('Cannot revert transaction since receipts are already remitted'); 
			} 

			history.remove( o ); 
			if ( history ) { 
				throw new Exception('Cannot revert transaction. Please check batch capture transaction history for this accountable form');  
			}
		} 

		def info = em.findRemitCount( params ); 
		if ( info?.remitcount && info.remitcount>0 ) {
			throw new Exception('Cannot revert transaction since receipts are already remitted'); 
		}

		params.controlid = entity.controlid; 
		params.entries = em.getBatchEntries( params ).collect{[ receiptid: it.objid ]} 
		params.entries.each{ 
			cashreceipt_em.removeReceiptVoid( it ); 
			cashreceipt_em.removeReceiptItems( it ); 
			cashreceipt_em.removeReceipt( it ); 
		} 

		def m = [ controlid: params.controlid ]; 
		info = cashreceipt_em.findAFReceiptSummary( m ); 
		if ( info ) m.maxseries = info.maxseries; 

		m.objid = m.controlid; 
		def afcdata = afcontrol_em.read( m ); 
		def afddata = afinventory_em.findFirstDetail( m ); 
		if ( m.maxseries && m.maxseries > 0 ) {
			afcdata.currentseries = m.maxseries+1; 
		} else if ( afddata?.beginstartseries ) { 
			afcdata.currentseries = afddata.beginstartseries; 
		} else {
			afcdata.currentseries = afcdata.startseries; 
		} 

		if ( afcdata.currentseries > afcdata.endseries ) {
			afcdata.active = 0; 
		} 
		afcontrol_em.save( afcdata ); 

		entity.state = 'FORPOSTING'; 
		em.save( entity, "batchcapture_collection" ); 
		return [ state: entity.state ];  
	} 
}