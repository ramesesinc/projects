import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*


/****************************************************
* this is a temporary solution to allow a collector
* to start transaction
*****************************************************/
class CashTicketCollectorMigrationService  { 

	@Service("AFInventoryService")
	def afInventorySvc ;

	@ActiveDB("af_control")
	def afControl;

	@Service("SequenceService") 
	def seqSvc;

	
	/**********************************************************
	* pass the ff. parameters:
	*    collector [objid, name]
	*    afid = cashticket afid 
	*    qty = qty issued
	*    reason
	* 	 refno = transaction ref no. just create one
	*    refid = objid of transaction
	*    reftype = type of transaction
	*    refdate = date of transaction
	*    remarks
	**********************************************************/
	@ProxyMethod
	public void post( def m ) {
		
		if(! m.refno) m.refno = 'SYSTEM' + seqSvc.getNextFormattedSeries("CASHTICKETFORWARD")

		def head = [:];
		head.refid = m.refid;
		head.reftype = m.reftype;	
		head.refno = m.refno;
		head.refdate = m.refdate;
	    head.startstub = m.stubno;
	    head.endstub = m.stubno;
	    head.afid = m.afid;
	    head.currentstub = m.stubno;
		head.startseries = 1;
		head.endseries = m.qty;
		head.currentseries = 0;
		head.qty = m.qty;
		head.unit = 'PAD';
		head.remarks = m.remarks;
		head.respcenter = m.collector;
		if(!head.respcenter.type) head.respcenter.type = 'COLLECTOR';
		head.txntype = "COLLECTOR BEG.BAL.";
		
		def q = afInventorySvc .postReceipt(head);
		q.txnmode = 'ONLINE'
		q.assignee = q.respcenter
		q.active = 0 
		q.stubno = q.startstub 
		q.owner = q.respcenter
		afControl.create( q );
	}
}
