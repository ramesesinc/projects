import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.util.*;

class CollectionDepositService {

	@DataContext("deposit")
	def dep_db;

	@DataContext("deposit_bankdeposit")
	def depbank_db;

	@DataContext("deposit_fundtransfer")
	def depft_db;

	@ActiveDB("deposit_tool")
	def deptool_db;

	@Service('ControlService') 
	def controlSvc;

	@Service("DateService")
	def dateSvc;

	@Service('Var')
	def var;

	@Env
	def env;


	@ProxyMethod 
	public def init() { 

		def pid = 'DEP'+ new java.rmi.server.UID(); 
		def txndate = dateSvc.getServerDate(); 
		def dtposted = new java.sql.Date( txndate.time );  

		def txncode = [ "DEP", env.TXNCODE ].findAll{( it )}.join("-");
		def txnno = controlSvc.formatTxnno([ txncode: txncode, txndate: dtposted, format: var.deposit_format, sequenceid_format: var.deposit_sequenceid_format ]); 

		def deps = dep_db.getAvailableFundsForDeposit(); 
		deps.each{ o-> 
			o.batchid = pid; 
			o.objid = pid +'-'+ o.fundid; 
			o.controlno = txnno +'-'+ o.fundcode; 
			o.state = 'OPEN'; 
			o.txndate = txndate;
			o.dtposted = dtposted; 
			o.postedby = [ objid: env.USERID, name: env.FULLNAME ];
			o.amount = o.amountdeposited = 0.0; 
			o.cramount = o.cramounttransferred = 0.0; 
			dep_db.create( o ); 

			def m = [ depositid: o.objid, fundid: o.fundid ]; 
			dep_db.bindLiquidationFunds( m ); 
			dep_db.bindCashReceipChecks( m );
			dep_db.insertBankDeposits( m );  

			def fts = dep_db.getBuildFundTransfers( m ); 
			fts.eachWithIndex{ oi,idx-> 
				oi.objid = oi.depositid +'-'+ idx; 
				depft_db.create( oi );  
			} 
		} 
		return deps; 
	} 


	@ProxyMethod 
	public void revert( params ) {
		if ( !params.batchid ) throw new Exception('batchid parameter is required'); 

		def m = [ batchid: params.batchid ]; 
		deptool_db.unbindCashReceiptChecks( m ); 
		deptool_db.unbindLiquidationFunds( m ); 
		deptool_db.removeFundTransfers( m ); 
		deptool_db.removeBankDeposits( m ); 
		deptool_db.removeDeposit( m ); 
	} 
}