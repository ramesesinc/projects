import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class CollectionTypeService extends ActiveCrudListService {

	@ActiveDB("collectiontype")
	def em;

	@ActiveDB("collectiontype_account")
	def ctacct;
	
	@Service('OrgService') 
	def orgSvc; 

	@Env
	def env; 

	@ProxyMethod
	public def getColumns( def o ) {
		return[
			[name:'name', caption:'Name' ],
			[name:'title', caption:'Title' ],
			[name:'formno', caption:'Form No' ],
			[name:'handler', caption:'Handler' ],
			[name:'org.name', caption:'Org Name' ],
		];
	}

	void beforeList(o) {
		o._pagingKeys = 'ct.objid'; 
		o.searchtext = (o.searchtext ? o.searchtext : '') +'%'

		o.filter = '';
		if (o.org?.objid) {
			o.filter += ''' AND ct.org_objid=$P{orgid} '''; 
			o.orgid = o.org.objid; 
		} else if (o.orgType) {
			o.filter += ''' AND o.orgclass=$P{orgType} '''; 
		}
	}

	void beforeRemoveEntity( ct ) {
		removeAccts( ct ); 
	} 

	void afterOpen( ct ) {
		ct.accounts = ctacct.getAccounts([ objid: ct.objid ]); 
	}

	void afterCreate( ct ) {
		insertAccts( ct ); 
	} 

	void afterUpdate( ct ) {
		removeAccts( ct ); 
		insertAccts( ct ); 
	} 

	void removeAccts( ct ) {
		ctacct.removeAccounts([objid: ct.objid]); 
	}
	void insertAccts( ct ) {
		ct.accounts?.each{o-> 
			o.collectiontypeid = ct.objid; 
			ctacct.create( o ); 
		} 
	}

	
	//must return a collection of elements with fields [formno and formtype]
	//this is impt for associating handlers. Used by collection type.
	@ProxyMethod
	public def getFormTypes() {
		return em.getFormTypes();
	}

	//used by cash receipt initial
	@ProxyMethod
	public def getCollectionTypes( params ) {
		return em.findAllByFormNo( params ); 
	}

	@ProxyMethod
	public def getOnlineCollectionTypes(def o) {
		def params = [orgcode: env.ORGCODE, clientcode: env.CLIENTCODE]; 
		params.filter = '';
		if( o.formtype ) {
			params.formtype = o.formtype;
			params.filter = ''' AND ct.formno =$P{formtype} ''';
		}
		return em.getOnlineCollectionTypes(params); 
	}	

	@ProxyMethod
	public def getOfflineCollectionTypes(def o) {
		def params = [orgcode: env.ORGCODE, clientcode: env.CLIENTCODE]; 
		params.filter = '';
		if( o.formtype ) {
			params.formtype = o.formtype;
			params.filter = ''' AND ct.formno =$P{formtype} ''';
		}
		return em.getOfflineCollectionTypes( params ); 
	} 

	@ProxyMethod
	public def getBatchCollectionTypes( org ) { 
		def params = [orgcode: org?.objid, orgclass: org?.orgclass]; 
		if ( org.objid ) { 
			return em.getBatchCollectionTypesByOrg( params ); 
		} else if( org.orgclass ) { 
			return em.getBatchCollectionTypesByOrgClass( params ); 
		} 

		def root = orgSvc.getRoot(); 
		if ( root?.objid == env.ORGID ) { 
			return em.getBatchCollectionTypes(); 
		}
		
		params.orgcode = env.ORGID; 
		return em.getBatchCollectionTypesByOrg( params ); 
	} 

	@ProxyMethod
	public def findByHandler(def o) {
		if(! o.handler) throw new Exception("'handler' is required.      ")

		return em.findCollectionTypeByHandler(o);
	}

	@ProxyMethod
	public def getFormTypesSerial() { 
		return em.getFormTypesSerial(); 
	}

	@ProxyMethod
	public def getFormTypesCashticket() { 
		return em.getFormTypesCashticket(); 
	}

	@ProxyMethod
	public def getFormTypesForBatch() { 
		return em.getFormTypesForBatch(); 
	}

	@ProxyMethod
	public def findAllByFormNoForBatch( params ) {
		return em.findAllByFormNoForBatch( params );
	}

	@ProxyMethod
	public def getAccounts( params ) {
		return ctacct.getAccounts( params );
	}

	@ProxyMethod
	public def addAccount(def o) {
		def ct = em.read( [objid: o.collectiontypeid] ); 
		o.collectiontypehandler = ct?.handler; 
		return ctacct.create(o); 
	} 

	@ProxyMethod
	public def updateAccount(def o) {
		o.account_objid = o.account.objid;
		return ctacct.update(o);
	}

	@ProxyMethod
	public def removeAccount(def o) {
		o.account_objid = o.account.objid;
		return ctacct.delete(o);
	}

	@ProxyMethod
	public def getCategories() {
		return em.getCategories();	
	}
	
	@ProxyMethod
	public def findAccount(def o) {
		if(!o.objid) throw new Exception("collectiontype objid is required!");
		return ctacct.findAccount(o);	
	}
	
	@ProxyMethod
	public def findAccountByTag(def o) {
		if(!o.objid) throw new Exception("collectiontype objid is required!");
		if(!o.tag) throw new Exception("tag is required!");
		return ctacct.findAccountByTag(o);	
	}

}
