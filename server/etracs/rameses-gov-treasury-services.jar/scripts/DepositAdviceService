import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;

class LiquidationService  {

	@Env
	def env;

	@Service("DateService")
	def dateSvc;

	@Service("CashBreakdownSummaryService")
	def cashBreakdownSvc;

	@Service("SequenceService")
	def seqSvc;

	@DataContext("liquidation")
	def liqEm;

	@DataContext("remittance")
	def remEm;

	@DataContext("cashreceiptpayment_noncash")
	def ncEm;

	@ProxyMethod
	public def create( def pp ) {
		def m = [:];
		m.controlno = 'TMP-LIQ-'+env.USERID;
		m.controldate = dateSvc.getBasicServerDate();
		m.dtposted = dateSvc.getServerDate();
		m.state = "OPEN";
		m.totalcash = 0;
		m.totalcheck=0;
		m.totalcr = 0;
		m.cashbreakdown = [];
		m.liquidatingofficer = [objid:env.USERID, name: env.FULLNAME, title: env.JOBTITLE ]; 
		m.amount = 0;
		m = liqEm.create( m );

		remEm.where("state='OPEN' AND liquidationid IS NULL").update( [liquidationid: m.objid ]);
		def z = [liquidationid: m.objid]
		liqEm.insertLiquidationFund( z );
		return m;
	}

	/*
	@ProxyMethod
	public void updateRemittanceFundBreakdown( def m ) {
		if(!m.objid) throw new Exception("objid is required");
		if(!m.cashbreakdown) throw new Exception("breakdown is required");
		if(!m.remittanceid ) throw new Exception("remittanceid is required");

		def bd = m.cashbreakdown.findAll{ it.qty > 0 };
		rfEm.find( [objid: m.objid] ).update( [cashbreakdown: bd ] );

		def list = rfEm.select("cashbreakdown").find( [remittanceid: m.remittanceid ] ).list()*.cashbreakdown;
		bd = cashBreakdownSvc.summarize( list );

		remEm.find( [objid: m.remittanceid ] ).update( [cashbreakdown: bd ] );
	}	

	@ProxyMethod
	public def post( def o ) {
		//check total breakdown before submitting
		def z = remEm.find( [objid: o.objid ] ).select("totalcash,cashbreakdown").first();
		if( z.totalcash > 0 && !z.cashbreakdown )
			throw new Exception("Please ensure cash breakdown in each remittance fund is correct ");

		if( z.cashbreakdown ) {
			if( z.totalcash != z.cashbreakdown.sum{it.amount}  )
				throw new Exception("Cash breakdown does not match total cash");	
		}

		o.controlno = 'REM-'+env.USER;
		o.state = 'POSTED';
		remEm.find( [objid: o.objid ] ).update( o );

		//update also each remittance fund to fund
	}
	*/

}
