import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;

class DepositSlipService  {

	@DataContext("depositslip")
	def depositSlipEm;

	@DataContext("depositvoucher")
	def depositVoucherEm;

	@Env
	def env;

	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public def create( def o ) {

		def tmp = [:];
		tmp.depositvoucherid = o.depositvoucherid;
		tmp.createdby = [objid:env.USERID, name:env.FULLNAME];
		tmp.dtcreated = dateSvc.getServerDate();
		tmp.bankaccount = o.bankaccount;
		tmp.depositdate = o.depositdate;
		tmp.state = 'DRAFT';
		tmp.amount = 0;
		tmp.totalcash = 0;
		tmp.totalcheck = 0;
		tmp.cashbreakdown = [];

		if( o.totalcash > 0 ) {
			def m = [:];
			m.putAll( tmp );
			m.deposittype = 'CASH';
			m.totalcash = o.totalcash;
			m.amount = o.totalcash;
			m.cashbreakdown = o.cashbreakdown;
			depositSlipEm.create(m);
		}

		if( o.checks ) {
			def grps = o.checks.groupBy{ it.deposittype };
			int i = o.numcheckslimit;
			if( i > 0 ) {
				grps.each {k,v->
					if( !k ) throw new Exception("check type is required");
					def arr = [];
					def list = v;
					while(true) {
					    def p = list[0..(i-1)];
					    arr << p;
					    list = list -p;
					    if(list.size() <= i) {
					        arr << list;
					        break;
					    }
					}
					arr.each { 
						def m = [:];
						m.putAll( tmp );
						m.deposittype = 'CHECK';
						m.checktype = k;
						m.amount = it.sum{ it.amount };
						m.totalcheck = m.amount;
						m.checks = it;
						depositSlipEm.create(m);
					}
				}
			}
			else {
				grps.each {k,v->
					if( !k ) throw new Exception("check type is required");
					def m = [:];
					m.putAll( tmp );
					m.deposittype = 'CHECK';
					m.checktype = k;
					m.amount = v.sum{it.amount};
					m.totalcheck = m.amount;
					m.checks = v;
					depositSlipEm.create(m);
				}
			}
		}
		depositVoucherEm.find( [objid: o.depositvoucherid] ).update( [ amountdeposited: '{amountdeposited+ :amt}'], [amt: o.amount ]  );
		return depositVoucherEm.find( [objid: o.depositvoucherid] ).select("amountdeposited").first();
	}

	@ProxyMethod
	public def getAvailableChecks( def o ) {
		return depositSlipEm.getAvailableChecks(o);
	}

	@ProxyMethod
	public def removeDepositSlip( def o ) {
		def r = depositSlipEm.find([objid: o.objid]).first();
		depositSlipEm.find([objid: o.objid]).delete();
		depositVoucherEm.find( [objid: r.depositvoucherid] ).update( [ amountdeposited: '{amountdeposited - :amt}'], [amt: r.amount ]  );
		return depositVoucherEm.find( [objid: r.depositvoucherid] ).select("amountdeposited").first();
	}

	@ProxyMethod
	public void approveDepositSlip( def o ) {
		throw new Exception("id is " + o.objid);
		 depositSlipEm.find([objid: o.objid]).update( [state: 'APPROVED' ] );
	}

	@ProxyMethod
	public void validateDepositSlip( def o ) {
		def m = [:];
		m.state = 'VALIDATED';
		m.validation = o.validation; 
		depositSlipEm.find([objid: o.objid]).update(m);
	}


}
