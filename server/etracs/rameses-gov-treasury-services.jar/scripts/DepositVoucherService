import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;

class DepositVoucherService  {

	@Env
	def env;

	@Service("DateService")
	def dateSvc;

	@DataContext("collectionvoucher")
	def cvEm;

	@DataContext("depositvoucher")
	def depositEm;

	@DataContext("paymentcheck")
	def paymentCheckEm;

	@ProxyMethod
	public def create( def o ) {
		if(!o.items)
			throw new Exception("Please select at least one item " + o.amount );
		/*
	    UPDATED TABLES :
	        depositvoucher, collection, deposit_fund, collection_fund, paymentcheck
		*/
		def m = [:];
		m.state = "OPEN"
		m.controlno = 'TMP-DEP-'+env.USERID;
		m.controldate = dateSvc.getBasicServerDate(); 
		m.amount = o.items.sum{ it.amount };
		m.createdby = [objid:env.USERID,  name:env.FULLNAME];
		m.dtcreated = dateSvc.getServerDate();	
		m = depositEm.create( m );

		cvEm.where( ''' objid IN (${ids}) ''' ).vars( "ids",  "'" + o.items*.objid.join("','") + "'" ).update( [depositvoucherid: m.objid ] );
		def z = [ depositvoucherid: m.objid ];
		depositEm.insertDepositFund( z );
		depositEm.updatePaymentCheckDepositId( z );
		depositEm.updatePaymentCheckDefaultFund( z );
		depositEm.updateFundCheckTotal( z );
		depositEm.cleanUpNullTotals( z );
		return m;
	}


	public void updatePaymentCheckFund( def o ) {
		if(!o.items) throw new Exception( "items is required");
		if(!o.fundid) throw new Exception( "fundid is required");
		if(!o.depositvoucherid) throw new Exception( "depositvoucherid is required");
		o.items.each {
			paymentCheckEm.find([ objid:it.objid ]).update( [fundid: o.fundid] );
		}
		def z = [ depositvoucherid: o.depositvoucherid ];
		depositEm.updateFundCheckTotal( z );
		depositEm.cleanUpNullTotals( z );
	}


}
