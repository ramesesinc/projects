import com.rameses.annotations.*; 

class LiquidationMgmtToolService {

	@ActiveDB('liquidation_mgmt_tool') 
	def em; 

	@Service('BankDepositMgmtToolService') 
	def depositSvc; 

	@ProxyMethod 
	public def removeRemittance( params ) { 
		if ( !params.remittanceid ) throw new Exception('remittanceid parameter is required') 

		def m = [ objid: params.remittanceid ]; 
		def lrem = em.findLiquidatedRemittance( m ); 
		if ( !lrem ) return [:];  

		em.removeLiquidatedRemittance( m );  
		return [ liquidations: [ lrem.liquidationid ]];  
	} 

	@ProxyMethod 
	public def removeRemittances( params ) { 
		if ( !params.remittances ) return; 

		def result = [:]; 
		def m = [:]; 
		m.remittanceids = "'"+ params.remittances.join("','") +"'";	
		
		def list = em.getLiquidatedRemittances( m ); 
		if ( list ) {  
			result.liquidations = list.collect{ it.liquidationid }.unique(); 
			m.liquidationids = "'"+ result.liquidations.join("','") +"'"; 
			def funds = em.getLiquidatedFunds( m ); 
			def resp = depositSvc.removeFunds([ funds: funds ]); 
			result.bankdeposits = resp?.bankdeposits;

			m.clear(); 
			list.each{ 
				m.objid = it.objid; 
				em.removeLiquidatedRemittance( m );  
			} 
		} 
		return result; 
	} 

	@ProxyMethod 
	public def rebuild( params ) { 
		if ( params.liquidationid ) {
			params.liquidations = [ params.liquidationid ]; 
		} 
		if ( !params.liquidations ) return; 	

		def F_STATE_NEW         = 'NEW';
		def F_STATE_UPDATED     = 'UPDATED';
		def F_STATE_FOR_REMOVAL = 'FOR_REMOVAL';

		def m = [:]; 
		params.liquidations.each{ a-> 
			m.liquidationid = a; 
			em.removeNonCashPayments( m ); 
			em.insertNonCashPayments( m ); 

			def newfunds = em.getRebuildFunds( m ); 
			def funds = em.getFunds( m ); 
			funds.each{ f-> 
				def xx = newfunds.find{ it.fund.objid==f.fund.objid } 
				if ( xx ) {
					f.fund = xx.fund; 
					f.amount = xx.amount; 
					f._status = F_STATE_UPDATED;
				} else { 
					f._status = F_STATE_FOR_REMOVAL; 
				} 
			}

			def f1 = funds?.first(); 
			newfunds.each{ f-> 
				def xx = funds.find{ it.fund.objid==f.fund.objid } 
				if ( xx ) return; 

				xx._status = F_STATE_NEW; 
				xx.objid = 'LIQFUND'+ new java.rmi.server.UID(); 
				if ( f1 ) xx.cashier = f1.cashier; 

				funds << xx; 
			} 

			funds.each{ f-> 
				if ( f._status == F_STATE_FOR_REMOVAL ) {
					em.removeFund( f ); 
				} else if ( f._status == F_STATE_UPDATED ) { 
					f.fundid = f.fund?.objid;
					f.fundtitle = f.fund?.title;
					em.updateFund( f ); 
				} else if ( f._status == F_STATE_NEW ) {
					f.fundid = f.fund?.objid;
					f.fundtitle = f.fund?.title;
					f.cashierid = f.cashier?.objid; 
					f.cashiername = f.cashier?.name; 
					em.insertFund( f ); 
				} 
			} 

			em.updateTotals( m ); 
		} 
	} 
}