import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;

class LiquidationService  {

	@Env
	def env;

	@Service("DateService")
	def dateSvc;

	@Service("CashBreakdownSummaryService")
	def cashBreakdownSvc;

	@Service("SequenceService")
	def seqSvc;

	@DataContext("liquidation")
	def liqEm;

	@DataContext("remittance")
	def remEm;

	@DataContext("liquidation_fund")
	def liqFundEm;

	@DataContext("remittance_fund")
	def remFundEm;

	@ProxyMethod
	public def create( def pp ) {
		def m = [:];
		m.controlno = 'TMP-LIQ-'+env.USERID;
		m.controldate = dateSvc.getBasicServerDate();
		m.dtposted = dateSvc.getServerDate();
		m.state = "OPEN";
		m.totalcash = 0;
		m.totalcheck=0;
		m.totalcr = 0;
		m.cashbreakdown = [];
		m.liquidatingofficer = [objid:env.USERID, name: env.FULLNAME, title: env.JOBTITLE ]; 
		m.amount = 0;
		m = liqEm.create( m );

		remEm.where("state='OPEN' AND liquidationid IS NULL").update( [liquidationid: m.objid ]);
		def z = [liquidationid: m.objid]
		liqEm.insertLiquidationFund( z );
		liqEm.updateRemittanceFundLiquidationId(z);
		liqEm.updateNoncashPaymentLiquidationId(z);

		//update cash breakdown totals in each liquidation fund
		def lfList = liqFundEm.find( z ).list();

		lfList.each {
			def subList = remFundEm.select("cashbreakdown").find([ liquidationfundid: it.objid ]).list()*.cashbreakdown;
			def bd = cashBreakdownSvc.summarize( subList );
			liqFundEm.find( [objid: it.objid] ).update( [cashbreakdown: bd ]);
		}

		//totals in liquidation
		def u = [cashbreakdown: [], totalcash:0, totalcheck:0, totalcr: 0, amount:0 ];
		def remList = remEm.find( z ).list().each {
			u.amount += it.amount;
			u.totalcash += it.totalcash;
			u.totalcheck += it.totalcheck;
			u.totalcr += it.totalcr;
			u.cashbreakdown << it.cashbreakdown;
		};
		u.cashbreakdown = cashBreakdownSvc.summarize( u.cashbreakdown );
		liqEm.find( [objid: m.objid ] ).update( u );

		return m;
	}

	

}
