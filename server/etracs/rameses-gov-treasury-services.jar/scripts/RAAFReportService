import com.rameses.annotations.*;
import com.rameses.common.*
import com.rameses.util.*

class RAAFReportService  
{ 
	@ActiveDB('raaf_report')
	def adb 
 
	@Service('DateService')
	def dtSvc

	@Service('ReportParameterService')
	def reportSvc

	@Env
	def env 

	@ProxyMethod
	public def getReportData( params ) {
		if ( !params.year ) throw new Exception('year parameter is required'); 
		if ( !params.month?.index ) throw new Exception('month parameter is required'); 

		def YMD = new java.text.SimpleDateFormat('yyyy-MM-dd'); 
		def startdate = YMD.parse( params.year +'-'+ params.month.index.toString().padLeft(2, '0') +'-01' );
		def enddate = DateUtil.add( startdate, '1M' ); 	
		def collectorid = (params.collector? params.collector.objid: env.USERID);
		def items = adb.getReportData([startdate: startdate, enddate: enddate, collectorid: collectorid]); 
		if ( !items ) throw new Exception('No record(s) found                  ');

		buildRAAF( items, false ); 

		def data = [:]
		data.items = items;
		data.info = [
			COLLECTORNAME	: params.collector ? params.collector.fullname : env.FULLNAME,
			COLLECTORTITLE  : params.collector ? params.collector.title : env.JOBTITLE,
			PERIOD			: 'FOR THE MONTH OF ' + params.month.caption + ', ' + params.year,
		]; 
		return data; 
	} 

	@ProxyMethod
	public def getRAAFByRemittance( params ) { 
		if ( !params.remittanceid ) throw new Exception('remittanceid parameter is required');
		if ( !params.formno ) params.formno = '%';

		def items = adb.getReportDataByRef([ refid: params.remittanceid, formno: params.formno ]);  
		buildRAAF( items, true ); 
		return items; 
	} 

	@ProxyMethod
	public def getRAAFByLiquidation( params ) { 
		if ( !params.liquidationid ) throw new Exception('liquidationid parameter is required');
		if ( !params.formno ) params.formno = '%';

		def items = adb.getReportDataByRef([ refid: params.liquidationid, formno: params.formno ]);  
		buildRAAF( items, true ); 
		return items; 
	} 	


	void buildRAAF( list, withrefid ) { 
		list.each {
			it.beginstartseries = (it.receivedstartseries>0? null: it.beginstartseries); 
			it.beginendseries = (it.receivedstartseries>0? null: it.beginendseries); 
			if ( it.issuedstartseries>0 ) {
				it.beginstartseries = (it.prevendingstartseries>0 ? it.prevendingstartseries : it.beginstartseries); 
				it.beginendseries = (it.prevendingendseries>0 ? it.prevendingendseries : it.beginendseries); 
			} 

			if ( it.receivedstartseries>0 && it.receivedendseries>0 ) { 
				it.qtyreceived = (it.receivedendseries-it.receivedstartseries)+1; 
			} 
			if ( it.beginstartseries>0 && it.beginendseries>0 ) { 
				it.qtybegin = (it.beginendseries-it.beginstartseries)+1; 
			} 
			if ( it.issuedstartseries>0 && it.issuedendseries>0 ) { 
				it.qtyissued = (it.issuedendseries-it.issuedstartseries)+1; 
			} 
			if ( it.endingstartseries>0 && it.endingendseries>0 ) {
				it.qtyending = (it.endingendseries-it.endingstartseries)+1; 
			}			

			if ( it.formtype=='cashticket' ) {
				def denomination = (it.denomination? it.denomination: 1) * 1.0;
				if ( it.qtyreceived>0 ) it.receivedamt = it.qtyreceived * denomination;  
				if ( it.qtybegin>0 ) it.beginamt = it.qtybegin * denomination;  
				if ( it.qtyissued>0 ) it.issuedamt = it.qtyissued * denomination;  
				if ( it.qtyending>0 ) it.endingamt = it.qtyending * denomination;  

				it.receivedstartseries = it.receivedendseries = null; 
				it.beginstartseries = it.beginendseries = null; 
				it.issuedstartseries = it.issuedendseries = null; 
				it.endingstartseries = it.endingendseries = null; 
				if ( it.stubno  ) it.afid = (''+ it.afid +'  #'+ it.stubno);
			} 

			it.receivedstartseries = (Integer) it.receivedstartseries;
			it.receivedendseries = (Integer) it.receivedendseries;
			it.beginstartseries = (Integer) it.beginstartseries;
			it.beginendseries = (Integer) it.beginendseries;
			it.issuedstartseries = (Integer) it.issuedstartseries;
			it.issuedendseries = (Integer) it.issuedendseries;
			it.endingstartseries = (Integer) it.endingstartseries;
			it.endingendseries = (Integer) it.endingendseries;
			it.qtyreceived = (Integer) it.qtyreceived;
			it.qtybegin = (Integer) it.qtybegin;
			it.qtyissued = (Integer) it.qtyissued;
			it.qtyending = (Integer) it.qtyending;
		}

		def list2 = list.findAll{( it.qtyissued > 0 )} 
		if ( list2 ) list.removeAll( list2 ); 

		def startindex = 0; 
		def forms = list.collect{[ formno: it.formno, formtype: it.formtype ]}.unique().sort{ it.formno }
		forms.findAll{( it.formtype=='serial' )}.each{ o-> 
			suppressSerialForms( list2, list, o.formno, startindex );  
			startindex += 1000; 
		} 
		forms.findAll{( it.formtype != 'serial' )}.each{ o-> 
			suppressNonSerialForms( list2, list, o.formno, startindex );  
			startindex += 1000; 
		} 
		list.clear(); 
		list.addAll( list2 ); 
		list2.clear(); 
	}

	private void suppressSerialForms( targetlist, sourcelist, afid, startindex ) { 
		def groupindex = startindex; 
		def nextstartseries = 0; 
		def list = []; 
		sourcelist.findAll{( !it.qtyissued && it.receivedstartseries && it.formno==afid )}.sort{ it.receivedstartseries }.each{ 
			if ( it.receivedstartseries != nextstartseries ) groupindex++; 
			
			it.groupindex = groupindex; 
			nextstartseries = it.receivedendseries+1; 
			list << it; 
		} 
		list.groupBy{ it.groupindex }.each{k,v-> 
			def o = v.first(); 
			o.receivedstartseries = v.min{ it.receivedstartseries }.receivedstartseries; 
			o.receivedendseries = v.max{ it.receivedendseries }.receivedendseries;
			o.endingstartseries = o.receivedstartseries;
			o.endingendseries = o.receivedendseries; 
			o.qtyreceived = v.sum{( it.qtyreceived? it.qtyreceived : 0.0 )} 
			o.qtyending = o.qtyreceived; 
			o.endstub = o.startstub + v.size()-1;
			targetlist << o; 
		} 
		list.clear();

		nextstartseries = 0; 
		sourcelist.findAll{( !it.qtyissued && it.beginstartseries && it.formno==afid )}.sort{ it.beginstartseries }.each{ 
			if ( it.beginstartseries != nextstartseries ) groupindex++; 
			
			it.groupindex = groupindex; 
			nextstartseries = it.beginendseries+1; 
			list << it; 
		} 		
		list.groupBy{ it.groupindex }.each{k,v-> 
			def o = v.first(); 
			o.beginstartseries = v.min{ it.beginstartseries }.beginstartseries; 
			o.beginendseries = v.max{ it.beginendseries }.beginendseries;
			o.endingstartseries = o.beginstartseries;
			o.endingendseries = o.beginendseries; 
			o.qtybegin = v.sum{( it.qtybegin? it.qtybegin : 0.0 )} 
			o.qtyending = o.qtybegin; 
			o.endstub = o.startstub + v.size()-1;
			targetlist << o; 
		} 
		list.clear();		
	}

	private void suppressNonSerialForms( targetlist, sourcelist, afid, startindex ) { 
		def list = sourcelist.findAll{( !it.qtyissued && it.qtyreceived && it.formno==afid )} 
		if ( list ) {
			def o = list.first(); 
			o.qtyreceived = list.sum{( it.qtyreceived? it.qtyreceived : 0.0 )}
			o.qtyending = o.qtyreceived; 
			o.receivedamt = o.qtyreceived * o.denomination; 
			o.endingamt = o.receivedamt; 
			targetlist << o; 
			list.clear(); 
		}
	} 
}
