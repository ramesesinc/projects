import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class RemittanceCaptureService  {

	@ActiveDB("remittance_capture")	
	def em

	@ActiveDB("remittance")
	def remittanceEm; 

	@ActiveDB("collector")
	def collector; 

	@ActiveDB('draft_remittance') 
	def draftRemittance;

	@Service("CashBookPostService")
	def cashBook;

	@Service("SequenceService")
	def seqSvc;

	@Service('DateService') 
	def dateSvc; 

	@Env 
	def env; 

	String schemaName = "remittance";
	String pagingKeys = "r.objid";

	def decimalFormatter = new java.text.DecimalFormat('0.00'); 

	@ProxyMethod
	public def getColumns( def p ) {
		return [
			[name:"txnno", caption:"Remittance No", width:120, resizable:false],
			[name:"dtposted", caption:"Remittance Date", width:120, resizable:false],
			[name:"collector.name", caption:"Collector"],
			[name:"totalcash", caption:"Total Cash", type:"decimal"],
			[name:"totalnoncash", caption:"Total Noncash", type:"decimal"],
			[name:"amount", caption:"Amount", type:"decimal"],
			[name:"liquidated", caption:"Liquidated", type:"checkbox", checkedValue:1, uncheckedValue:0],
		];	
	}

	def getList( o ) {
		o.txnno = (o.searchtext ? o.searchtext : '') +'%' 
		o._pagingKeys = "r.objid" 
		return em.getList( o) 
	}

	@ProxyMethod 
	public def getCapturedCollections( params ) { 
		return em.getCapturedCollections( params ).each{ it.selected=true }
	}

	@ProxyMethod 
	public def getUnremittedReceipts( params ) { 
		if ( !params.draftid ) throw new Exception('draftid parameter is required'); 

		return em.getUnremittedReceipts( params ); 
	} 

	@ProxyMethod 
	public def getUnremittedChecks( params ) { 
		if ( !params.draftid ) throw new Exception('draftid parameter is required'); 

		return em.getUnremittedChecks( params ); 
	} 

	@ProxyMethod 
	public def saveDraftRemittance( params ) { 
		params.collectorid = params.collector?.objid; 
		draftRemittance.removeItems([ collectorid: params.collectorid ]); 
		draftRemittance.removeHeader([ collectorid: params.collectorid ]); 

		params.dtfiled = dateSvc.getServerDate(); 
		params.objid = 'DRAFT'+ new UID(); 
		draftRemittance.create( params ); 

		def itemparams = [ 
			parentid       : params.objid, 
			collectorid    : params.collectorid, 
			remittancedate : params.remittancedate, 
			controlids     : params.items.collect{"'"+ it.controlid +"'"}.join(',') 
		]; 
		draftRemittance.insertItems( itemparams ); 
		return params;  
	} 

	@ProxyMethod 
	public def post( o ) { 
		o.collectorid = o.collector?.objid;
		def suminfo = em.findUnremittedSummary([ draftid: o.draftid ]); 
		if ( !suminfo ) throw new Exception('Unable to find the unremitted summary info. Please reload your screen'); 

		def checklist = [ 
			suminfo.remittancedate.toString(), 
			suminfo.collector?.objid, 
			decimalFormatter.format( suminfo.totalcash ), 
			decimalFormatter.format( suminfo.totalnoncash )   
		]; 
		def targetchecksum = com.rameses.util.Encoder.MD5.encode(checklist.join(',')); 

		checklist = [ 
			o.remittancedate, 
			o.collector?.objid, 
			decimalFormatter.format( o.totalcash ),  
			decimalFormatter.format( o.totalnoncash )   
		]; 
		def sourcechecksum = com.rameses.util.Encoder.MD5.encode(checklist.join(',')); 

		if ( sourcechecksum != targetchecksum ) 
			throw new Exception('Data checksum does not matched. Please reload your screen');  

		def txncode = "REM";	
		if ( env.TXNCODE ) txncode = env.TXNCODE; 	
		o.txnno = txncode + seqSvc.getNextFormattedSeries( txncode ); 
		remittanceEm.create( o ); 

		//insert the cash receipts
		def mparams = [ draftid: o.draftid, remittanceid: o.objid ]; 
		em.collectReceipts( mparams );
		em.collectChecks( mparams );
		
		//update cashbook to add new entry
		def flist = em.getUnremittedFundTotals( mparams );
		flist.each {
			def detail = [:];
			detail.fundid = it.fund.objid;
			detail.subacctid = o.collector.objid; 
			detail.type = 'COLLECTOR'
			detail.refid = o.objid;
			detail.refno = o.txnno;
			detail.refdate = o.dtposted;
			detail.reftype = "remittance";
			detail.amount = it.amount;
			detail.particulars = "REMITTANCE";
			cashBook.postCR( detail );

			def n = [:]
			n.objid = "REMFUND"+new UID();
			n.remittanceid = o.objid;
			n.fund = it.fund;
			n.amount = it.amount;
			remittanceEm.create( n, "remittance_fund" );
		} 
		return o; 
	}

	@ProxyMethod 
	public def getCollectors( ){
		return em.getCollectors();
	}

}
