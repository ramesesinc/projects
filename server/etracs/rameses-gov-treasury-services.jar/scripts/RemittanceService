import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;

class RemittanceService  {


	@Env
	def env;

	@Service("DateService")
	def dateSvc;

	@Service("CashBreakdownSummaryService")
	def cashBreakdownSvc;

	@Service("SequenceService")
	def seqSvc;

	@DataContext("cashreceipt")
	def cashReceiptEm;

	@DataContext("remittance")
	def remEm;

	@DataContext("remittance_fund")
	def rfEm;

	@DataContext("cashreceiptpayment_noncash")
	def ncEm;

	@Service('ControlService') 
	def controlSvc;

	@Service("Var")
	def var;

	@ProxyMethod
	public def create( def pp ) {
		def o = pp.items;

		def buff = new StringBuilder();
		o.findAll{ it.formtype == "serial" && ( it.qty != (it.toseries - it.fromseries + 1 ))  }.each {
			buff.append( it.formno + " " + it.stubno + " " + it.fromseries + " " + it.toseries );
		}
		def str = buff.toString();
		if(str ) throw new Exception("Mismatch qty with series. Please check the ff: \n" + str );

		def m = [:];
		m.controlno = 'TMP-REM-'+env.USERID;
		m.controldate = dateSvc.getBasicServerDate();
		m.dtposted = dateSvc.getServerDate();
		m.state = "DRAFT";
		m.totalcash = 0;
		m.totalcheck=0;
		m.totalcr = 0;
		m.cashbreakdown = [];
		m.collector = [objid:env.USERID, name: env.FULLNAME, title: env.JOBTITLE ]; 
		m.amount = 0;
		m = remEm.create( m );

		def scond = "collector.objid = :userid AND series BETWEEN :fromseries AND :toseries";
		o.each {
			//update also remittance_fund
			def p = [userid: env.USERID, fromseries: it.fromseries, toseries: it.toseries ];
			cashReceiptEm.find( [controlid: it.afcontrolid ] ).where(scond, p).update( [remittanceid: m.objid] );
		}

		def z = [remittanceid: m.objid]
		remEm.insertRemittanceFund( z );

		def clist = rfEm.find( z ).list();
		clist.each {
			def ppp = [remittanceid: it.remittanceid , fundid: it.fund.objid ];

			def u = [:];
			u.amount = it.amount;
			u.totalcheck = ncEm.select( "amount:{SUM(amount)}").where("receipt.remittanceid=:remittanceid AND fund.objid =:fundid AND reftype = 'CHECK' ", ppp ).val();
			if(!u.totalcheck) u.totalcheck = 0;

			u.totalcr = ncEm.select( "amount:{SUM(amount)}").where("receipt.remittanceid=:remittanceid AND fund.objid =:fundid AND NOT(reftype = 'CHECK') ", ppp ).val();
			if(!u.totalcr ) u.totalcr = 0;

			rfEm.find( [objid: it.objid ] ).update( u );
		}

		def t = rfEm.find( z ).select( "totalcash:{SUM(totalcash)},totalcheck:{SUM(totalcheck)},totalcr:{SUM(totalcr)},amount:{SUM(amount)}" ).first();
		remEm.find( [objid: m.objid]).update(t);
		//update total check and total 
		return m;
	}

	@ProxyMethod
	public void updateCash( def m ) {
		if(!m.objid) throw new Exception("objid is required");
		if(!m.cashbreakdown) throw new Exception("breakdown is required");
		if(!m.remittanceid ) throw new Exception("remittanceid is required");
		if(!m.totalcash ) throw new Exception("totalcash is required");

		def bd = m.cashbreakdown.findAll{ it.qty > 0 };
		rfEm.find( [objid: m.objid] ).update( [cashbreakdown: bd, totalcash: m.totalcash ] );

		def list = rfEm.select("cashbreakdown").find( [remittanceid: m.remittanceid ] ).list()*.cashbreakdown;
		bd = cashBreakdownSvc.summarize( list );

		remEm.find( [objid: m.remittanceid ] ).update( [cashbreakdown: bd, totalcash: m.totalcash ] );
	}	

	@ProxyMethod
	public def submitForLiquidation( def o ) {
		//check total breakdown before submitting
		def z = rfEm.select("objid").find( [remittanceid: o.objid ] ).where(" (amount - (totalcash+totalcheck+totalcr)) > 0 ").first();
		if( z ) 
			throw new Exception("Please ensure that all balances must be equal to 0. Please check there may be items that do not have a cash breakdown");

		def m = [:];	
		m.dtposted = dateSvc.getServerDate(); 
		if ( o.controlno.toString().toUpperCase().startsWith("REM")) {
			// do nothing, we will use the same transaction number 
		} else {
			def txncode = [ "REM", env.TXNCODE, env.ORGTXNCODE ].findAll{( it )}.join("-");
			m.controlno = controlSvc.formatTxnno([ txncode: txncode, txndate: m.dtposted, format: var.remittance_format, sequenceid_format: var.remittance_sequenceid_format ]); 
		}

		if ( o.collector?.signature ) m.collector = [signature: o.collector.signature]; 
		m.state = 'OPEN';
		remEm.find( [objid: o.objid ] ).update( m );

		o.state = 'OPEN';

		return o;
	}

	@ProxyMethod
	public void acceptForLiquidation( def o ) {
		remEm.find( [objid: o.objid ] ).update( [ state: 'POSTED' ] );
	}

	@ProxyMethod 
	public def getReportData( params ) { 
		return params; 
	} 
}
