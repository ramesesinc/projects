import com.rameses.annotations.*;
import com.rameses.common.*
import com.rameses.services.extended.*
import com.rameses.util.*


class TCReportService  
{ 
	@ActiveDB('tcreport')
	def adb 

	@Env
	def env 
 
	@Service('DateService')
	def dtSvc

	@Service('ReportParameterService')
	def reportSvc


	@ProxyMethod 
	public def getCollectionByFund( params ) {
		if(params.day){
			def dt = params.year + '-' + params.month.index +  '-' + params.day.toString().padLeft(2, '0')

			params.fromdate =  dt + ' 00:00:00'
			params.todate =  dt + " 23:59:59"
		} else {
			params.fromdate = params.year + '-' + params.month.index + '-01 00:00:00'
			params.todate = dtSvc.format( 'yyyy-MM-dd', dtSvc.getMonthEndDate( dtSvc.parse('yyyy-MM-dd', params.fromdate) ) ) + " 23:59:59"
		}

		params.filter = ''
		if( params.fund ) {
			params.fundid = params.fund.objid
			params.filter += ' and ri.fund_objid = $P{fundid}  ' 

		}
		
		def data = [:]

		data.info = [
			PREPAREDBY 		: env.FULLNAME,
			PREPAREDBYTITLE : env.JOBTITLE, 
			PERIOD			: params.day ?  "FOR THE DAY OF " + params.month.caption + ' ' + params.day +  ', ' + params.year  : 'FOR THE MONTH OF ' + params.month.caption + ', ' + params.year,
		]
		
		data.items = adb.getCollectionByFund(params)

		if(! data.items) throw new Exception("No record(s) found.     ")
		return data;
	}	


	@ProxyMethod 
	public def getAbstractOfCollection( params ) {
		if(params.day){
			def dt = params.year + '-' + params.month.index +  '-' + params.day.toString().padLeft(2, '0')

			params.fromdate =  dt + ' 00:00:00'
			params.todate =  dt + " 23:59:59"
		} else {
			params.fromdate = params.year + '-' + params.month.index + '-01 00:00:00'
			params.todate = dtSvc.format( 'yyyy-MM-dd', dtSvc.getMonthEndDate( dtSvc.parse('yyyy-MM-dd', params.fromdate) ) ) + " 23:59:59"
		}


		params.filter = ''
		if( params.fund ) {
			params.fundid = params.fund.objid
			params.filter += ' and ri.fund_objid = $P{fundid}  ' 

		}

		if(params.collector) {
			params.collectorid = params.collector.objid 
			params.filter += ' and cr.collector_objid = $P{collectorid} '

		}
		def data = [:]

		data.info = [
			PREPAREDBY 		: env.FULLNAME,
			PREPAREDBYTITLE : env.JOBTITLE, 
			PERIOD			: params.day ?  "FOR THE DAY OF " + params.month.caption + ' ' + params.day +  ', ' + params.year  : 'FOR THE MONTH OF ' + params.month.caption + ', ' + params.year,
			TITLE 			: "Abstract of Collection Report ",
			COLLECTORNAME	: params.collector ? params.collector.fullname : 'ALL'
		]
		
		data.items = adb.getAbstractOfCollection(params) 

		if(! data.items) throw new Exception("No record(s) found.     ")
		return data;
	}	



	@ProxyMethod
	public def getFunds( ) {
		return adb.getFunds()
	}

	@ProxyMethod
	public def getSubFunds( objid ) {
		return adb.getSubFunds([objid: objid])
	}

	@ProxyMethod
	public List getNumDays( year, month ) {
		if ( !month && month < 0 ) return []
		
		Calendar cal = Calendar.getInstance()
        cal.set( year, month, 1)
        int maxday = cal.getActualMaximum(cal.DAY_OF_MONTH)
		def numdays = []
		1.upto( maxday ) { numdays.add( it ) }
		return numdays 
	}

	
}
