import com.rameses.annotations.*;

class AFControlListInterceptor {

	/*****************************************************************************************
	//collector
	*****************************************************************************************/
	@After(pattern="QueryService.getNodeList", eval="#{ args[0]._schemaname == 'af_control' }")
	public void getNodes( evt ) { 
		def x = evt.args[0];
		def result = evt.result;
		if( x._tag == "AFO" ) {
			result << [  title: 'Draft', state:'DRAFT' ];
			result << [  title: 'Open', state:'OPEN' ];
			result << [  title: 'Issued', state:'ISSUED' ];
			result << [  title: 'Sold', state:'SOLD' ];
			result << [  title: 'Consumed', state:'CLOSED' ];
			result << [  title: 'Cancelled', state:'CANCELLED' ];
		} 
		else if( x._tag == 'COLLECTION' ) {
			result << [  title: 'Open', state:'ACTIVE' ];
			result << [  title: 'Consumed', state:'CONSUMED' ];
			result << [  title: 'Cancelled', state:'CANCELLED' ];
		}
	}

	@Before(pattern="QueryService.getList", eval="#{ args[0]._schemaname == 'af_control' }")
	public void loadList(def evt) {
		def o = evt.args[0];

		if( !o.node?.state ) return;

		//o.debug = true;
		def str = "";
		def m = [:]; 

		if( o.node.state == 'DRAFT' ) {
			str = " state = 'DRAFT' ";		
		}
		else if( o.node.state == 'OPEN' ) {
			str = " state = 'OPEN' ";
		}
		else if( o.node.state == 'ISSUED' ) {
			str = " state = 'ISSUED' ";
		}
		else if( o.node.state == 'SOLD' ) {
			str = " state = 'SOLD' ";
		}
		else if( o.node.state == 'ACTIVE' ) {
			str = " state='ISSUED' AND currentseries < endseries ";
		}
		else if( o.node.state == 'CONSUMED' ) {
			str = " currentseries >= endseries ";
		}
		else if( o.node.state == 'CLOSED' ) {
			str = " state = 'CLOSED' ";
		}
		else  {
			str = " state = 'CANCELLED' ";
		};

		if( o.where ) {
			o.where[0] = str + " AND " + o.where[0];	
			o.where[1].putAll( m );
		}
		else {
			o.where = [str, m];
		} 
	}	


}
