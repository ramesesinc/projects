import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class AFIRInterceptor { 
	
	@Service("SequenceService") 
	def seqSvc;

	@Service("DateService") 
	def dateSvc;

	@DataContext("af_control")
	def afcontrol;

	@DataContext("af_control_detail")
	def afcd;

	@DataContext("afrequest")
	def afReq;

	@DataContext("afiritem")
	def afirItem;

	@Env
	def env;

	@Before(pattern="PersistenceService.create", eval="#{ args[0]._schemaname == 'afir' }")
	public void beforeCreate( evt ) { 
		def o = evt.args[0];
		o.user = [objid:env.USERID, name:env.FULLNAME, title:env.JOBTITLE];
		o.org = [objid:env.ORGID, name:env.ORGNAME];
		o.controlno = "IRAF" + seqSvc.getNextFormattedSeries("IRAF");
		o.dtfiled = dateSvc.serverDate;
		o.state = "DRAFT";
		o.txndate = dateSvc.serverDate;

		if( o.request ) {
			afReq.find( [objid: o.request.objid ]).update( [state:'CLOSED']);
		}
		o.items?.each {
			it.qtyserved = 0;
		}
	}	

	@After(pattern="PersistenceService.create", eval="#{ args[0]._schemaname == 'afir' && args[0].txntype == 'ISSUE' }")
	public void afterCreateIssue( evt ) { 
		def o = evt.result;
	}	

	@After(pattern="PersistenceService.read", eval="#{ args[0]._schemaname == 'afir' }")
	public void afterOpen( evt ) { 
		def result = evt.result;

		def scols1 = "parent.batchno,parent.afid,parent.unit,parent.prefix,parent.suffix"
		def scols2 = ",startseries:{MIN(parent.startseries)},endseries:{MAX(parent.endseries)},startstub:{MIN(parent.stubno)},endstub:{MAX(parent.stubno)}"; 
		def list = afcd.find( [refid: result.objid ] ).select( scols1 + scols2 ).groupBy( scols1 ).list().collect{
			[ 
				batchno: it.parent.batchno, 
				afid: it.parent.afid, 
				unit: it.parent.unit, 
				prefix: it.parent.prefix,
				suffix: it.suffix,
				startseries: it.startseries, 
				endseries: it.endseries, 
				startstub:it.startstub, 
				endstub:it.endstub  
			]
		};
		result.items.each { r->
			r.items = list.findAll{ ac-> ac.afid == r.item.objid && ac.unit == r.unit };
			r.remarks = r.items.collect{ i-> i.startseries + "-" + i.endseries +";" }.join(","); 
		}

		/*
		def scols = "receiptid,batchno,afid,startseries:{MIN(startseries)},endseries:{MAX(endseries)},startstub:{MIN(stubno)},endstub:{MAX(stubno)}"; 
		def list = afcontrol.find([ receiptid: result.objid ] ).select( scols ).groupBy("receiptid,batchno,afid").list(); 
		result.items.each { r->
			r.items = list.findAll{ ac-> ac.afid == r.item.objid };
			r.remarks = r.items.collect{ i-> i.startseries + "-" + i.endseries +";" }.join(","); 
		}
		*/
	}


	@After(pattern="QueryService.getNodeList", eval="#{ args[0]._schemaname == 'afir' }")
	public void getNodes( evt ) { 
		def x = evt.args[0];
		def result = evt.result; 
		result << [ id:'open', title: 'Draft', state:'DRAFT' ];
		result << [ id:'closed', title: 'Posted', state:'POSTED' ];
	}

	@Before(pattern="QueryService.getList", eval="#{ args[0]._schemaname == 'afir' }")
	public void loadList(def evt) {
		def o = evt.args[0];
		//o.debug = true;
		if( !o.node?.id ) return;
		def str = " state = :state ";
		def m = [ state: o.node.state ]; 

		if( o.where ) {
			o.where[0] = str + " AND " + o.where[0];	
			o.where[1].putAll( m );
		}
		else {
			o.where = [str, m];
		} 
	}	


}