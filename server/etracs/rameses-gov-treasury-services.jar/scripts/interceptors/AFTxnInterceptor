import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class AFTxnInterceptor { 
	
	@Service("SequenceService") 
	def seqSvc;

	@Service("DateService") 
	def dateSvc;

	@Service("PersistenceService") 
	def persistSvc;

	@DataContext("af_control")
	def afcontrol;

	@DataContext("af_control_detail")
	def afcd;

	@DataContext("afrequest")
	def afReq;

	@DataContext("aftxnitem")
	def aftxnItem;

	@Env
	def env;

	@Before(pattern="PersistenceService.create", eval="#{ args[0]._schemaname == 'aftxn' }")
	public void beforeCreate( evt ) { 
		def o = evt.args[0];
		o.txndate = dateSvc.getServerDate(); 
		o.controlno = "IRAF" + seqSvc.getNextFormattedSeries("IRAF");
		o.org = [objid:env.ORGID, name: env.ORGNAME];
		o.user = [objid: env.USERID, name: env.FULLNAME, title: env.JOBTITLE];
		o.state = "DRAFT";

		if ( !o.dtfiled ) o.dtfiled = o.txndate; 

		if ( o.request ) {
			afReq.find( [objid: o.request.objid ]).update( [state:'CLOSED']);
		}

		o.items?.each {
			it.qtyserved = 0;
		}
	} 

	@After(pattern="PersistenceService.read", eval="#{ args[0]._schemaname == 'aftxn' }")
	public void afterOpen( evt ) { 
		def result = evt.result;
		def scols1 = "parent.batchno,parent.prefix,parent.suffix"
		def scols2 = ",startseries:{MIN(parent.startseries)},endseries:{MAX(parent.endseries)},startstub:{MIN(parent.stubno)},endstub:{MAX(parent.stubno)}"; 
		result.items.each { r->
			r.items = afcd.find([ aftxnitemid: r.objid ]).select( scols1 + scols2 ).groupBy( scols1 ).list().collect{[ 
				batchno: it.parent.batchno, 
				prefix: it.parent.prefix,
				suffix: it.parent.suffix,
				startseries: it.startseries, 
				endseries: it.endseries, 
				startstub:it.startstub, 
				endstub:it.endstub  
			]} 

			r.remarks = r.items.collect{ i-> i.startseries + "-" + i.endseries +";" }.join(","); 
		} 
	} 

	@Before(pattern="PersistenceService.removeEntity", eval="#{ args[0]._schemaname == 'aftxn' }")
	public void beforeRemoveEntity( evt ) { 
		def param = evt.args[0]; 
		if ( !param?.objid ) return; 

		def m = [_schemaname: 'af_control_detail'];
		afcd.find([ aftxnid: param.objid ]).select('objid').list().each{
			m.putAll( it ); 
			persistSvc.removeEntity( m ); 
		} 
	} 
}