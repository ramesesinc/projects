import com.rameses.annotations.*;

class CashReceiptListInterceptor {

	@Env 
	def env;

	@After(pattern="QueryService.getNodeList", eval="#{ args[0]._schemaname == 'cashreceipt' }")
	public void getNodes( evt ) { 
		def x = evt.args[0];
		def result = evt.result; 
		if ( x._tag == 'collector' ) {
			result << [ id:'unremitted', title: 'Unremitted'];	
			result << [ id:'delegated', title: 'Delegated'];
			result << [ id:'remitted', title: 'Remitted'];	
		} else if ( x._tag == 'subcollector' ) {
			result << [ id:'unremitted', title: 'Unremitted'];	
			result << [ id:'remitted', title: 'Remitted']; 
		} else {
			result << [ id:'unremitted', title: 'Unremitted'];	
			result << [ id:'remitted', title: 'Remitted'];	
		}
	}

	@Before(pattern="QueryService.getList", eval="#{ args[0]._schemaname == 'cashreceipt' }")
	public void loadList(def evt) {
		def o = evt.args[0];

		if( !o.node?.id ) return;

		def str = [];
		def m = [:];

		if ( o._tag == 'collector' ) {
			str << " collector.objid = :userid ";
			if ( o.node.id == 'unremitted' ) { 
				str << " remittanceid is null ";
				str << " (subcollector.objid is null  or (subcollector.objid is not null and subcollector.remittanceid is not null)) " 
			} else if ( o.node.id == 'delegated' ) { 
				str << " remittanceid is null and subcollector.objid is not null and subcollector.remittanceid is null "; 
			} else { 
				str << " remittanceid is not null "; 
			}

			m.userid = env.USERID;

		} else if ( o._tag == 'subcollector' ) {
			str << " subcollector.objid = :userid ";
			str << " subcollector.remittanceid is " + (o.node.id == 'unremitted' ? 'null' : 'not null');
			m.userid = env.USERID;

		} else if ( o.node.id == 'unremitted' ) {
			str << " remittanceid IS NULL ";

		} else if( o.node.id == 'remitted' ){
			str << " remittanceid IS NOT NULL ";
		}

		if( o.where ) {
			o.where[0] = str.join(' AND ') + " AND " + o.where[0];	
			o.where[1].putAll( m );
		}
		else {
			o.where = [str.join(' AND '), m];
		}
	}	

}
