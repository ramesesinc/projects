import com.rameses.annotations.*;

class CollectionVoucherInterceptor {

	@Service("NumberService")
	def numSvc;

	
	@After(pattern="QueryService.getNodeList", eval="#{ args[0]._schemaname == 'collectionvoucher' }")
	public void getNodes( evt ) { 
		def x = evt.args[0];
		def result = evt.result;
		result << [  title: 'Open', state:'OPEN' ];
		result << [  title: 'Posted', state:'POSTED', deposited: false ];
		result << [  title: 'Sent for Deposit', state:'POSTED', deposited:true ];
	}

	@Before(pattern="QueryService.getList", eval="#{ args[0]._schemaname == 'collectionvoucher' }")
	public void loadList(def evt) {
		def o = evt.args[0];

		if( !o.node?.state ) return;
		//o.debug = true;
		def str = "state = :state";
		def m = [state: o.node.state ]; 

		if(o.node.deposited!=null) {
			if(o.node.deposited==false) {
				str += " AND depositvoucherid IS NULL ";
			}
			else {
				str += " AND NOT(depositvoucherid IS NULL) ";
			}
		}

		if( o.where ) {
			o.where[0] = str + " AND " + o.where[0];	
			o.where[1].putAll( m );
		}
		else {
			o.where = [str, m];
		} 
	}	

	@After(pattern="PersistenceService.read", eval="#{ args[0]._schemaname == 'collectionvoucher' }" )
	public void afterRead(def evt) {
		def p = evt.result;
		/*
		if( p.amount < 1 ) { 
			def amount = Long.parseLong( p.amount.toString().split("\\.")[1] )
			p.amountinwords = numSvc.doubleToWords( amount ).toUpperCase() + " CENTAVOS";
		} else {
			p.amountinwords = numSvc.doubleToWords( p.amount ).toUpperCase() + " PESOS ONLY";
		}
		*/
	}
}
