import com.rameses.annotations.*;

class RemittanceDefaultInterceptor {

	@DataContext("remittance")
	def rem_db;

	@DataContext("remittance_fund")
	def remf_db;

	@DataContext("remittance_noncashpayment")
	def remnc_db;

	@DataContext("remittance_af")
	def remaf_db;

	@DataContext("cashreceipt")
	def cashreceipt_db;

	@DataContext("cashreceiptpayment_noncash")
	def cashreceipt_noncash_db;

	@Before( pattern="PersistenceService.removeEntity", eval="#{args[0]._schemaname == 'remittance'}"  )
	public void beforeDelete( evt ) {
		def params = evt.args[0]; 
		def m = [ objid: params.objid ];
		def o = rem_db.find( m ).select('objid,state').first();
		if ( !o ) return; 

		// 
		// initiate update on state field to forcely locked the record 
		// 
		def state = o.state.toString().toUpperCase(); 
		def xstate = 'X' + state; 
		rem_db.find( m ).update([ state: xstate ]); 

		if ( !state.matches('DRAFT|OPEN')) {
			throw new Exception('This transaction is no longer in DRAFT mode'); 
		} 

		//
		// restore the original state of the record 
		// 
		rem_db.find( m ).update([ state: state ]); 

		//
		// deletion process starts here...
		// 
		m = [ remittanceid: o.objid ];
		cashreceipt_db.find( m ).update([ remittanceid: '{NULL}' ]);

		remf_db.find( m ).list().each{
			cashreceipt_noncash_db.find([ remittancefundid: it.objid ]).update([ remittancefundid: '{NULL}' ]); 
		}
		
		remf_db.find( m ).delete(); 
		remaf_db.find( m ).delete(); 
		remnc_db.find( m ).delete(); 
	} 
}