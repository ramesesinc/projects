import com.rameses.annotations.*;
import com.rameses.common.*
import com.rameses.util.*;

class RemittanceInterceptor {
	
	@Service("AFInventoryService")
	def afSerialSvc;

	@ActiveDB("af_inventory")
	def afinventory_db;

	@ActiveDB("remittance")
	def remittance_db;

	@ActiveDB("remittance_af")
	def remittanceAf;

	@ActiveDB('af_inventory_tool') 
	def afi_tool; 

	@DataContext("af_inventory")
	def afi_db;

	@DataContext("af_inventory_detail")
	def afd_db;

	@Service('AFService')
	def afsvc 

	@Service('DateService') 
	def dateSvc; 

	@After(pattern="RemittanceService.post")
	public void postAFControl( evt ) { 
		def o = evt.result; 
		o.items.each { 
			def m = [ controlid: it.controlid ]; 
			m.formtype = it.formtype; 
			m.txntype = "REMITTANCE"; 
			m.remarks = "REMITTANCE"; 
			m.reftype = "remittance"; 
			m.refdate = o.dtposted; 
			m.refid = o.objid; 
			m.refno = o.txnno; 
			m.afid = it.formno; 

			if ( it.formtype == 'serial' ) { 
				m.cancelSeriesList = it.cancelSeriesList; 
				m.startseries = it.startseries; 
				m.endseries = it.endseries; 
				m.currentseries = it.endseries+1; 
				m.endstub = m.startstub = 0; 
				m.cqty = it.cqty; 
				m.qty= it.qty; 

			} else { 
				def lastitem = afi_tool.findLastDetailByControl([ controlid: it.controlid ]); 

				m.cqty = 0; 
				m.qty = it.qty; 
				m.startseries = lastitem.endingstartseries; 
				m.currentseries = m.startseries + m.qty; 
				m.endseries = m.currentseries - 1;
				m.startstub = m.endstub = 0; 
			}

			afSerialSvc.postIssue( m );
		}


		//update the remittanceid for all 
		//for each controlid, find maximum ending balance and credit it as begin	
		//group each af by control then insert max ending start and beginning

		remittanceAf.updateRemittanceAF( [collectorid:o.collector.objid, remittanceid: o.objid] );
		def list = remittanceAf.getRemittanceForBalanceForward([remittanceid: o.objid]);
		list.each { 
			def m = [:];
			m.startseries = it.startseries;
			m.endseries = it.endseries;
			m.txntype = "FORWARD";
			m.remarks = "FORWARD BALANCE FROM REMITTANCE";
			m.qty= (it.endseries - it.startseries) + 1;
			m.endstub = 0; 
			m.controlid = it.controlid;
			m.refid = o.objid;
			m.reftype = "remittance";	
			m.refno = o.txnno;
			m.refdate = o.dtposted;
			m.afid = it.formno;
			afSerialSvc.postBegin(m);
		}
	}
	
	@After( pattern="RemittanceService.revert" )
	public void afterRevert( evt ) {
		def params = evt.args[0]; 
		def rundate = dateSvc.getServerDate(); 

		def refs = afi_tool.getDetailsByRef([ refid: params.objid ]);
		afi_tool.removeDetailsByRef([ refid: params.objid ]); 

		refs.groupBy{ it.controlid }.each{ k,v-> 
			def m = [ controlid: k ]; 
			def lastitem = afi_tool.findLastDetailByControl( m ); 
			if ( !lastitem || lastitem.qtyending <= 0 ) return; 

			def currentlineno = lastitem.lineno; 
			def startseries = lastitem.endingstartseries;
			def endseries = lastitem.endingendseries;
			def qty = lastitem.qtyending;

			afi_db.find([ objid: k ]).update([ currentseries: startseries, currentlineno: currentlineno+1 ]);  

			def d = [ controlid: k ];
			d.lineno = currentlineno + 1; 
			d.refdate = d.txndate = rundate; 
			d.refid = d.refno = d.reftype = d.txntype = 'FORWARD'; 
			d.remarks = 'FORWARDED DUE TO REVERT REMITTANCE';
			d.beginstartseries = d.endingstartseries = startseries; 
			d.beginendseries = d.endingendseries = endseries; 
			d.qtyreceived = d.qtyissued = d.qtycancelled = 0; 
			d.qtybegin = d.qtyending = qty; 
			d.objid = 'AFD' + new java.rmi.server.UID(); 
			afd_db.create( d );  

			afi_tool.syncInventory( m ); 
			afi_tool.syncInventoryBalance( m ); 
		} 
	} 
} 