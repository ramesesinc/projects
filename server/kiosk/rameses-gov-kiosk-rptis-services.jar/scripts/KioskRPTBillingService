import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;


class KioskRPTBilllingService
{
    @Service('DateService')
    def dtSvc 

	@Service('RPTBillingService')
    def billSvc

    @Service('RPTUtil')
    def util

    @Service('QueryService')
    def query 

    @Service('PaymentOrderService')
    def pmoSvc 

    @Service('CacheService')
    def cacheSvc 

    def BARCODE_KEY = '56001';


    @ProxyMethod
    public def generateBill(params){
        params.ledger = validateLedger(params)
        def bill = initBill(params)
        def billing = buildBilling(bill)

        def pmoinfo = [:]
        pmoinfo.billid = bill.billid
        pmoinfo.barcode = bill.barcode
        pmoinfo.taxpayer = billing.taxpayer
        pmoinfo.billamount = billing.billamount
        pmoinfo.validuntil = billing.validuntil
        cacheSvc.put([key:pmoinfo.billid, value:pmoinfo])
        return billing 
    }


    @ProxyMethod
    public def postPaymentOrder( def o ) {
        if(! o.billid) throw new Exception('Bill ID is required.')
        def pmoinfo = cacheSvc.get([key:o.billid])
        def pmo = [:]
        pmo.txntype = 'rptcol'
        pmo.payer = pmoinfo.taxpayer
        pmo.paidby = pmoinfo.taxpayer?.name 
        pmo.paidbyaddress = pmoinfo.taxpayer?.address 
        pmo.amount = pmoinfo.billamount 
        pmo.refid = pmoinfo.billid 
        pmo.refno = pmoinfo.barcode 
        pmo.expirydate = pmoinfo.validuntil
        pmo.info = [:]
        pmo = pmoSvc.create(pmo)
        pmo.expirydate = dtSvc.format('yyyy-MM-dd', pmo.expirydate)
        cacheSvc.put([key:pmo.txnid, value:pmo])
        return pmo.txnid 
    }


    def initBill(params){
        def ledger = params.ledger 
        def bill = billSvc.initBill(ledger.objid)

        if (params.billtoyear != null) {
            params.billtoyear = util.toInteger(params.billtoyear)
            params.billtoqtr = util.toInteger(params.billtoqtr)

            if (params.billtoyear < ledger.lastyearpaid)
                throw new Exception('Bill to year must be greater than or equal to ' + ledger.lastyearpaid + '.')

            if (params.billtoyear == ledger.lastyearpaid){
                if (params.billtoqtr < ledger.lastqtrpaid)
                    throw new Exception('Bill to quarter must be greater than or equal to ' + (ledger.lastqtrpaid + 1) + '.')
            }

            bill.billtoyear =params.billtoyear  
            bill.billtoqtr =params.billtoqtr  
        }

        bill = billSvc.generateBillByLedgerId3(bill)
        bill.rptledger.remove('faases')
        bill.remove('taxes')
        return bill 
    }

    @ProxyMethod
    public def buildBilling(bill){
        def billing = [:]
        billing.dtposted = bill.dtposted 
        billing.billid = bill.billid 
        billing.barcode = bill.barcode 
        billing.rptledgerid = bill.rptledgerid 
        billing.billtoyear = bill.billtoyear 
        billing.billtoqtr = bill.billtoqtr 
        billing.taxpayer = bill.taxpayer
        billing.validuntil = dtSvc.format('yyyy-MM-dd', bill.validuntil)
        billing.tdno = bill.rptledger.tdno
        billing.barangay = bill.rptledger.barangay
        billing.fullpin = bill.rptledger.fullpin
        billing.cadastrallotno = bill.rptledger.cadastrallotno
        billing.rputype = bill.rptledger.rputype
        billing.classcode = bill.rptledger.classcode
        billing.lastyearpaid = bill.rptledger.lastyearpaid
        billing.lastqtrpaid = bill.rptledger.lastqtrpaid

        billing.basic = bill.items.basic.sum()
        billing.basicint = bill.items.basicint.sum()
        billing.basicdisc = bill.items.basicdisc.sum()
        billing.basicnet = billing.basic + billing.basicint - billing.basicdisc
        
        billing.basicidle = bill.items.basicidle.sum()
        billing.basicidleint = bill.items.basicidleint.sum()
        billing.basicidledisc = bill.items.basicidledisc.sum()
        billing.basicidlenet = billing.basicidle + billing.basicidleint - billing.basicidledisc

        billing.firecode = bill.items.firecode.sum()

        billing.sef = bill.items.sef.sum()
        billing.sefint = bill.items.sefint.sum()
        billing.sefdisc = bill.items.sefdisc.sum()
        billing.sefnet = billing.sef + billing.sefint - billing.sefdisc 

        billing.billamount = billing.basicnet + billing.sefnet + billing.basicidlenet + billing.firecode 

        if (billing.billamount <= 0.0) {
            def msg = 'A problem was encountered when generating the bill.\n'
            msg += 'Please proceed to Land Tax Office for assistance.'
            throw new Exception(msg)
        }
        buildPeriod(billing)
        return billing
    }


    void buildPeriod(billing){
        billing.fromyear = (billing.lastqtrpaid == 4 ? billing.lastyearpaid + 1 : billing.lastyearpaid)
        billing.fromqtr = (billing.lastqtrpaid == 4 ? 1 : billing.lastqtrpaid + 1)
        billing.toyear = billing.billtoyear 
        billing.toqtr = billing.billtoqtr 

        if (billing.fromyear == billing.toyear && billing.fromqtr == 1 && billing.toqtr == 4)
            billing.billperiod = billing.toyear
        else if (billing.fromyear == billing.toyear && billing.fromqtr == billing.toqtr)
            billing.billperiod = billing.fromqtr + 'Q, ' + billing.toyear
        else if (billing.fromyear == billing.toyear)
            billing.billperiod = billing.fromqtr + '' + billing.toqtr + 'Q, ' + billing.toyear 
        else if (billing.fromqtr == 1 && billing.toqtr == 4)
            billing.billperiod = billing.fromyear + '-' + billing.toyear 
        else if (billing.fromqtr == 1 && billing.toqtr != 4)
            billing.billperiod = billing.fromyear + '-' + billing.toqtr + 'Q,' + billing.toyear 
        else if (billing.fromqtr != 1 && billing.toqtr == 4)
            billing.billperiod = billing.fromqtr + 'Q,' + billing.fromyear + '-' + billing.toyear
        else 
            billing.billperiod = billing.fromqtr + 'Q,' + billing.fromyear + '-' + billing.toqtr + 'Q,' + billing.toyear
    }


    def validateLedger(params){
        if (!params.tdno) 
            throw new Exception('TD No. is required.')

        def msg = null;

        def q = [_schemaname:'rptledger']
        q.findBy = [tdno:params.tdno]
        def ledger = query.findFirst(q)

        if (!ledger) {
            msg = 'TD No. ' + params.tdno + ' does not exist.\n'
            msg += 'Verify that the you enter it correctly and submit again.' 
            throw new Exception(msg)
        }

        if ('CANCELLED'.equalsIgnoreCase(ledger.state)){
            msg = 'Ledger has already been cancelled.\n'
            msg += 'Please proceed to the Land Tax Office for assistance.'
            throw new Exception(msg)
        }
        return ledger 
    }
}

