import com.rameses.annotations.*;
import com.rameses.util.*;
import com.rameses.rules.common.*;
import mt.facts.*;
import mt.actions.*;

class SendoutService {

	@Service('FormControlService') 
	def controlSvc; 

	@Service('RuleExecutorService')
	def ruleSvc; 

	@Service('DateService')
	def dateSvc;

	@DataContext('branch') 
	def branch; 

	@Env 
	def env; 

	@ProxyMethod 
	def init() {
		def map = [
			branch     : [ objid: env.ORGID, name: env.ORGCODE+' '+ env.ORGNAME ], 
			user       : [ objid: env.USERID, name: env.USER ], 
			terminalid : env.TERMINALID 
		]; 
		def ctrl = controlSvc.getAvailable([ 
			branchid   : map.branch.objid, 
			terminalid : map.terminalid, 
			formtype   : 'SENDOUT', 
			formcode   : 'S' 
		]); 
		map.controlid = ctrl.objid;
		map.controlno = ctrl.seriesno; 
		return map;
	}

	@ProxyMethod 
	public def calculateCharge( params ) { 
		params.date = dateSvc.parse( 'yyyy-MM-dd', dateSvc.getServerDate() );
		def soutfact = new Sendout( params ); 
		def facts = [];		
		facts << new CurrentDate( params.date ); 
		facts << soutfact; 

		def actions = [:];
		actions.calculatecharge = new CalculateCharge( soutfact: soutfact ); 
		actions.updatecharge = new UpdateCharge( soutfact: soutfact ); 
		ruleSvc.execute('sendout', facts, actions, null ); 
		return [ charge : soutfact.charge ]; 
	}

} 
