import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.UID;

class NotificationService 
{   
    @ActiveDB(value='sys_notification', em='notification') 
    def em; 

    @Service('DateService')
    def dateSvc;

    @Service 
    def self;

    @Env
    def env;

    @ProxyMethod 
    public List getColumns( Map params ) {
        return [ 
            [name:'dtfiled', caption:'Date Filed', maxWidth:130],
            [name:'message', caption:'Message', type:'label'],
            [name:'sender', caption:'Sender', maxWidth:150] 
        ]; 
    }  

    @ProxyMethod 
    public List getList( params ) { 
        if (params.recipients) { 
            params.recipientid = params.recipients.collect{ "'"+ it +"'" }.join(","); 
            return em.getAllMessages( params ); 
        } else { 
            return em.getList( params ); 
        } 
    } 

    @ProxyMethod 
    public def addMessage( params ) { 
        if (!params.recipienttype.toString().toLowerCase().matches('user|group')) {
            throw new Exception('recipient type must be a "user" or "group"'); 
        } 

        if (!params.senderid) params.senderid = env.USERID; 
        if (!params.sender) params.sender = (env.FULLNAME? env.FULLNAME: env.NAME); 

        params.notificationid = 'MSG' + new UID(); 
        params.dtfiled = dateSvc.serverDate.toString(); 

        def userObj = (params.data? params.data: [:]); 
        params.data = new Base64Cipher().encode(userObj); 
        em.create( params ); 

        params.data = userObj;
        self.notify( params ); 
        return params; 
    } 


    @ProxyMethod 
    public void removeMessage( params ) { 
        def info = null; 
        if (params.notificationid) { 
            info = em.findByNotificationid( params ); 
        } else { 
            info = em.findByObjid( params ); 
        } 

        if (info) {
            em.delete( info ); 
            self.notifyRemove( info );   
        }
    } 


    @ProxyMethod(local=true)  
    public void importMessage( params ) {
        if (!params.notificationid) params.notificationid = params.objid; 

        def old = em.findByNotificationid([notificationid: params.notificationid]); 
        if (old) {
            //record already exist 
            return; 
        }

        params.dtfiled = dateSvc.serverDate.toString(); 

        def userObj = (params.data? params.data: [:]); 
        params.data = new Base64Cipher().encode(userObj); 
        params.recipientid = params.groupid; 
        params.recipienttype = 'group'; 
        em.create( params ); 

        params.data = userObj;
        self.notify( params ); 
    } 



    @XConnection('ws_sender')
    def wssender;

    @Async
    @ProxyMethod(local=true)
    public void notify( msg ) {
        def channel = msg.recipienttype.toString().toLowerCase(); 
        if (channel == 'group') msg.groupid = msg.recipientid; 

        msg.status  = 'PENDING';        
        msg.channel = channel;
        msg.group   = channel;
        msg.data    = resolveData(msg.data);
        wssender.send([
            channel : msg.channel, 
            group   : msg.group, 
            data    : msg 
        ]); 
    }    

    @Async
    @ProxyMethod(local=true)
    public void notifyRemove( msg ) {
        def channel = msg.recipienttype.toString().toLowerCase(); 
        if (channel == 'group') msg.groupid = msg.recipientid; 

        msg.status  = 'REMOVED'; 
        msg.channel = channel;
        msg.group   = channel;
        wssender.send([
            channel : msg.channel, 
            group   : msg.group, 
            data    : msg
        ]); 
    }     

    @ProxyMethod 
    public void notifyMessages( params ) { 
        if (params.recipienttype == 'user') {
            self.notifyMessages0( em.getUserMessages(params) );
        } else if (params.recipienttype == 'group') {
            self.notifyMessages0( em.getGroupMessages(params) );
        } 
    } 

    @Async
    @ProxyMethod(local=true)
    public void notifyMessages0( list ) {
        list?.each { 
            def channel = it.recipienttype.toString().toLowerCase(); 
            if (channel == 'group') it.groupid = it.recipientid; 

            it.status   = 'PENDING';             
            it.channel  = channel;
            it.group    = channel;
            it.data     = resolveData(it.data); 
            wssender.send([
                channel : it.channel, 
                group   : it.group, 
                data    : it
            ]); 
        } 
    } 


    /*
        helper and supporting methods 
    */
    private def resolveData( data ) {
        try {
            return new Base64Cipher().decode( data ); 
        } catch(Throwable t) {
            return data; 
        } 
    }      
}