
import com.rameses.annotations.*;

class ForDownloadNotificationTask {

    @ActiveDB(value='notification', em='notification')
    def em;

    @Service(value='CloudNotificationService', connection='cloud_notification')
    def remoteSvc;

	//@Schedule(interval=1) 
	public void download( task ) { 
		em.getChannelsForDownload().each{ o-> 
			downloadByChannel( o );  
		} 
	} 

	void downloadByChannel( params ) { 
		def inc = em.findMessageForDownloadByChannel( params ); 
		if ( !inc ) return; 

		def chksum = em.findCheckSum( inc ); 
		if ( chksum.datacount != chksum.maxindexno ) {
			//the downloaded data are not sync anymore 
			//update the indexno to re-download the previous batch 
			em.update([ objid: inc.objid, indexno:chksum.datacount+1 ], 'fordownload'); 
			return;  
		}
		
		if ( chksum.chunkcount==chksum.datacount && chksum.chunksize==chksum.datalength ) {
			//downloaded successfully 
			em.removeForDownload( inc ); 
			em.create( inc, 'forprocess' ); 
			remoteSvc.removeMessage([ objid: inc.objid ]);  
			return; 
		} 

		inc.parentid = inc.objid; 
		if ( !inc.indexno ) inc.indexno=1; 
		if ( inc.indexno <= 0 ) inc.indexno=1;

		inc.startindexno = inc.indexno; 
		inc.endindexno = inc.indexno+4;

		remoteSvc.getItems( inc ).each{ o-> 
			def old = em.findData([ objid: o.objid ]); 
			if ( !old ) em.create( o, 'data' ); 
		} 

		em.update([ objid: inc.objid, indexno:inc.endindexno+1 ], 'fordownload'); 		
	}
} 
