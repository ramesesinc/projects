import com.rameses.annotations.*
import com.rameses.util.*
import com.rameses.common.*
import com.rameses.services.extended.*

class OnlineElectronicReceiptService  
{

    @Env 
    def env 

    @Service("DateService")
    def dateService
        
    @Service("NumberService")
    def numSvc  

    @Service('CashReceiptService')
    def cashreceiptSvc 

    @DataContext("paymentorder")
    def paymentorder 

    @DataContext("paymentorder_item")
    def paymentorder_item 
    
    @DataContext("af_control")
    def afControl 

    @DataContext("collectiontype")
    def collectiontype 

    @Service('OrgService')
    def orgSvc 

    @DataContext("paymentpartner")
    def paymentpartner 

    @DataContext('creditmemo')
    def creditmemo 

    @ActiveDB('onlinecashreceipt')
    def em_onlinecashreceipt

    @Service('PersistenceService')
    def persistenceSvc 
    

    @ProxyMethod
    public def post( eor) {
        def po = paymentorder.find([txnid:eor.txnpoid]).first()
        if (!po) throw new Exception('Payment Order No. ' + eor.txnpoid + ' does not exist or has already been deleted.')

        def svrDate = dateService.serverDate
        def entity = [objid:eor.objid]
        entity.putAll( getNextEORNumber() )
        entity.state = 'POSTED'
        entity.txnmode = 'ONLINE'
        entity.txntype = 'eor'
        entity.payer = po.payer
        entity.paidby = po.paidby
        entity.paidbyaddress = po.paidbyaddress
        entity.amount = numSvc.round( po.amount )
        entity.receiptdate = eor.refdate
        entity.txndate = eor.dtposted
        entity.org = orgSvc.getRoot()
        entity.collector = getCollector()
        entity.user = [objid: 'EOR', name:'EOR']
        entity.totalcash = 0
        entity.totalnoncash = entity.amount
        entity.balancedue = 0
        entity.cashchange = 0
        entity.totalcredit = 0
        entity.collectiontype = collectiontype.find(po.txntype.collectiontype).first()
        entity.items = po.items 

        def cm = postCreditMemo(entity, eor, po)
        
        //build paymentitems
        entity.paymentitems = []
        def fundsummaries = em_onlinecashreceipt.getFundSummaries(po)
        fundsummaries.eachWithIndex{fs, idx -> 
            def p = [:]
            p.objid = 'PMTE' + new java.rmi.server.UID()
            p.receiptid = entity.objid 
            p.bankid = cm.bankaccount.bank.objid 
            p.deposittype = 'EOR'
            p.bank = cm.bankaccount.bank.name  
            p.refid = eor.objid 
            p.refno = cm.refno 
            p.refdate = cm.refdate 
            p.reftype = 'CREDITMEMO'
            p.bankaccountid = cm.bankaccount.objid
            p.amount = fs.amount 
            p.particulars = 'CM # ' + cm.refno + ' (' + (idx+1) + '/' + fundsummaries.size() + ')'
            p.fund = fs.fund 
            entity.paymentitems << p 
        }
        entity.po = po 
        entity.eor = eor 
        cashreceiptSvc.post(entity)
        paymentorder.find([txnid:po.txnid]).update([receiptid: entity.objid])
        
        println 'EOR has been successfully posted.'
        return entity 
    }   

    def postCreditMemo(receipt, eor, po){
        def pp = paymentpartner.find([code:eor.partner.objid]).first()

        def cm = [_schemaname:'creditmemo']
        cm.objid = 'CME' + new java.rmi.server.UID()
        cm.state = 'CLOSED'
        cm.controlno = po.controlno
        cm.payer = [:]
        cm.payer.objid = po.payer?.objid  
        cm.payer.name = po.paidby 
        cm.payer.address = [text:po.paidbyaddress]
        cm.refdate = eor.refdate 
        cm.refno = eor.refno
        cm.amount = po.amount 
        cm.particulars = po.particulars 
        cm.bankaccount = pp.bankaccount 
        cm.type = 'EOR'
        cm.dtissued = receipt.receiptdate 
        cm.receiptid = receipt.objid 
        cm.receiptno = receipt.receiptno 
        cm.receiptdate = receipt.receiptdate 
        persistenceSvc.create(cm)
        return cm 
    }

    def getControl( def afControlId ) {
        def ac = afControl.find( [objid: afControlId ]).first()
        if(!ac) {
            ac = [objid:afControlId]
            ac.afid = 'EOR'
            ac.startseries = 1
            ac.endseries = 999999999
            ac.currentseries = 1
            ac.stubno = 1
            ac.active = 1
            ac.owner =  getCollector()
            ac.assignee = ac.owner
            afControl.create(ac)
        }
        return ac
    }

    def getCollector(){
        return [objid: 'EOR', name:'EOR', title:'EOR']
    }

    def getNextEORNumber() {
        String afControlId = 'EOR'+ dateService.getServerYear()
        def ac = getControl(afControlId)
        int series = ac.currentseries
        afControl.find( [objid: afControlId] ).update( [currentseries: series + 1] )
        return [series: series, receiptno: afControlId + '-' + series, formno:'EOR', formtype:'serial', controlid: afControlId, stub: 1 ] 
    }
}
