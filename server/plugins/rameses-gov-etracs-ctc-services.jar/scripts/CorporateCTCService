import com.rameses.annotations.*;
import java.rmi.server.*;
import com.rameses.rules.common.*;
import com.rameses.util.*;
import com.rameses.services.extended.*;


public class CorporateCTCService
{
	@ActiveDB('ctc_corporate')
	def em 

	@ActiveDB("rule")
	def ruleDB;

	@Service('DateService')
	def dtSvc

	@Service('NumberService')
	def numSvc


	@Resource("RuleService")
	def ruleSvc;

	@Service('RevenueItemAccountService')
	def revSvc

	def RULESET = 'ctccorporate'
	def FACT_PACKAGE = 'ctccorporate.'
	

	def YMD = new java.text.SimpleDateFormat('yyyy-MM-dd'); 
	def YMDHMS = new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss'); 

	private def convertToDate( o ) {
		if ( o instanceof Date ) {
			return o; 
		} 

		try {
			return YMDHMS.parse( o ); 
		} catch(Throwable t){
			return YMD.parse( o ); 
		} 
  	} 

	@ProxyMethod
	public def getCtcRelatedPayerData(entity){
		return [newbusiness:false]
		/*
		// info fields required:
		// newbusiness, realpropertyav, businessgross
		def property = em.findRealPropertyAv(entity)
		def business = em.findBusinessGross(entity)
		def info = [
			newbusiness 	: (business.apptype == 'NEW'),
			businessgross 	: business.totalgross,
			realpropertyav  : property.totalav,
		]
		return info 
		*/
	}

	@ProxyMethod
	public def calculateTax(ctc){
		def data = createFacts(ctc)
		def actions = buildActions(ctc, data)
		def grps = ruleDB.getRulegroups( [ruleset: RULESET] );
		grps.each{g ->
			ruleSvc.execute( RULESET, data.facts, actions, g.name);
		}
		buildItems(data.ctc)
		return data.ctc 
	}

	void buildItems(ctc){
		ctc.items = []
		ctc.items << buildItem(ctc.acctid, ctc.totaltax)
		if (ctc.interest > 0.0)
			ctc.items << buildItem(ctc.interest_acctid, ctc.interest)
	}

	def buildItem(acctid, amount){
		return [
			objid : 'CI' + new java.rmi.server.UID(),
			item  : revSvc.open([objid:acctid]),
			amount : amount,
		]
	}


	def buildActions(ctc, data){
		def actions = new RuleAction();
		actions.addCommand('calc-basic-tax', new CalculateTax(ctc:data.ctc, numSvc:numSvc, actiontype:'calc-basic-tax'))
		actions.addCommand('calc-businessgross-tax', new CalculateTax(ctc:data.ctc, numSvc:numSvc,  actiontype:'calc-businessgross-tax'))
		actions.addCommand('calc-propertyav-tax', new CalculateTax(ctc:data.ctc, numSvc:numSvc,  actiontype:'calc-propertyav-tax'))
		actions.addCommand('calc-additional-tax', new CalculateTax(ctc:data.ctc, numSvc:numSvc,  actiontype:'calc-additional-tax'))
		actions.addCommand('calc-interest', new CalculateTax(ctc:data.ctc, numSvc:numSvc,  actiontype:'calc-interest'))
		return actions 
	}


	def createFacts(ctc) {
		ctc.basictax = 0.0;
		ctc.businessgrosstax = 0.0;
		ctc.propertyavtax = 0.0;
		ctc.additionaltax = 0.0;
		ctc.interest = 0.0;
		ctc.totaltax = 0.0;
		ctc.amountdue = 0.0;

		def refdate = ( ctc.receiptdate ? ctc.receiptdate : dtSvc.serverDate ); 
		def pdate = convertToDate( refdate );  
		def map = [ facts:[], ctc:ctc ];
		
		map.facts << new CurrentDate(pdate);
		map.facts << new EffectiveDate(pdate);

		def ctcfact = ruleSvc.createFact(RULESET, FACT_PACKAGE+'CorporateCTC'); 
		populateFactData(ctcfact, ctc);
		ctcfact.additional = ctc.hasadditional;		
		map.facts << ctcfact; 
		return map; 
	}

	void populateFactData(target, sourceMap){
		sourceMap.keySet().each{
			try{
				target[it] = sourceMap[it]
			}
			catch(e){
				//ignore
			}
		}
	}

}
	

public class CalculateTax implements RuleActionHandler {
	def ctc 
	def actiontype 
	def numSvc

	public void execute(def params, def drools) {
		def tax = numSvc.round(params.expr.getDecimalValue());
		if (actiontype == 'calc-basic-tax') {
			ctc.basictax = tax
			params.ctc.basictax = tax
			ctc.acctid = params.acct.key 
			ctc.accttitle = params.acct.value 
		}
		else if (actiontype == 'calc-businessgross-tax'){
			ctc.businessgrosstax = tax
			params.ctc.businessgrosstax = tax
		}
		else if (actiontype == 'calc-propertyav-tax'){
			ctc.propertyavtax = tax
			params.ctc.propertyavtax = tax
		}
		else if (actiontype == 'calc-additional-tax'){
			ctc.basictax = 0.0
			params.ctc.basictax = 0.0
		}
		else if (actiontype == 'calc-interest'){
			ctc.interest = tax
			params.ctc.interest = tax
			ctc.interest_acctid = params.acct.key 
			ctc.interest_accttitle = params.acct.value
		}

		ctc.totaltax = ctc.basictax + ctc.businessgrosstax + ctc.propertyavtax + ctc.additionaltax 
		ctc.amountdue = ctc.totaltax + ctc.interest 
		ctc.amount = ctc.totaltax + ctc.interest 
		
		params.ctc.totaltax = ctc.totaltax 
		params.ctc.amountdue = ctc.amount
	}
}	


