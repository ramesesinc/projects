import com.rameses.annotations.*;
import com.rameses.util.*;
import com.rameses.services.extended.*;

class CorporateCtcReceiptInterceptor {

	@ActiveDB('ctc_corporate')
	def em

	@Service('PersistenceService')
	def persistenceSvc; 

	@Service('DateService')
	def dtSvc 

	String SCHEMA_NAME = 'entityjuridical'; 
	
	@After(pattern="CashReceiptService.post", eval="#{result.formno=='0017' && result.txnmode != 'CAPTURE'}")
	public void afterPostCashReceipt0017( evt ) { 
		afterPostCashReceiptImpl( evt ); 
	}
	@After(pattern="CashReceiptService.open", eval="#{result.formno=='0017' && result.txnmode != 'CAPTURE'}")
	public void afterOpenCashReceipt0017( evt ) { 
		afterOpenCashReceiptImpl( evt ); 
	}

	@After(pattern="CashReceiptService.post", eval="#{result.formno=='907' && result.txnmode != 'CAPTURE'}")
	public void afterPostCashReceipt907( evt ) { 
		afterPostCashReceiptImpl( evt ); 
	} 
	@After(pattern="CashReceiptService.open", eval="#{result.formno=='907' && result.txnmode != 'CAPTURE'}")
	public void afterOpenCashReceipt907( evt ) { 
		afterOpenCashReceiptImpl( evt ); 
	}

	private void afterPostCashReceiptImpl( evt ) {
		def ctc = evt.result;	
		if (ctc.payer.dtregistered){
			ctc.payer.dtregistered = dtSvc.parse('yyyy-MM-dd', ctc.payer.dtregistered)
		}
		em.create( ctc ); 
		ctc.payer._schemaname = SCHEMA_NAME; 
		ctc.payer.findBy = [objid: ctc.payer.objid]; 
		persistenceSvc.update( ctc.payer ); 
	}
	private void afterOpenCashReceiptImpl( evt ) { 
		if ( evt.result.payer == null ) evt.result.payer = [:]; 

		def ctc = em.read( evt.result ); 
		if ( ctc.payer == null ) ctc.payer = [:]; 

		if ( ctc.payer?.objid ) {
			ctc.payer._schemaname = SCHEMA_NAME; 
			ctc.payer.findBy = [objid: ctc.payer.objid]; 
			def o = persistenceSvc.read( ctc.payer ); 
			if ( o ) { 
				o.putAll( ctc.payer ); 
				ctc.payer.putAll( o ); 
			} else { 
				ctc.payer.putAll( evt.result.payer ); 
			} 
		} else {
			ctc.payer.putAll( evt.result.payer ); 
		} 
		evt.result.putAll( ctc ); 
	} 
} 
