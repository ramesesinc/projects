import com.rameses.annotations.*;
import com.rameses.util.*;
import com.rameses.services.extended.*;

class IndividualCtcReceiptInterceptor {

	@ActiveDB('ctc_individual')
	def em

	@Service('PersistenceService')
	def persistenceSvc; 

	@Service('DateService')
	def dtSvc 

	String SCHEMA_NAME = 'entityindividual'; 
	
	@After(pattern="CashReceiptService.post", eval="#{result.formno=='0016' && result.txnmode != 'CAPTURE'}")
	public def interceptCashReceipPost( evt ) { 
		def ctc = evt.result;	
		if (ctc.payer.birthdate) { 
			ctc.payer.birthdate = dtSvc.parse('yyyy-MM-dd', ctc.payer.birthdate)
		} 
		em.create( ctc ); 
		ctc.payer._schemaname = SCHEMA_NAME; 
		ctc.payer.findBy = [objid: ctc.payer.objid]; 
		persistenceSvc.update( ctc.payer ); 
	}

	@After(pattern="CashReceiptService.open", eval="#{result.formno=='0016' && result.txnmode != 'CAPTURE'}")
	public def onOpenReceipt( evt ) { 
		def ctc = evt.result; 
		def ctcext = em.read(ctc); 
		ctc.payer.putAll( ctcext.payer ); 
		ctcext.remove('payer'); 
		ctc.putAll( ctcext ); 

		ctc.payer._schemaname = SCHEMA_NAME; 
		ctc.payer.findBy = [objid: ctc.payer.objid]; 
		def o = persistenceSvc.read( ctc.payer ); 
		if ( o ) { 
			o.putAll( ctc.payer ); 
			ctc.payer.putAll( o ); 
			evt.result.putAll( ctc ); 
		} 
	} 
} 
