import com.rameses.annotations.*;
import com.rameses.util.*;
import com.rameses.functions.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;
import com.rameses.rules.common.*;
import market.facts.*;
import market.actions.*;

public class MarketBillingService  {

	@Service("MarketBillRuleService")
	def ruleSvc;

	@Service("MarketAccountService")
	def acctSvc;

	@Service("DateService")
	def dateSvc;

	@Service("NumberService")
	def numSvc

	@ActiveDB(value="market_billing", em="market")
	def em;


	private def _fetchBillItems( def o ) {
		def m = [objid: o.objid];
		m.startdate = o.startdate;
		m.compromise = em.findCompromise( [acctid: o.objid ] );
		//m.lastpaidmonthyear = em.findLastPaidMonthYear( [acctid: o.objid] );

		//determine the last paid month year
		m.lastyearmonthpaid = acctSvc.findLastYearMonthPaid([acctid: o.objid]);


		m.billdate  = o.billdate;
		if(!m.billdate) {
			m.billdate = dateSvc.serverDate;
		}
		m.billingtype = o.billingtype;
		m.rate = o.rate;
		return ruleSvc.execute( m );
	}

	@ProxyMethod
	public def getBillItems( def o ) {
		def mu = acctSvc.open( o ); 
		mu.objid = o.objid;
		mu.billdate = o.billdate;
		mu.billingtype = o.billingtype;
		return _fetchBillItems( mu );
	}

	@ProxyMethod
	public def getBillItemsByAcctno( def o ) {
		if( !o.acctno ) 
			throw new Exception("getBillItemsByAcctno error. " + o.acctno +  " not found ");
		def mu = acctSvc.findByAcctno( o ); 
		mu.objid = o.objid;
		mu.billdate = o.billdate;
		mu.billingtype = o.billingtype;
		return _fetchBillItems( mu );
	}

	@ProxyMethod 
	public def getReport( def o ) {
		def mu = acctSvc.open( o ); 
		mu.objid = o.objid;
		mu.billdate = o.billdate;
		mu.billingtype = o.billingtype;
		def billing = _fetchBillItems( mu );

		def reportdata = [
			ownername: mu.owner.name,
			location : mu.rentalunit.section.title + ", " + mu.rentalunit.name,
			billdate : mu.billdate,
			grandtotal : numSvc.roundA( billing.total, 2 )
		]

		def months = dateSvc.getMonths();

		reportdata.items = billing.items.each { itm -> 
			itm.monthdesc = months.find{ it.index ==  itm.month }.name
			itm.subtotal = numSvc.roundA( (itm.amtdue + ( itm.surcharge ? itm.surcharge : 0.0 )), 2  )
			itm.amtdue = numSvc.roundA(itm.amtdue, 2)
			itm.surcharge = numSvc.roundA(itm.surcharge, 2)
			itm.interest = numSvc.roundA(itm.interest, 2)
			itm.total = numSvc.roundA(itm.total, 2)
		}
		
		return reportdata; 

	}



}

