import com.rameses.annotations.*;
import java.text.*;
import com.rameses.functions.*;
import com.rameses.util.*;
import market.facts.*;
import com.rameses.rules.common.*;

import treasury.utils.*;
import treasury.facts.*;

class MarketBillingService {
	
	@Service("AssessmentRuleService")
	def assmtSvc;

	@DataContext("market_account")
	def acctEm;

	@Service("DateService")
	def dateSvc;

	@DataContext("market_account_recurringfee")
	def recurFeeEm;

	@DataContext("market_otherfee")
	def otherFeeEm;

	@DataContext("market_electricity")
	def electricityEm;

	@DataContext("market_water")
	def waterEm;

	/***************************************************************************************************
	* STEPS: 
	*     1. Determine where date to start. Startdate or last date paid (last date covered). Add 1 day.
	*     2. If there is partial balance, do not move the date. to the next date from last payment date. 
	*     3. This returns the bill items in its raw form i.e. not summaried to period
	****************************************************************************************************/
	@ProxyMethod
	public def process( def o, def resultHandler ) {
		if(!o.fromdate) throw new Exception("fromdate is required in MarketBillingService");
		if(!o.marketunit) throw new Exception("marketunit is required in MarketBillingService");
		if(!o.billdate) throw new Exception("billdate is required in MarketBillingService");

		def amtPaid = 0.0;
		def svrDate = dateSvc.getBasicServerDate();
		def todate = o.billdate; 

		println "from date " + o.fromdate + " to date " + todate;

		def billDateFact = new treasury.facts.BillDate( o.billdate );

		def fb = new FactBuilder();
		fb.facts << new treasury.facts.SystemDate(svrDate);
		fb.facts << billDateFact;
		if( o.partial ) {
			fb.facts << new treasury.facts.Payment( amount: o.partial );
		}

		//RENTAL RELATED FACTS
		if(!o.filter ||  o.filter?.contains( 'MARKETRENTAL') ) {
			fb.facts << new MarketRentalUnit( o.marketunit );
			MonthEntryBuilder.buildMonthEntries( o.fromdate, todate ).each {
				fb.facts << it;
			};
			//add the recurring and other fees
			recurFeeEm.find( [acctid: o.acctid ]).list().each {
				fb.facts << new RecurringFee( txntype: it.txntype.objid, amount: it.amount )
			};
		}
		

		//PREPARE THE GENERIC FILTERS
		int ym = ( billDateFact.year*12)+billDateFact.month;
		String ff = " amount-amtpaid > 0 AND ((year*12)+month) <= :ym ";
		def fp = [ym: ym];

		if(!o.filter ||  o.filter?.contains( 'ELECTRICITY') ) {
			electricityEm.find( [acctid: o.acctid ]).where( ff, fp ).list().each {
				def mf = new MonthBillItem( refid:it.objid, ledgertype:'market_electricity',
					 year: it.year, month: it.month, txntype: 'ELECTRICITY', 
					amount:it.balance, remarks: it.remarks );
				fb.facts << mf;
			};
		}	

		//WATER
		if(!o.filter || o.filter?.contains( 'WATER' )) {
			waterEm.find( [acctid: o.acctid ]).where( ff, fp ).list().each {
				def mf = new MonthBillItem( refid:it.objid, ledgertype:'market_water',
					 year: it.year, month: it.month, txntype: 'WATER', 
					amount:it.balance, remarks: it.remarks );
				fb.facts << mf;
			};
		}

		//OTHER FEE RELATED FACTS
		if( o.filter ) {
			ff+= " AND txntype.objid IN ('"  +  o.filter.join( "','" )  + "')" ;
			otherFeeEm.find( [acctid: o.acctid ]).where( ff, fp ).list().each {
				def mf = new MonthBillItem( refid:it.objid, ledgertype:'market_otherfee',
					 year: it.year, month: it.month, txntype: it.txntype?.objid, 
					amount:it.balance, remarks: it.remarks );
				fb.facts << mf;
			};
		}
		return assmtSvc.execute( "marketbilling", [:], fb, resultHandler );
	}


	private def buildNextFromDate(  int yr, int month, int day, def type ) {
		def cal = Calendar.instance;
		cal.set(Calendar.YEAR, yr );
		cal.set(Calendar.MONTH, month -1 );
		cal.set(Calendar.DATE, 1 );	  //we must add this as bangil
		if( type == "MONTH" ) {
			cal.add( Calendar.MONTH, 1);
		}
		else {
			cal.set(Calendar.DATE, day );
			cal.add( Calendar.DATE, 1 );
		}
		def df = new SimpleDateFormat("yyyy-MM-dd");
		return df.parse( df.format(cal.getTime()));
	}

	@ProxyMethod
	public def getBilling( def o ) {
		if( !o.acctid ) throw new Exception("acctid is required in MarketBillingService.getBilling");
		def str = "acctno,startdate,lastyearpaid,lastmonthpaid,lastdaypaid,unittype,payfrequency,ratetype,rate,extrate,unit.clusterid,unit.sectionid,partialbalance";
		def acct = acctEm.select(str).find([objid:o.acctid]).first();
		if(!acct) throw new Exception("Account not found");

		def svrDate = dateSvc.getBasicServerDate();
		def req = [:];
		req.acctid = o.acctid;
		req.marketunit = [
			unittype:acct.unittype, 
			payfrequency:acct.payfrequency,
			ratetype: acct.ratetype,
			rate:acct.rate, 
			extrate: acct.extrate,
			clusterid:acct.clusterid,
			sectionid:acct.sectionid,
			partialbalance:(acct.partialbalance==null)?0:acct.partialbalance
		];	

		req.fromdate = buildNextFromDate(  acct.lastyearpaid, acct.lastmonthpaid, acct.lastdaypaid==null?-1:acct.lastdaypaid, acct.ratetype );
		req.billdate = (o.billdate!=null)? o.billdate: svrDate;
		if ( req.fromdate.after(req.billdate)) {
			throw new Exception('billdate is less than last date covered'); 
		}

		if(o.filters) req.filter = o.filters;

		//if partial payment was specified
		if( o.partial ) req.partial = o.partial;

		def m = [items:[], billitems: [] ];
		def resultHandler = [
			getFactKeyValue : { v->
				if(v instanceof DueDate ) {
					m.duedate = v.date;
				}
				else if(v instanceof BillItem) {
					def itm = v.toMap();
					m.items << itm;
					m.billitems << itm;

					if(itm.surcharge == null) itm.surcharge = 0;
					if(itm.interest == null)  itm.interest = 0;
					
					if(itm.todate!=null) {
						if(req.todate==null) req.todate = itm.todate;
						else if( req.todate < itm.todate) req.todate = itm.todate;
					}
				}	
				else if( v instanceof SummaryBillItem ) {
					def itm = v.toMap();
					m.items << itm;									
				}
				else if( v instanceof BillSubItem ) {
					def itm = v.toMap();
					itm.year = v.parent.year;
					itm.month = v.parent.month;
					itm.monthname = v.parent.monthname;
					itm.fromdate = v.parent.fromdate;
					itm.todate = v.parent.todate;
					itm.remarks = itm.year + " " + itm.month;
					m.items << itm;
				}
				return null;
			}
		] as ResultHandler;

		process( req, resultHandler);
		if(!m.items) 
			throw new Exception("No billitems found");
		m.acctno = 	acct.acctno;
		m.fromdate = req.fromdate;
		m.todate = req.todate;
		m.months = 1;	
		if( m.fromdate && m.todate ) {
			m.months = DateFunc.monthsDiff( m.fromdate, m.todate );
		}
		m.items = m.items.sort{  ((it.year*12)+it.month) };
		m.billitems = m.billitems.sort{  ((it.year*12)+it.month) };
		m.amount = NumberUtil.round(m.items.sum{ it.amount });
		return m;
	}

}