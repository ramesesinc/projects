import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;
import market.facts.*;
import java.text.*;
import treasury.utils.*;
import treasury.facts.*;


public class MarketCashReceiptService  {

	@DataContext("market_account")
	def acctEm;

	@Service("MarketBillingService")
	def billingSvc;

	@Service("DateService")
	def dateSvc;

	def df = new java.text.SimpleDateFormat("yyyy-MM-dd");
	
	@ProxyMethod
	public def getInfo(o) {
		def a = acctEm.find([acctno: o.id] ).first();
		if(!a) a = acctEm.where("unitno =:code",[code: o.id]).first();
		if(!a) throw new Exception("Market account not found!");

		def z = [:];
		z.acctid = a.objid;
		z.acctno = a.acctno;
		z.acctname = a.acctname;
		z.rate = a.rate;
		z.unit = a.unit;
		z.term = a.term;
		z.payer = a.owner;
		z.paidby = a.acctname + " (" + a.acctno + ")"; 
		z.paidbyaddress = a.unitno;
		z.payfrequency = a.payfrequency;

		//the billitems is used for updating payment ledger
		def r = [acctid: a.objid];
		if( o.billdate ) r.billdate = df.parse(o.billdate);
		if( o.partial ) r.partial = o.partial;

		def m = billingSvc.getBilling( r );
		

		//posting information
		z.postpayment = [
			_schemaname: "market_payment",
			acctid: a.objid,
			fromdate: m.fromdate,
			todate: m.todate,
			months: m.months,
			items: m.billitems
		];

		z.fromdate = df.parse(df.format(m.fromdate));
		z.todate = df.parse(df.format(m.todate));
		z.remarks = a.unitno + " "  + a.section.name + " (" + a.cluster?.market?.name + ") From " +df.format(z.fromdate) + " to " + df.format( z.todate ) ;
		z.amount = m.amount;
		z.items = m.items;
		/*
		z.ledgerstatus = m.ledgerstatus;
		z.billitems = m.billitems;
		z.days = m.billitems.sum{ it.days };
		z.months = m.billitems.size();
		+ "  - " + z.days + " days"
		z.particulars = z.remarks;
		*/
		return z;
	}

	


}