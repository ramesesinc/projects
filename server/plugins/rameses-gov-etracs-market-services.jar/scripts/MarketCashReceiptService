import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;
import market.facts.*;
import java.text.*;
import treasury.utils.*;
import treasury.facts.*;


public class MarketCashReceiptService  {

	@DataContext("market_account")
	def acctEm;

	@Service("MarketBillingService")
	def billingSvc;

	@Service("DateService")
	def dateSvc;

	
	@ProxyMethod
	public def getInfo(o) {
		def a = acctEm.find([acctno: o.id] ).first();
		if(!a) a = acctEm.where("unit.code =:code",[code: o.id]).first();
		if(!a) throw new Exception("Market account not found!");

		def z = [:];
		z.acctid = a.objid;
		z.acctno = a.acctno;
		z.acctname = a.acctname;
		z.rate = a.rate;
		z.extrate = a.extrate;
		z.unit = a.unit;
		z.term = a.term;
		z.payer = a.owner;
		z.paidby = a.acctname + " (" + a.acctno + ")"; 
		z.paidbyaddress = a.unit.code;
		z.remarks = a.unit.code + " "  + a.unit.section.name + " (" + a.unit.cluster?.market?.name + ")";

		def m = [items:[]];
		def resultHandler = [
			getFactKeyValue : { v->
				if( v instanceof MarketLedgerStatus ) {
					m.ledgerstatus = [
						todate: v.todate, 
						partialbalance: v.partialbalance, 
						partialextbalance: v.partialextbalance
					];
				}
				else if(v instanceof BillItem) {
					def itm = v.toMap();
					itm.remarks = v.year + " " + v.monthname; 
					if(m.todate==null) m.todate = itm.todate;
					if(itm.todate.after(m.todate) ) {
						m.todate = itm.todate;
					}
					m.items << itm;
				}	
				else if( v instanceof SummaryBillItem ) {
					def itm = v.toMap();
					m.items << itm;									
				}
				else if( v instanceof BillSubItem ) {
					def itm = v.toMap();
					itm.year = v.parent.year;
					itm.month = v.parent.month;
					itm.remarks = v.parent.year + " " + v.parent.monthname; 
					m.items << itm;
				}
				return null;
			}
		] as ResultHandler;

		billingSvc.getBilling( [acctid: a.objid, payoption: o.payment], resultHandler );
		z.items = m.items.sort{it.sortorder};
		z.amount = NumberUtil.round(z.items.sum{ it.amount }); 
		z.todate = m.todate;
		z.particulars = m.todate;
		z.ledgerstatus = m.ledgerstatus;
		return z;
	}

	


}