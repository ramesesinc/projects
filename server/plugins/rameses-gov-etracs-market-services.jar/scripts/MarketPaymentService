import com.rameses.annotations.*;
import java.text.*;
import com.rameses.functions.*;

class MarketPaymentService {
	
	@DataContext("market_payment")
	def pmt;

	@DataContext("market_account")
	def acct;

	@Service("DateService")
	def dateSvc;

	def dformat = new SimpleDateFormat("yyyy-MM-dd");

	private void postToLedger(def items, boolean isCredit) {
		/*
		String expr = (isCredit==true)?"{amtpaid+:amt}":"{amtpaid-:amt}";
		items.each {
			if( !it.txnrefid ) return;
			ledger.find( [objid: it.txnrefid ]).update( [amtpaid: expr], [amt: it.amount] );
		}
		*/
	} 

	@ProxyMethod
	public def postCreate( def o ) {
		pmt.create( o );
		postToLedger(o.items, true);
		acct.find( [objid: o.acctid] ).update( [lastpmtdate: o.todate] );
	}

	@ProxyMethod
	public def postVoid( def o ) {
		pmt.find( [refid: o.refid] ).update( [voided: 1] );
		def objid = pmt.find( [refid: o.refid] ).select("objid").val();
		def r = pmt.read( [objid: objid] );
		postToLedger( items, false );
		//acct.find( [objid: o.acctid] ).update( [lastpmtdate: o.todate] );
	}

	@ProxyMethod
	public def postRemove( def o ) {
		o = pmt.read(o);
		if( o.txnmode !=  'CAPTURE') 
			throw new Exception("Remove payment is only applicable for CAPTURE");
		postToLedger( items, false );
		//acct.find( [objid: o.acctid] ).update( [lastpmtdate: o.todate] );
	}



}