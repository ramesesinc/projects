import com.rameses.annotations.*;

class MarketAccountQueryInterceptor{
	
	@After(pattern="QueryService.getNodeList", eval="#{args[0]._schemaname == 'market_account'}")
	public void getAcctNodeList(def evt) {
		def result = evt.result;
		result << [ title: 'Active', id:'active'];
		result << [ title: 'Past due', id:'pastdue'];
		result << [ title: 'For padlock', id:'for-padlock'];
		result << [ title: 'Padlocked', id:'padlocked'];
		result << [ title: 'Inactive', id:'inactive'];
	}

	@Before(pattern="QueryService.getList", eval="#{args[0]._schemaname == 'market_account'}")
	public void loadList(def evt) {
		def o = evt.args[0];
		if( !o.node?.id ) return;

		def str = "state=:state";
		def m = [:];
		def status;		//this is for the ui to easily detect the state

		switch( o.node.id ) {
			case 'active':
				m.state = 'ACTIVE';
				status = 'active'
				break;
			case 'pastdue':
				status = 'pastdue'
				m.state = 'ACTIVE'
				str += ' AND duedate < NOW()'; 
				break;

			case 'for-padlock':
				status = 'for-padlock'
				m.state = 'ACTIVE'
				str += ' AND padlockdate < NOW()'; 
				break;

			case 'padlocked':
				status = 'padlocked'
				m.state = 'PADLOCKED';
				break;

			case 'inactive':
				status = 'inactive'
				m.state = 'INACTIVE';
				break;
		}

		//add to first position of where
		if( o.where ) {
			o.where[0] = str + " AND " + o.where[0];	
			o.where[1].putAll( m );
		}
		else {
			o.where = [str, m];
		}
		o.select += ",status:{'" + status + "'}";
	}

}