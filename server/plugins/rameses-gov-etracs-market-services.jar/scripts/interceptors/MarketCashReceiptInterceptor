import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;


/**********************************************************
* This routine is hooked in the CashReceiptService and 
* CashReceiptVoidService services. It will update each
* receivable based on amount paid. It will update billing.
* Billing is the key to determine if license can be
* released.     
**********************************************************/
public class MarketCashReceiptInterceptor {

	@Service("MarketPaymentService")
	def pmtSvc;

	@After(pattern="CashReceiptService.post", eval="#{result.collectiontype?.handler == 'marketrental'}")
	public void postMarketPayment(def evt) {
		def r = evt.args[0];
		def m = [:];
		m.objid = r.objid;
		m.txnno = r.receiptno;
		m.txndate = r.receiptdate;
		m.acctid = r.acctid;
		m.fromdate = r.fromdate;
		m.todate = r.todate;

		m.reftype = "cashreceipt";
		m.refid = r.objid;			//the cash receipt objid
		m.refno = r.receiptno;		
		m.refdate = r.receiptdate;
		m.amount = r.amount;
		m.txnmode = 'ONLINE';

		//find the items that is not surcharge or interest.
		m.items = [];
		r.items.each { bi->
			m.items << [ 
				parentid:m.objid, 
				amount: bi.amount, 
				month: bi.month,
				year: bi.year
			];
		}
		pmtSvc.postCreate( m );
	} 

	@After(pattern="CashReceiptVoidService.post",index=0,eval="#{result.receipt.collectiontype.handler=='marketrental'}")
	public void voidTxn(def evt) {
		def r = evt.args[0].receipt;
		pmtSvc.postVoid( [refid: r.objid]); 		
	}
}