import com.rameses.annotations.*;

class MarketCashReceiptInterceptor{
	
	@Service("DateService")
	def dateSvc;

	@DataContext("market_payment")
	def marketPmt;

	@DataContext("market_account")
	def marketAcct;

	@DataContext("market_rental_ledger")
	def rentalLedger;

	@DataContext("market_payment_rental")
	def rentalPmt;

	@DataContext("market_payment_utility")
	def utilityFeePmt;

	@DataContext("market_utility_ledger")
	def utilityLedger;

	@DataContext("market_otherfee_ledger")
	def otherFeeLedger;

	@DataContext("market_payment_otherfee")
	def otherFeePmt;


	//entry for 1 month / year
	void postRentalPayment(def itm, def pmt, def o ) {
		def ledgerid = null;
		def p = [acctid: itm.acctid, year: o.year, month: o.month ]
		def r = rentalLedger.find( p ).first();
		if( !r  ) {
			def le = [:];
			le.putAll(p);
			le.fromdate = o.fromdate;
			le.todate = o.todate;
			le.currdate = o.todate;
			le.amount = o.amount;
			le.amtpaid = o.amount;
			le.rate = o.rate;
			le.ratetype = o.ratetype;
			le.days = o.numdays;
			rentalLedger.create(le);
			ledgerid = le.objid;
		}	
		else {
			ledgerid = r.objid;
			rentalLedger.find( [objid: r.objid ] ).update( 
				[todate: o.todate, currdate:o.todate, amount: '{amount + :amt}', amtpaid:'{amtpaid + :amt}'], 
				[amt: o.amount ]  
			);
		}	
		//insert into rental payment
		def rr = [paymentid:pmt.objid, ledgerid: ledgerid, amount: o.amount, 
			surcharge: o.surcharge, interest:o.interest, discount:o.discount, fromdate: o.fromdate, todate:o.todate ];
		rentalPmt.create(rr);
	}

	void postUtilityPayment(def itm, def pmt, def o ) {
		utilityLedger.find([objid: o.ledgerid] ).update( [amtpaid: '{amtpaid + :amt}'], [amt: o.amount ] );
		def r = [paymentid:pmt.objid, ledgerid: o.ledgerid, amount: o.amount, surcharge: o.surcharge, interest:o.interest, discount:o.discount ];
		utilityFeePmt.create(r);
	}

	//insert first if the txntype and month does not exist
	void postOtherFeePayment(def itm, def pmt, def o ) {
		def ledgerid = o.ledgerid;
		if(! ledgerid ) {
			def z = [acctid:itm.acctid, year:o.year, month: o.month, txntypeid: o.txntype, amount: o.amount, amtpaid: 0  ];
			z.dtcreated = dateSvc.getServerDate();
			otherFeeLedger.create(z);
			ledgerid = z.objid;
		}
		otherFeeLedger.find([objid: ledgerid]).update( [amtpaid: '{amtpaid +:amt}' ], [amt: o.amount] );
		if(o.interest == null ) o.interest = 0;
		if(o.surcharge == null ) o.surcharge = 0;
		def r = [paymentid:pmt.objid, ledgerid: ledgerid, amount: o.amount, surcharge: o.surcharge, interest:o.interest, discount:o.discount ];
		otherFeePmt.create(r);
	}

	@After(pattern="CashReceiptService.post", eval="#{args[0].collectiontype?.handler == 'market'}")
	public void beforePostItems(def evt) {
		def e = evt.args[0];
		
		def pmt = [:];
		pmt.reftype = "cashreceipt";
		pmt.refno = e.receiptno;
		pmt.refid = e.objid;
		pmt.refdate = e.receiptdate;
		pmt.txndate = e.txndate;
		pmt.voided = 0;
		pmt.txnmode = e.txnmode;
		pmt.amount = e.amount;
		pmt = marketPmt.create(pmt);

		//check first if payment already exists in the ledger. if not, create ledger first
		//insert into payment rental,other fee and utility if applicable
		e.billitems.each { itm->
			itm.billitems.each { i->
				if( i.txntype == 'MARKETRENTAL') postRentalPayment( itm, pmt, i );
				else if(i.txntype.matches("WATER|ELECTRICITY")) postUtilityPayment( itm, pmt, i );
				else postOtherFeePayment( itm, pmt, i );
			}

			//find the lastdate paid
			def lastItem = itm.billitems.findAll{ it.txntype == 'MARKETRENTAL' && it.partialunpaid==0 }.max{ it.todate };
			def todate = lastItem.todate;

			def partial = 0;
			def partialItem = itm.billitems.find{it.partialunpaid > 0 };
			if( partialItem ) {
				partial = partialItem.partialunpaid;
			}

			marketAcct.find( [objid: itm.acctid ] ).update( [lastdatepaid: todate, partialbalance: partial ] );
		}

	}

	
}