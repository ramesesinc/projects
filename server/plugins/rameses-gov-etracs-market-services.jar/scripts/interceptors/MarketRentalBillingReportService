import com.rameses.annotations.*;
import java.text.*;
import com.rameses.functions.*;
import com.rameses.util.*;

class MarketRentalBillingReportService {
	
	@Service("MarketBillingService")
	def billingSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("market_account")
	def acctEm;
	
	/***************************************************************************************************************
	* compress items into format:  year, month, (fromday, today), rate, extrate, surcharge, interest, linetotal
	****************************************************************************************************************/
	@After(pattern="FormReportService.getData", eval="#{args[0].reportid == 'market_account_billing' }")
	public void getData( def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		result.status = 0;

		def acctid = p.parameters.acctid;
		
		def acct = acctEm.find([objid: acctid]).first();

		def pp = [acctid: acctid ];
		if( p.parameters.billdate ) {
			pp.payoption = [todate: p.parameters.billdate ];
		}
		def billing = billingSvc.getBilling( pp );

		def items = [];
		def cal = Calendar.instance;
		billing.items.findAll{ it.dynamic != true }.sort{ (it.year*12)+it.month }.each { cc->
			cal.setTime( cc.fromdate );
			def fromday = cal.get(Calendar.DAY_OF_MONTH);

			cal.setTime( cc.todate );
			def today = cal.get(Calendar.DAY_OF_MONTH);
			def item = [:];
			item.year = cc.year;
			item.month = cc.month;
			item.rate = cc.amount;
			item.extrate = (cc.extrate==null)?0:cc.extrate;
			item.fromday = fromday;
			item.today = today;
			item.days = cc.days;
			item.duedate = cc.duedate;
			item.surcharge = NumberUtil.round( (cc.surcharge == null) ? 0: cc.surcharge );
			item.interest = NumberUtil.round( (cc.interest == null) ? 0 : cc.interest );
			item.amount = item.rate + item.extrate;
			item.linetotal = NumberUtil.round(item.amount + item.surcharge + item.interest);
			items << item;
		}

		acct.items = items;
		acct.grandtotal =items.sum{ it.amount };
		acct.billdate = dateSvc.getServerDate();
		/*
		acct.fromdate = billing.fromdate;
		acct.todate = billing.todate;
		acct.totalrate = billing.totalrate;
		acct.totalextrate = billing.totalextrate;
		acct.totalamount = billing.totalamount;
		acct.totalsurcharge = billing.totalsurcharge;
		acct.totalinterest = billing.totalinterest;
		acct.grandtotal = billing.grandtotal;
		*/
		acct.hasitems = (acct.items) ? true : false;

		result.data = acct;
	}


}