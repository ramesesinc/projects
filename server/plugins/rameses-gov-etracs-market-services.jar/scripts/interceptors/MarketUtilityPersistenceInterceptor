import com.rameses.annotations.*;

class MarketUtilityPersistenceInterceptor{
	
	@DataContext("market_account")
	def acctEm;

	@After(pattern="PersistenceService.(create|update)", eval="#{ args[0]._schemaname == 'market_electricity' }")
	public void createUpdateElectricity(def evt) {
		def e = evt.args[0];
		println e;	

		def z = acctEm.find( [objid: e.acctid ] ).select("electricityreading").first(); 
		if( z.electricityreading != e._reading )
			throw new Exception("Prev reading must match the existing reading in the account")
		acctEm.find( [objid: e.acctid ] ).update( [electricityreading: e.reading] ); 	
	}

	@After(pattern="PersistenceService.(create|update)", eval="#{ args[0]._schemaname == 'market_water' }")
	public void createUpdateWater(def evt) {
		def e = evt.args[0];
		def z = acctEm.find( [objid: e.acctid ] ).select("waterreading").first(); 
		if( z.waterreading != e._reading )
			throw new Exception("Prev reading must match the existing reading in the account")
		acctEm.find( [objid: e.acctid ] ).update( [waterreading: e.reading] ); 	
	}
}