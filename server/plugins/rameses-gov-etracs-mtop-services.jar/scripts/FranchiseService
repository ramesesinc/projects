import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;

class FranchiseService extends ActiveCrudListService {

	@ActiveDB(value="franchise", em="mtop" )
	def em;

	@Service("SequenceService")
	def sequenceSvc

	@ProxyMethod
	public def getColumns( def o ) {
		return [
			[name:'franchiseno', caption:'Franchise No.'],
			[name:'motorno', caption:'Motor No.'],
			[name:'chassisno', caption:'Chassis No.'],
			[name:'plateno', caption:'Plate No.'],
			[name:'make', caption:'Make'],
			[name:'owner.name', caption:'Current Owner'],
			[name:'state', caption:'Application State'],
			[name:'remarks', caption:'Remarks']
		];
	}		

	void beforeList( params ) {
		params.filter = ''
		params.unittypeid =  params.unittype ? params.unittype.objid : '%' 
		if( params.showAvailableFranchise ) 
			params.filter = ' and f.mtopunit_objid IS NULL '   
	}

	@ProxyMethod 
	void generateFranchise( params ) {
		if( params.numFranchise <= 0 )
			throw new Exception( 'The number of franchise must be greater than zero.' )
		
		def sequenceobj = 'GEN_FRANCHISE_' + params.unittype.code + '_' + params.unittype.prefixcode
		def currentSeries = sequenceSvc.getCurrentSeries( sequenceobj )
		def endSeries = currentSeries + params.numFranchise
		def franchise
		for(int i=currentSeries; i<endSeries; i++) {
			franchise = [
				objid		  : 'F' + new UID(),
				unittype  : params.unittype, 
				franchiseno	  : params.unittype.prefixname + "$i".padLeft( params.unittype.franchisedigitno, '0' )
			]
			
			if( params.unittype.suffixtype == "OTHER" && params.unittype.suffixname != null )
				franchise.franchiseno = franchise.franchiseno + params.unittype.suffixname
			
			def f = em.findFranchiseByFranchiseNo( franchise);
			if( f ) throw new Exception("Franchise No. '${franchise.franchiseno}' is already exists.") 

			em.create( franchise ) 
		}
		 
		sequenceSvc.updateNextSeries( sequenceobj, endSeries )

	}


}
