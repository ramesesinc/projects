import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;
import com.rameses.util.*;


class OnlineRPTBilllingService
{
    @Service('DateService')
    def dtSvc 

    @Service('RPTBillingService')
    def billSvc

    @Service('RPTBillingReportService')
    def billReportSvc 

    @Service('RPTUtil')
    def util

    @Service('QueryService')
    def query 

    @Service('NumberService')
    def numSvc 

    def BARCODE_KEY = '56001';


    @ProxyMethod
    public def getBilling(params){
        params.ledger = validateLedger(params)
        def bill = buildBilling(initBill(params))

        bill.origin = 'filipizen'
        bill.txntype = 'rptcol'
        bill.refid = bill.billid
        bill.refno = bill.barcode 
        bill.payer = bill.taxpayer
        bill.paidby = bill.taxpayer.name 
        bill.paidbyaddress =bill.taxpayer.address 
        bill.particulars = 'Tax Payment of TD No. ' + bill.tdno + '. Period Covered: ' + bill.billperiod
        //--- additional info-------
        bill.info = [:]
        bill.info.rptledgerid = bill.rptledgerid 
        bill.info.billtoyear = bill.billtoyear 
        bill.info.billtoqtr = bill.billtoqtr 
        return bill 
    }

    def initBill(params){
        def ledger = params.ledger 
        def bill = billSvc.initBill(ledger.objid)

        if (params.billtoyear != null) {
            params.billtoyear = util.toInteger(params.billtoyear)
            params.billtoqtr = util.toInteger(params.billtoqtr)

            if (params.billtoyear < ledger.lastyearpaid)
                throw new Exception('Bill to year must be greater than or equal to ' + ledger.lastyearpaid + '.')

            if (params.billtoyear == ledger.lastyearpaid){
                if (params.billtoqtr < ledger.lastqtrpaid)
                    throw new Exception('Bill to quarter must be greater than or equal to ' + (ledger.lastqtrpaid + 1) + '.')
            }

            bill.billtoyear =params.billtoyear  
            bill.billtoqtr =params.billtoqtr  
        }

        bill = billSvc.generateBillByLedgerId3(bill)
        bill.rptledger.remove('faases')
        return bill 
    }

    @ProxyMethod
    public def buildBilling(bill){
        def billing = [:]
        billing.dtposted = bill.dtposted 
        billing.objid = bill.billid 
        billing.billid = bill.billid 
        billing.barcode = bill.barcode 
        billing.billdate = dtSvc.serverDate
        billing.rptledgerid = bill.rptledgerid 
        billing.billtoyear = bill.billtoyear 
        billing.billtoqtr = bill.billtoqtr 
        billing.taxpayer = bill.taxpayer
        billing.validuntil = dtSvc.format('yyyy-MM-dd', bill.validuntil)
        billing.expirydate = dtSvc.format('yyyy-MM-dd', bill.validuntil)
        billing.tdno = bill.rptledger.tdno
        billing.barangay = bill.rptledger.barangay
        billing.fullpin = bill.rptledger.fullpin
        billing.cadastrallotno = bill.rptledger.cadastrallotno
        billing.rputype = bill.rptledger.rputype
        billing.classcode = bill.rptledger.classcode
        billing.lastyearpaid = bill.rptledger.lastyearpaid
        billing.lastqtrpaid = bill.rptledger.lastqtrpaid

        def billedledger = billReportSvc.getBilledLedger(bill)
        billing.billitems = billedledger.items 
        billing.amount = billedledger.total 
        
        if (billing.amount <= 0.0) {
            def msg = 'A problem was encountered when generating the bill.\n'
            msg += 'Please proceed to Land Tax Office for assistance.'
            throw new Exception(msg)
        }
        buildPeriod(billing)
        return billing
    }


    void buildPeriod(billing){
        billing.fromyear = (billing.lastqtrpaid == 4 ? billing.lastyearpaid + 1 : billing.lastyearpaid)
        billing.fromqtr = (billing.lastqtrpaid == 4 ? 1 : billing.lastqtrpaid + 1)
        billing.toyear = billing.billtoyear 
        billing.toqtr = billing.billtoqtr 

        if (billing.fromyear == billing.toyear && billing.fromqtr == 1 && billing.toqtr == 4)
            billing.billperiod = billing.toyear
        else if (billing.fromyear == billing.toyear && billing.fromqtr == billing.toqtr)
            billing.billperiod = billing.fromqtr + 'Q, ' + billing.toyear
        else if (billing.fromyear == billing.toyear)
            billing.billperiod = billing.fromqtr + '' + billing.toqtr + 'Q, ' + billing.toyear 
        else if (billing.fromqtr == 1 && billing.toqtr == 4)
            billing.billperiod = billing.fromyear + '-' + billing.toyear 
        else if (billing.fromqtr == 1 && billing.toqtr != 4)
            billing.billperiod = billing.fromyear + '-' + billing.toqtr + 'Q,' + billing.toyear 
        else if (billing.fromqtr != 1 && billing.toqtr == 4)
            billing.billperiod = billing.fromqtr + 'Q,' + billing.fromyear + '-' + billing.toyear
        else 
            billing.billperiod = billing.fromqtr + 'Q,' + billing.fromyear + '-' + billing.toqtr + 'Q,' + billing.toyear
    }


    def validateLedger(params){
        if (!params.tdno) 
            throw new Exception('TD No. is required.')

        def msg = null;

        def q = [_schemaname:'rptledger']
        q.findBy = [tdno:params.tdno]
        def ledger = query.findFirst(q)

        if (!ledger) {
            msg = 'TD No. ' + params.tdno + ' does not exist.\n'
            msg += 'Verify that the you enter it correctly and submit again.' 
            throw new Exception(msg)
        }

        if ('CANCELLED'.equalsIgnoreCase(ledger.state)){
            msg = 'Ledger has already been cancelled.\n'
            msg += 'Please proceed to the Land Tax Office for assistance.'
            throw new Exception(msg)
        }

        if (util.isTrue(ledger.undercompromise)){
            msg = 'Ledger is under compromised.\n'
            msg += 'Please proceed to the Land Tax Office for assistance.'
            throw new Exception(msg)   
        }
        return ledger 
    }
}

