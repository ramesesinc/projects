import com.rameses.annotations.*;

import com.rameses.rules.common.*;
import vrs.facts.*;
import treasury.facts.*;


/**********************************************************
* This service handles computation of what fees to charge 
***********************************************************/
class VehicleApplicationBillingService {
	
	@Service("RuleExecutorService")
	def ruleSvc;

	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public def assess( def app ) {

		def facts = [];
		facts << new VehicleApplication(app);

		ruleSvc.execute( "vrsassessment", facts, null, null );

		def app = [:];
		app.items = facts.findAll{ it instanceof BillItem }.collect{ [item: it.account.toItem(), amount: it.amount ] };
		return app;
	}


	@ProxyMethod
	public def billing( def o ) {
		def dt = dateSvc.getServerDate();
		def facts = [];
		facts << new BillDate(dt);
		facts << new CurrentDate(dt);
		o.items.each {
			facts << new BillItem( account: it.item, amount: it.amount, txntype: 'fee' );
		}
		ruleSvc.execute( "vrsbilling", facts, null, null );
		def app = [:];
		app.items = facts.findAll{ it instanceof BillItem };
		return app;
	}

}