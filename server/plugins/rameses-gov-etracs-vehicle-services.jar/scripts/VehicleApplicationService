import com.rameses.annotations.*;
import vehicle.facts.*;
import treasury.facts.*;
import enterprise.facts.*;
import enterprise.utils.*;
import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import java.util.*;
import com.rameses.rules.common.RuleExecutionContext;

class VehicleApplicationService {
	
	@Env
	def env;

	@Service("DateService")
	def dateSvc;

	@DataContext(dynamic=true)
	def em;

	@DataContext("vehicle_application_fee")
	def appfeeEm;

	@Service("SequenceService")
	def seqSvc;

	@ProxyMethod
	public def init( def o ) {
		if( !o.vehicletype ) throw new Exception("vehicletype is required in VehicleApplicationService.initApplication");
		def entity = [:];
		entity.vehicletype = o.vehicletype;
		entity.apptype = o.apptype;
		entity.txnmode = 'ONLINE';
		entity.appyear = dateSvc.getServerYear();
        entity.appdate = dateSvc.getBasicServerDate();
        entity.owner = [:];
        entity.fees = [];
        entity.requirements = [];
        entity.infos = [];
		return entity;	
	}

	@ProxyMethod
	public def create( def o ) {
		if(!o.vehicletype )
			throw new Exception("vehicletype is required in vehicle application create");
		def svrDate =  dateSvc.getServerDate();
		o.txndate = svrDate;
		def txntype = o.vehicletype?.toUpperCase();
		String prefix = "V" + txntype[0] + o.appyear;
		o.appno =  prefix + seqSvc.getNextFormattedSeries( prefix );
		o.dtfiled = svrDate;
		o.filedby = [objid: env.USERID, name: env.FULLNAME];

		//check fees. do not persist surcharge, interest or discount.
		if(o.fees) {
			o.fees = o.fees.findAll{ !it.txntype.matches('surcharge|interest|discount') }
		};

		def vi = new VariableInfoUtil("vehicle_variable");
		if(o.infos) {
			o.infos.each {
				vi.fixData( it, it.datatype, it.value );
			}
		}
		def appEm = em.lookup( "vehicle_application_"+o.vehicletype )
		return appEm.create(o);
	}


}