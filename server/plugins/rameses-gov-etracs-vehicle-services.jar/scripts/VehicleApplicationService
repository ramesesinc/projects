import com.rameses.annotations.*;
import rules.vehicle.facts.*;
import rules.treasury.facts.*;
import treasury.utils.*;
import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import java.util.*;
import com.rameses.rules.common.RuleExecutionContext;

class VehicleApplicationService {
	
	@Env
	def env;

	@DataContext("vehicle_application")
	def appEm;

	@DataContext("vehicle_control")
	def controlEm;

	@Service("DateService")
	def dateSvc;

	@Service("RuleExecutorService")
	def ruleSvc;

	private def createInfoFact(  def o ) {
		def type = new VariableInfoType(objid:o.name, name: o.caption);
		if(o.datatype == 'decimal') {
			return new DecimalInfo( type:type, value:o.value );
		}
		else if(o.datatype=="integer") {
			return new IntegerInfo( type:type, value:o.value );
		}
		else if(o.datatype=="string") {
			return new StringInfo( type:type, value:o.value );
		}
		else if(o.datatype=="boolean") {
			return new BooleanInfo( type:type, value:o.value );
		}
	}

	@ProxyMethod
	public def assess( def o ) {
		if(!o.vehicletype) throw new Exception("vehicletype is required in VehicleAssessmentService.assess")
		def svrDate = dateSvc.getServerDate();
		if(!o.billdate) o.billdate = svrDate;
		if(!o.dtfiled) o.dtfiled = svrDate;

		//build facts
		def facts = [];
		if(o.payment) facts << new Payment( amount: o.payment );

		facts << new VehicleApplication( apptype: o.apptype, vehicletype: o.vehicletype );
		facts << new AppDate( o.dtfiled );
		facts << new BillDate(o.billdate);
		facts << new SystemDate(svrDate);

		if(o.infos) {
			println "adding info facts"
			o.infos.each {
				println it;
				facts << createInfoFact(it);
			}
		}

		def hdlr = { grpname ->
			if( RuleExecutionContext.currentContext.result.askinfos ) return false;
			return true;
		}
		def res = ruleSvc.execute( "vehiclebilling", facts, null, hdlr );

		//if there are askinfos, return immediately to client.
		if(res.askinfos) {
			println "yes has ask infos....";
			def askinfos = [];
			res.askinfos.each {
				def m =[:]; 
				m.datatype = it.datatype;
				m.caption = it.type.name;
				m.name = it.type.objid;
				m.value = it.value;
				askinfos << m;		
			}
			return [askinfos: askinfos];
		}

		//after executing display the items
		def lookupAcct = new LookupAccount();
		def app = [items:[]];
		def subitems = [];

		res.billitems.each {
			def m = [:];
			m.item =  lookupAcct.findAccount( it.account );
			m.amount = it.amount;
			m.amtpaid = 0.0;
			m.balance = it.amount;
			m.dynamic = it.dynamic;
			m.txntype = it.txntype;
			app.items << m;
		};

		def dd = facts.find{ it instanceof DueDate } ;
		app.duedate = dd?.date;
		return app;
	}

	@ProxyMethod
	public def post( def o ) {
		controlEm.find( [objid: o.control.objid] ).update( [vehicleid: m.vehicleid ] );
		return m;
	}

	


}