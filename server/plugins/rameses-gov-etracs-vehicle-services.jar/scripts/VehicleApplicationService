import com.rameses.annotations.*;
import com.rameses.rules.common.*;
import rules.vehicle.facts.*;
import rules.treasury.facts.*;
import treasury.utils.*;
import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import java.util.*;

class VehicleApplicationService {
	
	@Env
	def env;

	@DataContext("vehicle_application")
	def appEm;

	@DataContext("vehicle_control")
	def controlEm;

	@Service("DateService")
	def dateSvc;

	@Service("RuleExecutorService")
	def ruleSvc;

	@ProxyMethod
	public def assess( def o ) {
		if(!o.vehicletype) throw new Exception("vehicletype is required in VehicleAssessmentService.assess")
		def svrDate = dateSvc.getServerDate();
		if(!o.billdate) o.billdate = svrDate;
		def facts = [];
		facts << new VehicleApplication( apptype: o.apptype, vehicletype: o.vehicletype );
		facts << new CurrentDate(svrDate);
		facts << new BillDate(svrDate);
		facts << new DueDate( dateSvc.getServerYear() +"-01-20" );

		def res = ruleSvc.execute( "vehicleassessment", facts, null, null );

		//run billing immediately. 
		def ctx = new RuleExecutionContext(facts);
		ctx.result.billitems = res.billitems;
		res = ruleSvc.execute( "vehiclebilling", facts, null, null );

		//after executing display the items
		def lookupAcct = new LookupAccount();
		def app = [items:[]];
		def subitems = [];
		res.billitems.each {
			def m = [:];
			m.item =  lookupAcct.findAccount( it.account );
			m.amount = it.amount;
			m.amtpaid = 0.0;
			m.balance = it.amount;
			app.items << m;

			it.items.each { r->
				def x = [:];
				x.item =  lookupAcct.findAccount( r.account );
				x.amount = r.amount;
				x.amtpaid = 0.0;
				x.balance = r.amount;
				subitems << x;
			}
		};
		app.items += subitems;
		return app;
	}


	@ProxyMethod
	public def post( def o ) {
		controlEm.find( [objid: o.control.objid] ).update( [vehicleid: m.vehicleid ] );
		return m;
	}

	


}