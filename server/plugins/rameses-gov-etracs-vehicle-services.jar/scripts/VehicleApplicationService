import com.rameses.annotations.*;
import rules.vehicle.facts.*;
import rules.treasury.facts.*;
import rules.enterprise.facts.*;
import treasury.utils.*;
import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import java.util.*;
import com.rameses.rules.common.RuleExecutionContext;

class VehicleApplicationService {
	
	@Env
	def env;

	@DataContext("vehicle_application")
	def appEm;

	@DataContext("vehicle_control")
	def controlEm;

	@Service("DateService")
	def dateSvc;

	@Service("RuleExecutorService")
	def ruleSvc;

	@ProxyMethod
	public def assess( def o ) {
		if(!o.vehicletype) throw new Exception("vehicletype is required in VehicleAssessmentService.assess")
		def svrDate = dateSvc.getServerDate();
		if(!o.billdate) o.billdate = svrDate;
		if(!o.dtfiled) o.dtfiled = svrDate;

		//build facts
		def facts = [];
		if(o.payment) facts << new Payment( amount: o.payment );

		facts << new VehicleApplication( apptype: o.apptype, vehicletype: o.vehicletype );
		facts << new AppDate( o.dtfiled );
		facts << new BillDate(o.billdate);
		facts << new SystemDate(svrDate);

		if(o.infos) {
			def infoUtil = new VariableInfoUtil();
			o.infos.each {
				def f = infoUtil.createFact(it);
				facts << f;
			}
		}

		def hdlr = { grpname ->
			if( RuleExecutionContext.currentContext.result.askinfos ) return false;
			return true;
		}
		def res = ruleSvc.execute( "vehiclebilling", facts, null, hdlr );

		//if there are askinfos, return immediately to client.
		if(res.askinfos) {
			return [askinfos : res.askinfos.collect{ it.toMap() } ];
		}
		else {
			def app = [:];
			app.infos = res.infos;
			app.items = res.billitems.collect{ it.toMap() }
			app.duedate = facts.find{ it instanceof DueDate }?.date;

			return app;
		}
	}

	@ProxyMethod
	public def post( def o ) {
		controlEm.find( [objid: o.control.objid] ).update( [vehicleid: m.vehicleid ] );
		return m;
	}

	


}