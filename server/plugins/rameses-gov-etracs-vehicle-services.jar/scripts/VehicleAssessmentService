import com.rameses.annotations.*;
import rules.vehicle.facts.*;
import rules.treasury.facts.*;
import rules.enterprise.facts.*;
import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import java.util.*;
import com.rameses.rules.common.RuleExecutionContext;

class VehicleAssessmentService {
	
	@Env
	def env;

	@Service("DateService")
	def dateSvc;

	@Service("RuleExecutorService")
	def ruleSvc;

	@DataContext(dynamic=true)
	def franchiseEm;

	@ProxyMethod
	public def assess( def o ) {
		if(!o.vehicletype) throw new Exception("vehicletype is required in VehicleAssessmentService.assess")
		if(!o.franchise?.objid) throw new Exception("franchise.objid is required in VehicleAssessmentService.assess")

		def svrDate = dateSvc.getServerDate();
		if(!o.billdate) o.billdate = svrDate;
		if(!o.appdate) o.appdate = svrDate;

		//build facts
		def facts = [];
		facts << new VehicleApplication( apptype: o.apptype, vehicletype: o.vehicletype );
		facts << new AppDate( o.appdate );
		facts << new SystemDate(svrDate);

		def fran = franchiseEm.lookup( "vehicle_franchise_"+o.vehicletype ).find([objid: o.franchise.objid]).first();
		if(!fran) throw new Exception("Franchise control no. not found")
		facts <<  new VehicleFranchise( fran );

		if(o.infos) {
			def infoUtil = new VariableInfoUtil();
			o.infos.each {
				def f = infoUtil.createFact(it);
				facts << f;
			}
		}

		def hdlr = { grpname ->
			if( RuleExecutionContext.currentContext.result.askinfos ) return false;
			return true;
		}

		def res = ruleSvc.execute( "vehicleassessment", facts, null, hdlr );

		//if there are askinfos, return immediately to client.
		if(res.askinfos) {
			return [askinfos : res.askinfos.collect{ it.toMap() } ];
		}
		else {
			def app = [:];
			app.infos = res.infos;
			app.items = res.billitems.collect{ it.toMap() }
			app.duedate = facts.find{ it instanceof DueDate }?.date;

			return app;
		}
	}


}