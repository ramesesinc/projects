import com.rameses.annotations.*;
import vehicle.facts.*;
import treasury.facts.*;
import treasury.utils.*;
import enterprise.facts.*;
import enterprise.utils.*;
import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import java.util.*;
import com.rameses.rules.common.RuleExecutionContext;

class VehicleAssessmentService {
	
	@Env
	def env;

	@Service("DateService")
	def dateSvc;

	@Service("AssessmentRuleService")
	def assmtSvc;

	@DataContext(dynamic=true)
	def franchiseEm;

	@ProxyMethod
	public def assess( def o ) {
		if(!o.vehicletype) throw new Exception("vehicletype is required in VehicleAssessmentService.assess")
		if(!o.franchise?.objid) throw new Exception("franchise.objid is required in VehicleAssessmentService.assess")

		def fran = franchiseEm.lookup( "vehicle_franchise_"+o.vehicletype ).find([objid: o.franchise.objid]).first();
		if(!fran) throw new Exception("Franchise control no. not found")

		def svrDate = dateSvc.getServerDate();
		if(!o.billdate) o.billdate = svrDate;
		if(!o.appdate) o.appdate = svrDate;

		def fb = new FactBuilder();
		fb.variableInfoProvider = new VariableInfoProvider(
			schemaName:"vehicle_variable",
			createIntegerFact: { dd->
				return new VehicleIntegerInfo(dd);
			},
			createDecimalFact: {dd->
				return new VehicleDecimalInfo(dd);
			},
			createBooleanFact: {dd->
				return new VehicleBooleanInfo(dd);
			},
			createStringFact: {dd->
				return new VehicleStringInfo(dd);
			}
		);

		fb.facts << new VehicleApplication( o );
		fb.facts << new VehicleFranchise( fran );
		fb.facts << new AppDate( o.appdate );
		fb.facts << new treasury.facts.BillDate(o.appdate);

		def rh = [
			getFactKeyValue : { f ->
				if((f instanceof VariableInfo) || (f instanceof BillItem)) {
					fb.facts << f;
				}
				return null;
			}
		] as ResultHandler;
	
		def res = assmtSvc.execute( "vehicleassessment", o, fb, rh );
		if( res.askinfos ) return [askinfos: res.askinfos];

		/******************************************************
		* run billing here
		*******************************************************/
		rh = [
			getFactKeyValue: { f ->
				if( f instanceof DueDate ) {
					return new ResultKeyValue("duedate", f.date);
				}
				return null;
			}
		] as ResultHandler;

		if(!res.billitems) 
			throw new Exception("There are no billitems computed. Please review the rules");

		def data2 = [billitems: res.billitems, infos: res.infos ];

		res = assmtSvc.execute( "vehiclebilling", data2, fb, rh );
		def app = [:];
		app.infos = res.infos;
		app.items = res.billitems;
		app.duedate = res.duedate;
		app.expirydate = res.duedate;
		return app;
	}
}

