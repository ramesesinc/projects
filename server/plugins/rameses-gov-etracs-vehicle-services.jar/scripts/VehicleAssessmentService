import com.rameses.annotations.*;
import vehicle.facts.*;
import treasury.facts.*;
import treasury.utils.*;
import enterprise.facts.*;
import enterprise.utils.*;
import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import java.util.*;
import com.rameses.rules.common.*;

class VehicleAssessmentService {
	
	@Env
	def env;

	@Service("DateService")
	def dateSvc;

	@Service("AssessmentRuleService")
	def assmtSvc;

	@Service("VehicleBillingService")
	def billingSvc;

	@DataContext(dynamic=true)
	def franchiseEm;

	@ProxyMethod
	public def assess( def o ) {
		if(!o.vehicletype) throw new Exception("vehicletype is required in VehicleAssessmentService.assess")
		if(!o.franchise?.objid) throw new Exception("franchise.objid is required in VehicleAssessmentService.assess")

		def fran = franchiseEm.lookup( "vehicle_franchise_"+o.vehicletype ).find([objid: o.franchise.objid]).first();
		if(!fran) throw new Exception("Franchise control no. not found")

		def svrDate = dateSvc.getServerDate();
		if(!o.billdate) o.billdate = svrDate;
		if(!o.appdate) o.appdate = svrDate;

		def fb = new FactBuilder();
		fb.variableInfoProvider = new VariableInfoProvider(
			schemaName:"vehicle_variable",
			createIntegerFact: { return new VehicleIntegerInfo(); },
			createDecimalFact: { return new VehicleDecimalInfo(); },
			createBooleanFact: { return new VehicleBooleanInfo(); },
			createStringFact : { return new VehicleStringInfo(); }
		);

		//encode the franchise date, in case there is no franchise date yet
		if(o.startdate) fran.startdate = (new DateFact(o.startdate)).date;

		def vapp = new VehicleApplication( o );

		def infoFacts = [];
		infoFacts << vapp;
		infoFacts << new VehicleFranchise( fran );
		infoFacts << new AppDate( o.appdate );
		infoFacts << new treasury.facts.BillDate(o.appdate);

		fb.facts.addAll( infoFacts );
		
		def billFacts = []; 
		billFacts.addAll( infoFacts );

		def resultInfos = [];

		def dates = [:]
		def rh = [
			getFactKeyValue : { f ->
				if( f instanceof DueDate ) {
					if(f.tag == 'renewal') dates.expirydate = f.date;
					if(f.tag == 'franchise') dates.franchise = [expirydate: f.date];
				}
				else if( f instanceof BillItem  ) {
					f.billrefid = vapp.objid;
					billFacts << f;
				}
				else if(f instanceof VariableInfo) {
					if(! resultInfos.find{ it.name == f.name} ) {
						resultInfos << f.toMap();
					}
				}	
				return null;
			}
		] as ResultHandler;
	
		def res = assmtSvc.execute( "vehicleassessment", o, fb, rh );
		if( res.askinfos ) return [askinfos: res.askinfos];

		def billRes = billingSvc.execute( billFacts );

		def app = [:];
		app.infos = resultInfos;
		app.items = billRes.billitems;
		app.expirydate = dates.expirydate;
		if( dates.franchise?.expirydate ) app.franchise = dates.franchise;

		return app;
	}
}

