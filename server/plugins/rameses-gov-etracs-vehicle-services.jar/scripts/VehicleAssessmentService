import com.rameses.annotations.*;
import com.rameses.rules.common.*;
import vehicle.facts.*;
import treasury.utils.*;
import treasury.facts.*;
import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import java.util.*;

class VehicleAssessmentService {
	
	@DataContext("revenueitem")
	def revEm;

	@DataContext("vehicle_variable")
	def varEm;

	@Service("DateService")
	def dateSvc;

	@Service("RuleExecutorService")
	def ruleSvc;

	
	@ProxyMethod
	public def assess( def o ) {
		if(!o.txntype) throw new Exception("txntype is required in VehicleAssessmentService.assess")
		def svrDate = dateSvc.getServerDate();
		if(!o.billdate) o.billdate = svrDate;
		def facts = [];
		println "txntype is " + o.txntype;
		facts << new VehicleApplication( apptype: o.apptype, txntype: o.txntype );
		facts << new CurrentDate(svrDate);
		facts << new BillDate(svrDate);

		ruleSvc.execute( "vehicleassessment", facts, null, null );

		def lookupAcct = new LookupAccount();
		def items = facts.findAll{ it instanceof BillItem }.collect{ [item: it.account.toItem(), amount: it.amount ] };

		def app = [:];
		items.each {
			it.item =  lookupAcct.findAccount( it.item );
			it.amtpaid = 0.0;
			it.balance = it.amount - it.amtpaid;
		}
		app.items = items;
		return app;
	}


}