import com.rameses.annotations.*;

import com.rameses.rules.common.*;
import vehicle.facts.*;
import treasury.facts.*;
import treasury.utils.*;
import enterprise.facts.*;
import enterprise.utils.*;


/**********************************************************
* This service handles computation of what fees to charge 
***********************************************************/
class VehicleBillingService {
	
	@Service("RuleExecutorService")
	def ruleSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("vehicle_application")
	def appEm;

	@Service("AssessmentRuleService")
	def assmtSvc;

	@ProxyMethod
	public def getBilling( def o ) {
		//find application or vehicleid
		def vehicleid = null;
		def appid = null;
		if(o.appno) {
			def v = appEm.find( [appno: o.appno] ).first();
			appid = v.appid;
		}
		else if( o.appid ) {
			appEm.find( [appno: o.appno] ).first();
		}

	}

	@ProxyMethod
	public def process( def app ) {

		if(!app.billitems) {
			throw new Exception("VehicleBillingService requires billitems");
		}
		if(!app.apptype) throw new Exception("app type is required");
		if(!app.vehicletype) throw new Exception("vehicle type is required");	
		if(!app.franchise?.controlno) throw new Exception("franchise controlno  is required");	

		def svrDate = dateSvc.getServerDate();
		if(!app.billdate) app.billdate = svrDate;
		
		def fb = new FactBuilder();
		fb.facts << new VehicleApplication( app );
		fb.facts << new VehicleFranchise( app.franchise );
		fb.facts << new AppDate( app.appdate );
		fb.facts << new treasury.facts.SystemDate(svrDate);
		fb.facts << new treasury.facts.BillDate(app.billdate);
		if(app.payment?.amount) {
			fb.facts << new treasury.facts.Payment( amount: app.payment.amount );
		}	

		def rh = [
			getFactKeyValue: { f->
				if( f instanceof DueDate ) {
					return new ResultKeyValue( "duedate", f.date );
				}
			}
		] as ResultHandler;

		return assmtSvc.execute( "vehiclebilling", app, fb, rh );
	}

}