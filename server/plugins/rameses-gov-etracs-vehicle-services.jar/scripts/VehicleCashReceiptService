import com.rameses.annotations.*;

import com.rameses.rules.common.*;
import vehicle.facts.*;
import treasury.facts.*;
import treasury.actions.*;
import com.rameses.util.*;

/**********************************************************
* This service handles computation of what fees to charge 
***********************************************************/
class VehicleCashReceiptService {
	
	@DataContext("vehicle_application")
	def appEm;

	@DataContext("vehicle_application_fee")
	def feeEm;

	@DataContext("vehicle_franchise_fee")
	def franchiseFeeEm;

	@DataContext("revenueitem")
	def revEm;

	@DataContext(dynamic=true)
	def em;

	@Service("VehicleBillingService")
	def billingSvc;

	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public def getInfo( def o ) {
		if(!o.id) throw new Exception("id is required in VehicleCashReceiptService.getInfo");


		//find application...
		def app = appEm.find( [appno: o.id] ).first();
		if(!app) throw new Exception("Vehicle application not found!");

		def vt = em.lookup( "vehicle_application_"+app.vehicletype+"_task" );
		def state = vt.find( [refid: app.objid] ).select("state").val();	
		if(state!='for_payment')	
			throw new Exception("application state must be for payment");
		
		def fees = feeEm.find( [appid: app.objid] ).where("amount - amtpaid > 0").list();
		if( !fees )
			throw new Exception("There are no unpaid items");
		fees.each { 
			it.ledgertype = 'application'; 
			it.principal = it.amount;
			it.amount = (it.amount - it.amtpaid);
		}	

		if( app.controlid ) {
			def vfees = franchiseFeeEm.find( [parentid: app.controlid] ).where( "amount - amtpaid > 0 ").list();
			vfees.each {
				it.ledgertype = 'franchise'; 
				it.principal = it.amount;
				it.amount = (it.amount - it.amtpaid);
				fees << it;
			}
		}

		//run the billing here...
		def p = [:];
		p.putAll(o);	
		p.application = [apptype: app.apptype, vehicletype: app.vehicletype];
		p.billitems = fees;
		def res = billingSvc.process(p);

		def entity = [:];
		entity.payer = app.owner;
		entity.appid = app.objid;
		entity.vehicletype = app.vehicletype;
		entity.paidby = app.owner.name;
		entity.paidbyaddress = app.owner.address?.text; 	
		entity.particulars = app.particulars;
		entity.items = res.billitems.collect{ it.toMap() };
		return entity;
	}

}