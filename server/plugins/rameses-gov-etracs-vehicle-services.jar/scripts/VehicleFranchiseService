import com.rameses.annotations.*;

import com.rameses.util.*;
import java.text.*;
import java.util.regex.*;
import rules.treasury.facts.*;
import rules.vehicle.facts.*;

/**********************************************************
* This service maintains generation of control nos.
***********************************************************/
class VehicleFranchiseService {
	
	@DataContext("vehicletype")
	def vt;

	@DataContext(dynamic=true)
	def em;

	@Service("DateService")
	def dateSvc;

	@Service("RuleExecutorService")
	def ruleSvc;

	@Env
	def env;

	def pattern = Pattern.compile("\\[.*?\\]");

	public def formatNumber( def d, def handler, int num ) {
	    def m = pattern.matcher( d );
	    def sb = new StringBuilder();
	    int start = 0;
	    
	    while(m.find()) {
	        int end = m.start();
	        sb.append( d.substring(start, end)  );
	        String mg = m.group();
	        mg = mg.substring(1, mg.length()-1);
	        sb.append( handler(mg, num) );
	        start = m.end();
	    }
	    if( start < d.length() ) sb.append(d.substring(start));
	    return sb.toString();
	}

	@ProxyMethod
	public void generate( def o ) {
		if(!o.qty) throw new Exception("Please indicate qty in VehicleFranchiseService");
		if(!o.vehicletype) throw new Exception("Please indicate vehicletype in VehicleFranchiseService");

		def vehicletype = o.vehicletype.toLowerCase();

		def g = vt.find( [objid: vehicletype] ).first();
		if(!g) throw new Exception("vehicletype " + vehicletype + " not found");
		if(!g.controlpattern) throw new Exception("controlpattern is required in vehicletype");

		int issued = g.issued;
		int qty = (o.qty+"").toInteger();
		def dt = dateSvc.getServerDate();

		def handler = { pttn, num ->
			if( pttn == "org") {
				return env.ORGCODE;
			}
			else if(pttn.startsWith("%")) {
				return String.format( pttn, num );
			}
			else {
				def df = new java.text.SimpleDateFormat( pttn );
				return df.format( dt );
			}
			return ret;
		}
		
		def franchiseEm = em.lookup("vehicle_franchise_"+vehicletype);

		for(int i=(issued+1); i < (qty+issued+1); i++ ) {
			def m = [vehicletype: g.objid];
		    m.controlno = formatNumber( g.controlpattern, handler, i );
		    m.state = 'OPEN';
			franchiseEm.create( m );
		}

		//update the issued
		vt.find( [objid: vehicletype] ).update( [issued: issued + qty] );
	}


	
}