import com.rameses.annotations.*;

import com.rameses.util.*;
import java.text.*;
import java.util.regex.*;
import treasury.facts.*;
import vehicle.facts.*;

/**********************************************************
* This service maintains generation of control nos.
***********************************************************/
class VehicleFranchiseService {
	
	@DataContext("vehicletype")
	def vt;

	@DataContext("vehicletype_cluster")
	def vtc;

	@DataContext("vehicle_franchise")
	def franchiseEm;

	@Service("DateService")
	def dateSvc;

	@Env
	def env;

	@Service("ControlNoGeneratorService")
	def controlNoGenerator;
	

	@ProxyMethod
	public void generate( def o ) {
		if(!o.qty) throw new Exception("Please indicate qty in VehicleFranchiseService");
		if(!o.vehicletype) throw new Exception("Please indicate vehicletype in VehicleFranchiseService");

		def vehicletype = o.vehicletype.toLowerCase();
		def cluster = o.cluster;

		//find the control pattern, located in vehicle
		def g = vt.find( [objid: vehicletype] ).first();
		if(!g) throw new Exception("vehicletype " + vehicletype + " not found");
		if(!g.controlpattern) throw new Exception("controlpattern is required in vehicletype");

		//find the qty issued found in cluster
		int issued = 0;
		if( !cluster ) {
			issued = g.issued;
		}
		else {
			def h = vtc.find( [objid: cluster.objid ] ).first();
			if(!h) throw new Exception("cluster " + cluster.objid + " not found");
			issued = h.issued;
		}

		int qty = (o.qty+"").toInteger();
		def dt = dateSvc.getServerDate();

		def handler = { pttn, num ->
			if( pttn == "org") {
				return env.ORGCODE;
			}
			else if( pttn == "cluster") {
				if( !cluster?.code ) return "";
				return cluster.code;
			}
			else if(pttn.startsWith("%")) {
				return String.format( pttn, num );
			}
			else {
				def df = new java.text.SimpleDateFormat( pttn );
				return df.format( dt );
			}
			return ret;
		}
		
		for(int i=(issued+1); i < (qty+issued+1); i++ ) {
			def m = [vehicletypeid: g.objid];
			m.cluster = cluster;
		    m.controlno = controlNoGenerator.formatNumber( g.controlpattern, handler, i );
		    m.state = 'OPEN';
			franchiseEm.create( m );
		}

		//update the issued in cluster or vehicle type
		if(!cluster) {
			vt.find( [objid: vehicletype] ).update( [issued: issued + qty] );
		}
		else {
			vtc.find( [objid: cluster.objid ] ).update( [issued: issued + qty] );
		}
		
	}


}