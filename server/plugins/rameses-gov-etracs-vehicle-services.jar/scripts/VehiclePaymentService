import com.rameses.annotations.*;

import com.rameses.rules.common.*;
import com.rameses.util.*;

/**********************************************************
* This service handles computation of what fees to charge 
***********************************************************/
class VehiclePaymentService {
	
	@DataContext("vehicle_payment")
	def pmtEm;

	@DataContext("vehicle_payment_item")
	def pmtItemEm;

	@DataContext("vehicle_application")
	def appEm;

	@DataContext("vehicle_franchise")
	def franchiseEm;

	@DataContext("vehicle_application_fee")
	def appFeeEm;

	@DataContext("vehicle_franchise_fee")
	def franchiseFeeEm;

	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public def init( def o ) {
		//test first for appid, next franchiseid
		def franchiseid = null;
		def appid = null;
		def app = appEm.find([objid: o.objid]).first();
		if(!app) {
			def f = franchiseEm.find( [objid: o.objid] ).first();
			if( f ) {
				franchiseid = f.objid;
				if(f.appid) appid = f.appid;
			}
		}
		else {
			appid = app.objid;
			franchiseid = app.controlid;	
		}

		def e = [items:[]];
		e.appid = appid;
		e.franchiseid = franchiseid;
		e.voided = 0;
		
		e.items.addAll( franchiseFeeEm.select( "franchiserefid:{objid},item.*,amtdue:{amount-amtpaid}" ).find([parentid: franchiseid])
			.where(" amount - amtpaid > 0 ").list());
		if(appid) {
			e.items.addAll( appFeeEm.select( "apprefid:{objid},item.*,amtdue:{amount-amtpaid}" ).find([appid: appid])
			.where(" amount - amtpaid > 0 ").list());
		}
		e.items.each {
			it.parent = e;
			it.discount = 0;
			it.amount = 0;
			it.total = 0;
		};
		return e;
	}

	@ProxyMethod
	public def post( def m) {
		if(!m.txndate) {
			m.txndate = dateSvc.getServerDate();
		}
		pmtEm.create( m );
		m.items.findAll{ it.apprefid }.each {
			if(!it.discount) it.discount = 0;
			appFeeEm.find( [objid: it.apprefid ] ).update( [amtpaid: '{amtpaid+:amtpaid}' ], [amtpaid: it.amount + it.discount ] );
		}
		m.items.findAll{ it.franchiserefid }.each {
			if(!it.discount) it.discount = 0;
			franchiseFeeEm.find( [objid: it.franchiserefid ] ).update( [amtpaid: '{amtpaid+:amtpaid}' ], [amtpaid: it.amount + it.discount ] );
		}
	}

	@ProxyMethod
	public def postVoid( def o ) {
		def r = pmtEm.find( [objid: o.objid] ).first();
		if( r.voided == 1 )
			throw new Exception("This payment is already voided");
			
		//check first the status of the application
			
		def pmtitems = pmtItemEm.find( [parentid: r.objid] ).list();
		pmtitems.each {
			if(it.apprefid) {
				appFeeEm.find( [objid: it.apprefid ] ).update( [amtpaid: '{amtpaid-:amtpaid}' ], [amtpaid: it.amount + it.discount ] );
			}
			else if( it.franchiserefid) {
				franchiseFeeEm.find( [objid: it.franchiserefid ] ).update( [amtpaid: '{amtpaid-:amtpaid}' ], [amtpaid: it.amount + it.discount ] );
			}
		}
		pmtEm.find([objid: r.objid] ).update( [voided: 1]);
	}


}