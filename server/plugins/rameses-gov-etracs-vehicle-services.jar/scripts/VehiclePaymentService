import com.rameses.annotations.*;

import com.rameses.rules.common.*;
import vehicle.facts.*;
import treasury.facts.*;
import treasury.actions.*;

/**********************************************************
* This service handles computation of what fees to charge 
***********************************************************/
class VehiclePaymentService {
	
	@DataContext("vehicle_payment")
	def pmtEm;

	@DataContext("vehicle_application")
	def appEm;

	@DataContext("vehicle_application_fee")
	def appFeeEm;

	@ProxyMethod
	public def postPayment( def m) {
		pmtEm.create( m );
		appEm.find( [objid:m.appid ] ).update( [state:'PAID', amtpaid: '{amtpaid+:amtpaid}' ], [amtpaid: m.amount] );
	}

	@ProxyMethod
	public def postVoid( def o ) {
		def r = pmtEm.find( [refid: o.objid] ).first();

		//check first the status of the application
		def status = appEm.find( [objid:r.appid ] ).select("state").val();
		if(! status.equalsIgnoreCase('PAID') )	
			throw new Exception('Transaction cannot be voided because the application status is ' + status  );

		appEm.find( [objid:r.appid ] ).update( [state:'PENDING', amtpaid: '{amtpaid-:amtpaid}' ], [amtpaid: r.amount] );
		pmtEm.find([objid: r.objid] ).update( [voided: 1]);
	}


}