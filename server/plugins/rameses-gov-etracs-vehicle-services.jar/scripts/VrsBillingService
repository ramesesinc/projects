import com.rameses.annotations.*;

import com.rameses.rules.common.*;
import vrs.facts.*;
import treasury.facts.*;
import treasury.actions.*;

class VrsBillingService {
	
	@Service("RuleExecutorService")
	def ruleSvc;

	@DataContext("vrs_application")
	def app;

	@DataContext("vrs_application_fee")
	def appfee;

	@DataContext("itemaccount")
	def itemAcct;

	@Service("DateService")
	def dateSvc;

	//for billing 
	def buildBillingFacts(def facts, def o) {
		def currDate = dateSvc.getServerDate();
		facts << new EffectiveDate( currDate );
		facts << new CurrentDate(currDate);
		facts << new BillDate((!o?.billdate)?currDate:o?.billdate);
		//calculate the due date. default is jan 20 for the year.
		facts << new DueDate( dateSvc.getServerYear() +"-01-20"  );
	}

	def buildActions(def res) {
		def actions = new RuleAction();
		actions.addCommand( "compute-discount", new ComputeDiscount(res: res)); 
		actions.addCommand( "compute-surcharge", new ComputeSurcharge(res:res));
		actions.addCommand( "compute-interest", new ComputeInterest(res:res));
		return actions;
	}

	/***********************************************************************
	* this is called by VrsAssessmentService
	***********************************************************************/
	@ProxyMethod(local=true)
	public void processAssessmentBill( def facts, def res, def o ) {
		buildBillingFacts( facts, o );
		def actions = buildActions(res);
		ruleSvc.execute( "vrsbilling", facts, actions, null );
	}

	//find application by appno or by objid
	def findApp(def o) {
		def p = null;    
		if( o.objid ) {
			p = [objid: o.objid];
		}
		else if(o.appno) {
			p = [appno:o.appno];
		}
		if(!p )
		    throw new Exception('Please specify objid or appno');
		def m = app.find( p ).first();
		if( !m ) 
			throw new Exception("Vehicle Application not found");
		return m;	
	}


	/***********************************************************************
	* this is called by other services. This returns the billing head 
	* and its items
	***********************************************************************/
	@ProxyMethod
	public def getBilling( def o ) {
		println "enter vrs billing";
		//get the head. then get the receivables
		def app = findApp( o );
		def feeList = appfee.find([parentid: app.objid]).where('amount - amtpaid > 0').list();	
		if(!feeList)
		   throw new Exception("There are no upaid items for this application");

		//prepare an item account lookup
		def acctMap = [:];
		def lookupAcct = { obj->
			def id = obj.objid;
		    if( !acctMap.containsKey(id)) {
		    	def a = itemAcct.find([objid:id]).first();
		    	if(!a) throw new Exception("Cannot find item account id " +obj.title);
		    	acctMap.put(id, a);
		    }
	    	return acctMap.get(id);
		}

		//setup resource  
		def res = [:];
		res.billItemList = new BillItemList();

		//build the facts   
		def facts = [];
		facts << new VrsApplication(app);
		feeList.each {
			def bi = new BillItem();
			bi.refid = it.objid;
			bi.item = it;
			bi.account = new Account( lookupAcct(it.item) );
			bi.amount = it.amount - it.amtpaid;
			bi.amtdue = bi.amount;
			bi.sortorder = it.sortorder;
			res.billItemList.addItem( bi );
		}
		facts.addAll( res.billItemList.items ); 
		
		buildBillingFacts( facts, o );
		def actions = buildActions(res);

		//check if there is payment option, use this handler 
		//if the payoption is partial
		def handler = null;
		if(o.payOption?.type=='PARTIAL') {
			handler = { n->
				if(n=='payment') {
					//apply the partial payment.
					res.billItemList.applyPayment(  o.payOption.amount );
				}	
			};
		}

		ruleSvc.execute( "vrsbilling", facts, actions, handler );
		app.billitems = res.billItemList.buildBillItems();
		app.items = res.billItemList.buildReceiptItems();
		app.amount = app.items.sum{ it.amount };

		return app;
	}
}