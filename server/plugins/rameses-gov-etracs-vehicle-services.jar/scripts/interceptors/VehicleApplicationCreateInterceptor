import com.rameses.annotations.*;
import java.rmi.server.UID;

/**************************************************************************************
* This interceptor is exclusively for VehicleApplicationService.create method
* This is called upon creating the application for NEW, RENEW, DROP, CHANGE_OWNER_UNIT 
***************************************************************************************/
class VehicleApplicationCreateInterceptor {
	
	@Env
	def env;

	@Service("DateService")
	def dateSvc;

	@Service("WorkflowTaskService")
	def wfSvc;

	@Service("VehicleFranchiseService")
	def franchiseSvc;

	@DataContext(dynamic=true)
	def em;

	
	/********************************************
	* start the appropriate workflow
	********************************************/
	private void startWorkflow( def o ) {
		o.processname = 'vehicle_application_'+o.vehicletype.toLowerCase(); 
		o.refid = o.objid;
		wfSvc.start(o);
	}

	public void checkHasFees( def o ) {
		if(!o.fees) throw new Exception("There must be at least 1 fee");
	} 



	/***********************************************************************
	* for capture, it cannot displace info in the franchise data if exists
	************************************************************************/
	@After(pattern="VehicleApplicationService.create", eval="#{result.apptype.matches('NEW|RENEW') && result.txnmode=='CAPTURE'}", index=10)
	public void afterCreateApplicationCapture(def evt) {
		def entity = evt.result;
		def franchiseEm = em.lookup("vehicle_franchise_"+ entity.vehicletype);
		def z = franchiseEm.find([objid: entity.franchise.objid]).first();	
		if(z.activeyear==null || entity.appyear > z.activeyear ) {
			franchiseSvc.updateFranchiseInfo( entity, 'ACTIVE' );
		}
	}

	@After(pattern="VehicleApplicationService.create", 
		eval="#{result.apptype.matches('NEW|RENEW|CHANGE_OWNER_UNIT') && result.txnmode!='CAPTURE'}", index=10)
	public void afterCreateApplicationNewOrRenew(def evt) {
		def entity = evt.result;
		checkHasFees(entity);
		franchiseSvc.updateFranchiseState( [controlid: entity.franchise.objid, 
			vehicletype:entity.vehicletype, state:'PENDING', appid: entity.objid ] );
		startWorkflow( entity );
	}

	@After(pattern="VehicleApplicationService.create", eval="#{result.apptype == 'DROP' }", index=10)
	public void afterCreateApplicationForDrop(def evt) {
		def o = evt.result;
		franchiseSvc.nullifyFranchiseInfo( [controlid: o.franchise.objid, vehicletype:o.vehicletype] );
	}


}