import com.rameses.annotations.*;
import java.rmi.server.UID;
import com.rameses.util.*;

/**************************************************************************************
* This interceptor is exclusively for VehicleApplicationService.create method
* This is called upon creating the application for NEW, RENEW, DROP, CHANGE_OWNER_UNIT 
***************************************************************************************/
class VehicleApplicationCreateInterceptor {
	
	@Env
	def env;

	@Service("WorkflowTaskService")
	def taskSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("vehicle_franchise")
	def franchiseEm;

	@DataContext("vehicle_application")
	def appEm;

	@After(pattern="VehicleApplicationService.create",
		eval="#{ result.txnmode=='CAPTURE' && result.apptype.matches('NEW|RENEW')}", index=10)
	public void afterCreateApplicationCapture(def evt) {
		def entity = evt.result;
		def z = franchiseEm.find([objid: entity.franchise.objid]).first();	
		if(z.activeyear==null || entity.appyear > z.activeyear ) {
			def m =[:];
			m.activeyear = entity.appyear;
			m.state = "ACTIVE";
			m.appid = entity.objid;
			m.startdate = entity.startdate;	
			if( !m.expirydate && m.startdate ) {
				def expiryYrs = '3y';
				def df = new java.text.SimpleDateFormat("yyyy-MM-dd");
				m.expirydate = DateUtil.add( df.parse( m.startdate ), expiryYrs );	
			}
			franchiseEm.find([objid: entity.franchise.objid]).update(m);
		}
	}

	@Before(pattern="VehicleApplicationService.create", 
		eval="#{args[0].txnmode!='CAPTURE' && args[0].apptype.matches('NEW|RENEW|CHANGE_OWNER_UNIT')}")
	public void beforeCreateApplicationNewOrRenew(def evt) {
		def entity = evt.args[0];
		if(!entity.fees) 
			throw new Exception("There must be at least 1 fee");
	}

	@After(pattern="VehicleApplicationService.create", 
		eval="#{result.txnmode!='CAPTURE' && result.apptype.matches('NEW|RENEW|CHANGE_OWNER_UNIT')}")
	public void afterCreateApplicationNewOrRenew(def evt) {
		def entity = evt.result;
		//fire the workflow
		def p = [:];
		p.processname = 'vehicle_application';
		p.refid = entity.objid;
		p.startdate = dateSvc.serverDate;
		taskSvc.start(p);
	}

	@After(pattern="VehicleApplicationService.create", eval="#{result.apptype == 'DROP' }")
	public void afterCreateApplicationForDrop(def evt) {
		def o = evt.result;
		def m = [:];
		m.state = 'OPEN';
		m.appid = null;
		m.activeyear = null;
		m.startdate = null;
		m.expirydate = null;
		franchiseEm.find( [objid:o.franchise.objid ] ).update(m);
	}

}