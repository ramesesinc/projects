import com.rameses.annotations.*;
import java.rmi.server.UID;
import com.rameses.util.*;

/**************************************************************************************
* This interceptor is exclusively for VehicleApplicationService.create method
* This is called upon creating the application for NEW, RENEW, DROP, CHANGE_OWNER_UNIT 
***************************************************************************************/
class VehicleApplicationCreateInterceptor {
	
	@Env
	def env;

	@Service("WorkflowTaskService")
	def taskSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("vehicle_franchise")
	def franchiseEm;

	@DataContext("vehicle_application")
	def appEm;

	@Before(pattern="VehicleApplicationService.create", 
		eval="#{args[0].txnmode!='CAPTURE' && args[0].apptype.matches('NEW|RENEW|LATE_RENEWAL|CHANGE_OWNER_UNIT')}")
	public void beforeCreateApplicationNewOrRenew(def evt) {
		def entity = evt.args[0];
		if(!entity.fees) 
			throw new Exception("There must be at least 1 fee");
	}

	@Before(pattern="VehicleApplicationService.create", eval="#{ args[0].apptype.matches('NEW|RENEW|LATE_RENEWAL')}", index=10)
	public void beforeCreateApplicationNewRenewLateRenewal(def evt) {
		def entity = evt.args[0];
		if( entity.franchise ) {
			def fran = franchiseEm.find([objid: entity.franchise.objid]).first();
			entity.controlid = fran.objid;
			entity.prevappid = fran.appid;
			entity.franchise = fran;
		}
	}

	//update the franchise info if capture or 
	@After(pattern="VehicleApplicationService.create", eval="#{ args[0].apptype.matches('NEW|RENEW|LATE_RENEWAL') }", index=10)
	public void afterCreateApplicationCapture(def evt) {
		def entity = evt.result;
		if( entity.franchise ) {
			def m =[:];
			m.activeyear = entity.appyear;
			m.state = "ACTIVE";
			m.appid = entity.objid;
			if( entity.startdate ) {
				//do not change if there is no start date in franchise.
				m.startdate = entity.startdate;		
			}
			if( entity.franchise?.expirydate ) {
				m.expirydate = entity.franchise?.expirydate;	
			}
			franchiseEm.find([objid: entity.franchise.objid]).update(m);
		}
	}

	@After(pattern="VehicleApplicationService.create", 
		eval="#{result.txnmode!='CAPTURE' && args[0].apptype.matches('NEW|RENEW|CHANGE_OWNER_UNIT')}")
	public void afterCreateApplicationNewOrRenew(def evt) {
		def entity = evt.result;
		//fire the workflow
		def p = [:];
		p.processname = 'vehicle_application';
		p.refid = entity.objid;
		p.startdate = dateSvc.serverDate;
		taskSvc.start(p);
	}

	@After(pattern="VehicleApplicationService.create", eval="#{args[0].apptype == 'DROP' }")
	public void afterCreateApplicationForDrop(def evt) {
		def o = evt.result;
		def m = [:];
		m.state = 'OPEN';
		m.appid = null;
		m.activeyear = null;
		m.startdate = null;
		m.expirydate = null;
		franchiseEm.find( [objid:o.franchise.objid ] ).update(m);
	}

}