import com.rameses.annotations.*;
import java.rmi.server.UID;

/**************************************************************************************
* This interceptor is exclusively for VehicleApplicationService.create method
* This is called upon creating the application for NEW, RENEW, DROP, CHANGE_OWNER_UNIT 
***************************************************************************************/
class VehicleApplicationCreateInterceptor {
	
	@Env
	def env;

	@Service("DateService")
	def dateSvc;

	@Service("WorkflowTaskService")
	def wfSvc;

	@DataContext(dynamic=true)
	def em;

	/**************************************************
	* update the franchise info only if current year
	***************************************************/
	private void updateFranchiseInfo( def o, def state ) {
		def m = [:];
		def str = "objid|appno|appdate|txnmode|appyear|vehicletype|controlid|dtfiled|filedby.*|owner.*|particulars|barangay.*|billexpirydate|fees|infos|requirements|franchise.*|txndate";
		o.each { k,v->
			if(!k.matches( str )) {
				m.put(k, v);
			}
		}

		//update the other infos here...
		m.activeyear = o.appyear;
		m.state = state;
		m.owner = o.owner;
		m.barangay = o.barangay;
		m.appid = o.objid;

		def franchiseEm = em.lookup("vehicle_franchise_"+ o.vehicletype);
		franchiseEm.find([objid: o.franchise.objid]).update(m);	
	}

	private void nullifyFranchiseInfo( def o ) {
		def m = [:];
		m.state = 'OPEN';
		m.owner = null;
		m.barangay = null;
		m.appid = null;
		def franchiseEm = em.lookup("vehicle_franchise_"+ o.vehicletype);
		def str = "objid|state|cluster|controlno|vehicletype|expirydate|dtregistered|activeyear|owner.*|barangay.*";
		def g = franchiseEm.find( [objid: o.controlid] ).first();
		g.each { k,v->
			if( !k.matches(str)) {
				m.put(k, null);
			}
		}
		franchiseEm.find([objid: o.controlid]).update(m);	
	}

	/********************************************
	* start the appropriate workflow
	********************************************/
	private void startWorkflow( def o ) {
		o.processname = 'vehicle_application_'+o.vehicletype.toLowerCase(); 
		o.refid = o.objid;
		wfSvc.start(o);
	}

	public void checkHasFees( def o ) {
		if(!o.fees) throw new Exception("There must be at least 1 fee");
	} 

	/***********************************************************************
	* for capture, it cannot displace info in the franchise data if exists
	************************************************************************/
	@After(pattern="VehicleApplicationService.create", eval="#{result.apptype.matches('NEW|RENEW') && result.txnmode=='CAPTURE'}", index=10)
	public void afterCreateApplicationCapture(def evt) {
		def entity = evt.result;
		def franchiseEm = em.lookup("vehicle_franchise_"+ entity.vehicletype);
		def z = franchiseEm.find([objid: entity.franchise.objid]).first();	
		if(z.activeyear==null || entity.appyear > z.activeyear ) {
			updateFranchiseInfo( entity, 'ACTIVE' );
		}
	}

		
	@After(pattern="VehicleApplicationService.create", eval="#{result.apptype.matches('NEW|RENEW') && result.txnmode!='CAPTURE'}", index=10)
	public void afterCreateApplicationNewOrRenew(def evt) {
		def entity = evt.result;
		checkHasFees(entity);
		updateFranchiseInfo( entity, 'PENDING' );
		startWorkflow( entity );
	}

	@After(pattern="VehicleApplicationService.create", eval="#{result.apptype == 'CHANGE_OWNER_UNIT'}", index=10)
	public void afterCreateApplicationForChangeOwner(def evt) {
		def entity = evt.result;
		def p = evt.args[0];
		checkHasFees(entity);
		updateFranchiseInfo( entity, 'PENDING' );
		startWorkflow( entity );
	}

	//auto drop if there are no fees. No need for workflow either.
	@After(pattern="VehicleApplicationService.create", eval="#{result.apptype == 'DROP' }", index=10)
	public void afterCreateApplicationForDrop(def evt) {
		def o = evt.result;
		def p = evt.args[0];
		if(p.fees) {
			nullifyFranchiseInfo(o);
			startWorkflow( o );
		}
		else {
			//def d = [state:'OPEN', appid: null];
			//franchiseEm.find([objid: o.franchise.objid]).update( d );
		}
	}


}