import com.rameses.annotations.*;
import java.rmi.server.UID;

/****************************************************************************
* This interceptor is exclusively for VehicleApplicationService.init method
* init is called during:
*   NEW, RENEW, DROP, CHANGE_OWNER_UNIT
*****************************************************************************/
class VehicleApplicationInitInterceptor {
	
	@Env
	def env;

	@DataContext(dynamic=true)
	def em;

	@DataContext("vehicle_fee")
	def vFee;

	@Service("DateService")
	def dateSvc;

	private void checkUnpaidFees( def o ) {
		def tot = vFee.find([controlid: o.franchise.objid]).select("t:{SUM(amount - amtpaid)}").val();
		if( tot!=null && tot > 0 ) {
			throw new Exception("There is still unpaid balance that needs to be settled");
		}
	}

	//THIS IS CALLED BY RENEW, DROP AND CHANGE UNIT
	private void loadFranchiseInfo( def franchiseno, def entity ) {
		if( !franchiseno ) throw new Exception("franchiseno is required in VehicleApplicationService.init");

		def f = em.lookup("vehicle_franchise_"+ entity.vehicletype).find( [controlno: franchiseno ] ).first();
		if(!f) 
			throw new Exception(franchiseno + " does not exist");
		if(f.state!='ACTIVE') 
			throw new Exception("Cannot process. Franchise " + franchiseno + " is not in ACTIVE state. Please check and release pending application");

		f.each { k,v->
			if(!k.matches( "objid|state|cluster|controlno|expirydate|appid|dtregistered" )) {
				entity.put(k, v);
			}
		}
        entity.appyear = f.activeyear;
        entity.franchise = [objid:f.objid, controlno: f.controlno, expirydate: f.expirydate];
	}

	@After(pattern="VehicleApplicationService.init", eval="#{args[0].apptype == 'RENEW'}", index=10)
	public void afterInitApplicationForRenew(def evt) {
		def params = evt.args[0];
		def entity = evt.result;
		loadFranchiseInfo( params.franchiseno, entity );
		int yr = dateSvc.getServerYear();
		entity.appyear = entity.appyear + 1;
		if( entity.appyear != yr ) throw new Exception("Invalid year for renewal. Year must be for the current year" );
		checkUnpaidFees(  entity );
	}

	
	@After(pattern="VehicleApplicationService.init", eval="#{args[0].apptype.matches('DROP|CHANGE_OWNER_UNIT') }", index=10)
	public void afterInitApplicationForRetire(def evt) {
		def params = evt.args[0];
		def entity = evt.result;
		loadFranchiseInfo( params.franchiseno, entity );
		checkUnpaidFees(  entity );
	}


}