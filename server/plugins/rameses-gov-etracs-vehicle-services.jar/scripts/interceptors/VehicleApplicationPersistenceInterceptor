import com.rameses.annotations.*;
import java.rmi.server.UID;
import com.rameses.util.*;

/**************************************************************************************
* This interceptor is exclusively for VehicleApplicationService.create method
* This is called upon creating the application for NEW, RENEW, DROP, CHANGE_OWNER_UNIT 
***************************************************************************************/
class VehicleApplicationPersistenceInterceptor {
	
	@Env
	def env;

	@Service("WorkflowTaskService")
	def taskSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("vehicle_application")
	def appEm;

	@DataContext("vehicle_application_task")
	def appTaskEm;

	@DataContext("vehicle_application_unit")
	def appUnitEm;

	@DataContext("vehicle_application_fee")
	def appFeeEm;

	@DataContext("vehicle_franchise")
	def franchiseEm;

	@DataContext("vehicletype")
	def vehicleTypeEm;

	@Service("SequenceService")
	def seqSvc;

	@Service("ControlNoGeneratorService")
	def controlNoGenerator;

	@Service("BillingRuleService")
	def billRuleSvc;

	@Before(pattern="PersistenceService.create", index=1, eval="#{ args[0]._schemaname == 'vehicle_application' && args[0].txnmode !='CAPTURE' && args[0].apptype != 'NEW' }")
	public void checkArrearsBeforeCreateApp(def evt) {
		def entity = evt.args[0];
		def result = evt.result;
		def rootappid = entity.rootappid;
		def val = appFeeEm.where( "parent.rootappid = :rootappid ", [rootappid: rootappid] ).select("total:{SUM(amount-amtpaid)}").val();
		if( val > 0 ) throw new Exception("Cannot proceed with the transaction. There are still unpaid fees.");
	}

	@Before(pattern="PersistenceService.create", index=2, eval="#{ args[0]._schemaname == 'vehicle_application' }")
	public void beforeCreateApplicationNewOrRenew(def evt) {
		def entity = evt.args[0];

		if( entity.appyear > dateSvc.getServerYear() )
			throw new Exception("App year must be less than or equal to current year");		

		def vt = vehicleTypeEm.find( [objid: entity.vehicletypeid ] ).first();
		def dt = dateSvc.getServerDate();
		def handler = { pttn, num ->
			if( pttn == "org") {
				return env.ORGCODE;
			}
			else if( pttn == "cluster") {
				return "";
			}
			else if(pttn.startsWith("%")) {
				//this is supposed to be for the leading zeroes
				return "";
			}
			else {
				def df = new java.text.SimpleDateFormat( pttn );
				return df.format( dt );
			}
			return ret;
		}
		String prefix = controlNoGenerator.formatNumber( vt.controlpattern, handler, 0 );
		entity.appno =  prefix + seqSvc.getNextFormattedSeriesA( prefix, 6 );
		entity.amount = 0;

		//calculate the expiry date
		def p = [application: entity];
		def r = billRuleSvc.execute( [rulename:'vehicledates', params: p ] );
		entity.expirydate = r.expirydate;
	}

	@After(pattern="PersistenceService.create", index=50, eval="#{ args[0]._schemaname == 'vehicle_application' }")
	public void afterCreateApplicationNew(def evt) {
		def entity = evt.args[0];
		def result = evt.result;

		entity.prevappid = entity.primaryappid;
		if( entity.txnmode == "CAPTURE" || entity.apptype.matches("NEW|RENEW|LATE_RENEWAL|CHANGE_OWNER_UNIT") ) {
			entity.primaryappid = entity.objid;
		}
		if( entity.txnmode == "CAPTURE" || entity.apptype.matches("NEW") ) {
			entity.rootappid = entity.objid;
		}
		if( !entity.primaryappid ) throw new Exception("Primary appid is required");
		if( !entity.rootappid ) throw new Exception("Root appid is required");

		appEm.find( [objid: result.objid ]).update( [primaryappid: entity.primaryappid, rootappid: entity.rootappid ]);
	}	

	@After(pattern="PersistenceService.create", index=60, eval="#{ args[0]._schemaname == 'vehicle_application' && args[0].txnmode=='ONLINE' && args[0].apptype.matches('RENEW|LATE_RENEWAL|CHANGE_OWNER_UNIT|CHANGE_UNIT|DROP')  }")
	public void afterCreateApplicationRenew(def evt) {
		def entity = evt.args[0];
		def result = evt.result;

		if(!entity.prevappid ) throw new Exception("prevappid is required in ONLINE-RENEW, CHANGE_OWNER, CHANGE_UNIT AND DROP ");
		//create a copy for each unit and replace the franchise control with the new one
		def controlno = entity.controlno;
		if( entity.apptype.matches("RENEW|LATE_RENEWAL")) controlno = null;

		def conds = [];
		def parms = [:];
		conds << "vehicleunit.primary.objid =:appid";
		parms.appid = entity.prevappid;

		if(controlno) {
			conds << " controlno = :controlno";
			parms.controlno = controlno;
		}

		def units = franchiseEm.where( conds.join( " AND ") , parms ).list();
		if(!units) throw new Exception("There must be at least one vehicle included");
		units.each { z->
			def u =[:]	
			u.putAll( z.vehicleunit );
			u.app = [objid: result.objid];
			u.appid = result.objid;
			u.franchise = [objid: z.objid ];
			u.controlid = z.objid;
			u.objid = null;
			u = appUnitEm.create(u);
			def unitid = (entity.apptype == "DROP") ? null : u.objid
			franchiseEm.find( [objid : z.objid ]).update( [vehicleunitid: unitid ] );
		}
	}	

	//workflow is applicable for all applications
	@After(pattern="PersistenceService.create", index=100, eval="#{ args[0]._schemaname == 'vehicle_application' }")
	public void fireApplicationWorkflow(def evt) {
		def entity = evt.args[0];
		def p = [:];
		p.processname = 'vehicle_application';
		p.refid = entity.objid;
		p.startdate = dateSvc.serverDate;
		p.info = entity;
		taskSvc.start(p);
	}

	/***************************************************************************
	* steps in removing the application
	* 1. update application taskid
	* 2. remove all tasks
	* 3. for each vehicle unit store the controlid in a list
	* 3. for each controlid in the list, update franchise vehicleunit id to null
	* 4. delete all vehicle units in the application
	* 5. for each controlid in list, update the vehicle unit id to the latest application
	* 6. remove the application   
	***************************************************************************/
	@Before(pattern="PersistenceService.removeEntity", eval="#{ args[0]._schemaname == 'vehicle_application' }")
	public void beforeApplicationRemove(def evt) {
		def entity = evt.args[0];
		def app = appEm.find( [objid: entity.objid]).first();
		if( app.task.state != "draft")
			throw new Exception("Application can be removed only from the draft state");
		def appid = app.objid;
		appEm.find( [objid:appid] ).update( [ taskid: null ] );
		appTaskEm.find( [refid: appid]).delete();

		def list = appUnitEm.find( [appid: appid ]).select("controlid").list();
		if(!list) throw new Exception("There must be at least one item in the list")
		list.each {
			franchiseEm.find( [objid: it.controlid] ).update( [vehicleunitid: null ]);
		}
		appUnitEm.find( [appid: appid ]).delete();
		list.each {
			def val = null;
			def m = appUnitEm.find( [controlid: it.controlid] ).orderBy("app.appyear DESC, app.dtcreated DESC").first();
			if( m && !m.app.apptype.matches("DROP") ) {
				val = m.objid;
			} 
			franchiseEm.find( [objid: it.controlid ]).update( [vehicleunitid: val] );
		}
	}	

}