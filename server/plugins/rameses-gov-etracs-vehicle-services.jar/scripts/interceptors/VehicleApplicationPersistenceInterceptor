import com.rameses.annotations.*;
import java.rmi.server.UID;
import com.rameses.util.*;

/**************************************************************************************
* This interceptor is exclusively for VehicleApplicationService.create method
* This is called upon creating the application for NEW, RENEW, DROP, CHANGE_OWNER_UNIT 
***************************************************************************************/
class VehicleApplicationPersistenceInterceptor {
	
	@Env
	def env;

	@Service("WorkflowTaskService")
	def taskSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("vehicle_application")
	def appEm;

	@DataContext("vehicle_application_task")
	def appTaskEm;

	@DataContext("vehicle_application_unit")
	def appUnitEm;

	@DataContext("vehicle_application_fee")
	def appFeeEm;

	@DataContext("vehicle_franchise")
	def franchiseEm;

	@DataContext("vehicletype")
	def vehicleTypeEm;

	@Service("VehicleControlNoService")
	def controlNoSvc;

	@Service("BillingRuleService")
	def billRuleSvc;


	@Before(pattern="PersistenceService.create", index=2, eval="#{ args[0]._schemaname == 'vehicle_application' }")
	public void beforeCreateApplicationNewOrRenew(def evt) {
		def entity = evt.args[0];

		if( entity.appyear > dateSvc.getServerYear() )
			throw new Exception("App year must be less than or equal to current year");		

		//get the franchise to get the cluster
		def c = franchiseEm.find( [objid: entity.franchise.objid ] ).first();
		def cluster = c.cluster;

		def vt = vehicleTypeEm.find( [objid: entity.vehicletypeid ] ).first();
		if( !vt.appnopattern )
			throw new Exception("Please specify appno pattern in type " + entity.vehicletypeid );

		def pp = [pattern: vt.appnopattern, cluster: cluster, date: entity.appdate ]
		entity.appno =  controlNoSvc.formatNextNo( pp );
		entity.amount = 0;

		//store this so we can copy the vehicle units later
		entity.prevappid = c.appid;
		entity.controlid = entity.franchise.objid;
	}

	@After(pattern="PersistenceService.create", index=50, eval="#{ args[0]._schemaname == 'vehicle_application' }")
	public void afterCreateApplication(def evt) {
		def entity = evt.args[0];
		franchiseEm.find( [objid: entity.controlid ] ).update([appid: entity.objid ]);
	}	

	@After(pattern="PersistenceService.create", index=60, eval="#{ args[0]._schemaname == 'vehicle_application' && args[0].prevappid != null }")
	public void afterCreateApplicationNotOnlineNew(def evt) {
		def entity = evt.args[0];
		def result = evt.result;

		//create a copy for each unit and replace the franchise control with the new one
		def units = appUnitEm.find( [appid: entity.prevappid ] ).list();
		units.each { z->
			z.objid = null;
			z.appid = result.objid;
			appUnitEm.create(z);
		}
	}	

	//workflow is applicable for all applications
	@After(pattern="PersistenceService.create", index=100, eval="#{ args[0]._schemaname == 'vehicle_application' }")
	public void fireApplicationWorkflow(def evt) {
		def entity = evt.args[0];
		def p = [:];
		p.processname = 'vehicle_application';
		p.refid = entity.objid;
		p.startdate = dateSvc.serverDate;
		p.info = entity;
		taskSvc.start(p);
	}

	/***************************************************************************
	* steps in removing the application
	* 1. update application taskid
	* 2. remove all tasks
	* 3. for each vehicle unit store the controlid in a list
	* 3. for each controlid in the list, update franchise vehicleunit id to null
	* 4. delete all vehicle units in the application
	* 5. for each controlid in list, update the vehicle unit id to the latest application
	* 6. remove the application   
	***************************************************************************/
	@Before(pattern="PersistenceService.removeEntity", eval="#{ args[0]._schemaname == 'vehicle_application' }")
	public void beforeApplicationRemove(def evt) {
		def entity = evt.args[0];

		def app = appEm.find( [objid: entity.objid]).first();
		if( app.task.state != "draft")
			throw new Exception("Application can only be removed from the draft state");
		def appid = app.objid;
		appEm.find( [objid:appid] ).update( [ taskid: null ] );
		appTaskEm.find( [refid: appid]).delete();

		//remove also all vehicle units for this app
		appUnitEm.find([appid: appid]).delete();


		def m = appEm.find( [controlid: app.controlid] ).where( " NOT(objid = :id) ", [id:app.objid ]).orderBy("dtcreated DESC").first();
		if( m==null || m.apptype == "DROP" ) {
			franchiseEm.find( [objid: app.controlid ]).update( [appid: "{NULL}", renewaldate: "{NULL}"] );
		}
		else {
			def u = [appid: m.objid];
			if( app.apptype.matches("NEW|RENEW") ) {
				def params = [application: entity];
				def r = billRuleSvc.execute( [rulename:'vehicledates', params: params ] );
				u.renewaldate = r.renewaldate;				
			}
			franchiseEm.find( [objid: app.controlid ]).update( u );
		}
	}	

}