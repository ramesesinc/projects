import com.rameses.annotations.*;
import java.rmi.server.UID;
import com.rameses.util.*;

/**************************************************************************************
* This interceptor is exclusively for VehicleApplicationService.create method
* This is called upon creating the application for NEW, RENEW, DROP, CHANGE_OWNER_UNIT 
***************************************************************************************/
class VehicleApplicationPersistenceInterceptor {
	
	@Env
	def env;

	@Service("WorkflowTaskService")
	def taskSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("vehicle_application")
	def appEm;

	@DataContext("vehicle_application_unit")
	def appUnitEm;

	@DataContext("vehicle_franchise")
	def franchiseEm;

	@DataContext("vehicletype")
	def vehicleTypeEm;

	@Service("SequenceService")
	def seqSvc;

	@Service("ControlNoGeneratorService")
	def controlNoGenerator;



	@Before(pattern="PersistenceService.create", eval="#{ args[0]._schemaname == 'vehicle_application' }")
	public void beforeCreateApplicationNewOrRenew(def evt) {
		def entity = evt.args[0];

		if( entity.appyear > dateSvc.getServerYear() )
			throw new Exception("App year must be less than or equal to current year");		

		def vt = vehicleTypeEm.find( [objid: entity.vehicletypeid ] ).first();
		def dt = dateSvc.getServerDate();
		def handler = { pttn, num ->
			if( pttn == "org") {
				return env.ORGCODE;
			}
			else if( pttn == "cluster") {
				return "";
			}
			else if(pttn.startsWith("%")) {
				//this is supposed to be for the leading zeroes
				return "";
			}
			else {
				def df = new java.text.SimpleDateFormat( pttn );
				return df.format( dt );
			}
			return ret;
		}
		String prefix = controlNoGenerator.formatNumber( vt.controlpattern, handler, 0 );
		entity.appno =  prefix + seqSvc.getNextFormattedSeriesA( prefix, 6 );
		entity.amount = 0;
	}

	@After(pattern="PersistenceService.create", index=50, eval="#{ args[0]._schemaname == 'vehicle_application' }")
	public void afterCreateApplicationNew(def evt) {
		def entity = evt.args[0];
		def result = evt.result;

		entity.prevappid = entity.primaryappid;
		if( entity.txnmode == "CAPTURE" || entity.apptype.matches("NEW|CHANGE_OWNER.*") ) {
			entity.primaryappid = entity.objid;
		}
		if( !entity.primaryappid ) throw new Exception("Primary appid is required");
		appEm.find( [objid: result.objid ]).update( [primaryappid: entity.primaryappid ]);
	}	

	@After(pattern="PersistenceService.create", index=50, eval="#{ args[0]._schemaname == 'vehicle_application' && args[0].txnmode=='ONLINE' && args[0].apptype.matches('RENEW|CHANGE_OWNER.*')  }")
	public void afterCreateApplicationRenew(def evt) {
		def entity = evt.args[0];
		def result = evt.result;
		if(!entity.prevappid ) throw new Exception("prevappid is required in ONLINE-RENEW or CHANGE_OWNER ");
		//create a copy for each unit and replace the franchise control with the new one
		def units = franchiseEm.where( "vehicleunit.primaryappid =:appid",  [appid: entity.prevappid ] ).list();
		units.each { z->
			def u =[:]	
			u.putAll( z.vehicleunit );
			u.app = [objid: result.objid];
			u.appid = result.objid;
			u.franchise = [objid: z.objid ];
			u.controlid = z.objid;
			u.objid = null;
			u = appUnitEm.create(u);
			franchiseEm.find( [objid : z.objid ]).update( [vehicleunitid: u.objid] );
		}
	}	

	//workflow is applicable for all applications
	@After(pattern="PersistenceService.create", index=100, eval="#{ args[0]._schemaname == 'vehicle_application' }")
	public void fireApplicationWorkflow(def evt) {
		def entity = evt.args[0];
		def p = [:];
		p.processname = 'vehicle_application';
		p.refid = entity.objid;
		p.startdate = dateSvc.serverDate;
		p.info = entity;
		taskSvc.start(p);
	}


}