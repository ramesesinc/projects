import com.rameses.annotations.*;
import com.rameses.util.*;

/**************************************************************************************
* This interceptor is exclusively for VehicleApplicationService.create method
* This is called upon creating the application for NEW, RENEW, DROP, CHANGE_OWNER_UNIT 
***************************************************************************************/
class VehicleApplicationWorkflowInterceptor {
	
	@DataContext("vehicle_application_fee")
	def vFee;

	@DataContext("vehicle_application")
	def appEm;

	@DataContext("vehicle_application_unit")
	def unitEm;

	@DataContext("vehicle_franchise")
	def franchiseEm;

	@Service("VehiclePermitService")
	def permitSvc;

	@Service("DateService")
	def dateSvc;

	//check before submitting draft application
	@Before(pattern="WorkflowTaskService.signal", eval="#{ args[0].processname=='vehicle_application' && args[0].taskstate == 'draft' }")
	public void beforeSubmittingDraft( def evt ) {
		def p = evt.args[0];
		def x = unitEm.find( [ appid: p.refid ] ).select("c:{COUNT(*)}").val();
		if( x == 0 ) throw new Exception("There must be at least 1 vehicle entry");	
	}

	//check before submitting assessed application
	@Before(pattern="WorkflowTaskService.signal", eval="#{ args[0].processname=='vehicle_application' && args[0].taskstate == 'assessment' }")
	public void checkHasFees( def evt ) {
		def p = evt.args[0];
		def app = appEm.find( [objid: p.refid] ).select("txnmode,apptype").first();
		if( app.txnmode == "ONLINE" ) {
			int ct = vFee.find( [parentid: p.refid ] ).select("scount:{COUNT(*)}").val();
			if( ct == 0 ) throw new Exception("There must be at least one fee entry");
		}
	}

	//before running the payment get the necessary info for evaluation, in this case the amtdue 
	@Before(pattern="WorkflowTaskService.signal", eval="#{ args[0].processname=='vehicle_application' && args[0].taskstate == 'payment' }")
	public void beforePayment( def evt ) {
		def p = evt.args[0];
		def	total = vFee.select( "total:{SUM( amount-amtpaid )}" ).find( [parentid: p.refid ] ).val();
		p.info = [amtdue: total, message: 'balance unpaid:' + total ];	
	}

	/************************************************************************ 
	* Issue Permit will create a new permit 
	**************************************************************************/
	@After(pattern="WorkflowTaskService.signal", eval="#{ args[0].processname=='vehicle_application' && args[0].action=='issue-permit' }")
	public void afterIssuePermit( def evt ) {
		def p = evt.args[0];
		permitSvc.create( [appid: p.refid] );
	}



}