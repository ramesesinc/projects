import com.rameses.annotations.*;
import java.rmi.server.UID;
import com.rameses.util.*;
import enterprise.utils.*;
import java.rmi.server.*;
import java.util.*;
import vehicle.facts.*;

class VehicleAssessmentInterceptor {

	@DataContext("vehicle_application_fee")
	def appFeeEm;

	@DataContext("vehicle_application_info")
	def appInfoEm;

	@DataContext("vehicle_application")
	def appEm;

	@After(pattern="FactBuilderService.getFacts", eval="#{ args[0].rulename == 'vehicleassessment'  }")
	public void buildFacts(def evt) {

		def factBuilder = evt.result; 
		def params = evt.args[0].params;
		def facts = factBuilder.facts;

		if( params.application ) {
			facts << new VehicleApplication( params.application );
		}
		def vp = new VariableInfoProvider(
			schemaName:"vehicle_variable"
		);
		factBuilder.variableInfoProvider = vp;

		/*
		factBuilder.facts << new VehicleFranchise( data.franchise );
		if(data.applications) {
			data.applications.each {
			factBuilder.facts << new VehicleApplication( it );	
		}
		*/
	}

	@After(pattern="BillingRuleService.execute", eval="#{ args[0].rulename == 'vehicleassessment' && result.askinfos == null }")
	public void afterBilling(def evt) {
		def result = evt.result;
		def data = evt.args[0].params;
		def app = data.application
		if( app!=null ) {
			def appid = app.objid;
			appFeeEm.find( [parentid: appid ] ).delete(); 
			def total= 0;
			result.items?.each {
				it.parent = [objid: appid ];
				appFeeEm.create( it );
				total += it.amount;
			}
			//update the total assessment
			appEm.find( [objid: appid ]).update( [amount: total]);

			appInfoEm.find( [parentid: appid ] ).delete(); 
			result.infos?.each {
				it.parent = [objid: appid ];
				appInfoEm.create( it );
			}
		}
	}
	

}	