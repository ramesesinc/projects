import com.rameses.annotations.*;
import java.rmi.server.UID;

class VehiclePersistenceInterceptor {
	
	@Env
	def env;

	@Service("DateService")
	def dateSvc;

	@Service("SequenceService")
	def seqSvc;

	@Before(pattern="PersistenceService.create", eval="#{args[0]._schemaname.startsWith('vehicle_application') && args[0].apptype == 'NEW' }")
	public void beforeCreateApplication(def evt) {
		def o = evt.args[0];
		def svrDate =  dateSvc.getServerDate();

		if(!o.fees) throw new Exception("There must be at least 1 fee");
		o.appdate = svrDate;
		o.appyear = dateSvc.getServerYear();
		o.state = 'FOR_PAYMENT';
		def txntype = o.vehicletype?.toUpperCase();

		o.appno =  txntype[0] + o.appyear + seqSvc.getNextFormattedSeries( txntype );
		o.filedby = [objid: env.USERID, name: env.FULLNAME];
		o.dtfiled = svrDate;
		o.amtpaid = 0.0;
		o.fees.each {
			it.app = o;
		};
	}

	@Before(pattern="PersistenceService.create", eval="#{args[0]._schemaname.startsWith('vehicle_account_') && !args[0]._schemaname.endsWith('fee')}" )
	public void beforeCreateAccount(def evt) {
		def o = evt.args[0];
		def svrDate =  dateSvc.getServerDate();

		o.dtcreated = svrDate;
		o.createdby = [objid: env.USERID, name: env.FULLNAME];
		o.state = 'PROCESSING';
		def vehicletype = o.vehicletype?.toUpperCase();
		o.acctno =  vehicletype[0] +"ACC" + o.appyear + seqSvc.getNextFormattedSeries( "vehicle_account_" + vehicletype );
	}


}