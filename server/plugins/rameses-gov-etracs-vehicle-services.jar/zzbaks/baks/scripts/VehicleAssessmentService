import com.rameses.annotations.*;
import vehicle.facts.*;
import treasury.facts.*;
import treasury.utils.*;
import enterprise.facts.*;
import enterprise.utils.*;
import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import java.util.*;
import com.rameses.rules.common.*;

class VehicleAssessmentService {
	
	@Env
	def env;

	@Service("DateService")
	def dateSvc;

	@Service("AssessmentRuleService")
	def assmtSvc;

	@DataContext(dynamic=true)
	def franchiseEm;

	@ProxyMethod
	public def assess( def o ) {
		if(!o.vehicletype) throw new Exception("vehicletype is required in VehicleAssessmentService.assess")
		if(!o.franchise?.objid) throw new Exception("franchise.objid is required in VehicleAssessmentService.assess")

		def fran = franchiseEm.lookup( "vehicle_franchise_"+o.vehicletype ).find([objid: o.franchise.objid]).first();
		if(!fran) throw new Exception("Franchise control no. not found")

		def svrDate = dateSvc.getServerDate();
		if(!o.billdate) o.billdate = svrDate;
		if(!o.appdate) o.appdate = svrDate;

		def fb = new FactBuilder();
		fb.variableInfoProvider = new VariableInfoProvider(
			schemaName:"vehicle_variable",
			createIntegerFact: { return new VehicleIntegerInfo(); },
			createDecimalFact: { return new VehicleDecimalInfo(); },
			createBooleanFact: { return new VehicleBooleanInfo(); },
			createStringFact : { return new VehicleStringInfo(); }
		);

		//encode the franchise date, in case there is no franchise date yet
		if(o.startdate) fran.startdate = (new DateFact(o.startdate)).date;


		fb.facts << new VehicleApplication( o );
		fb.facts << new VehicleFranchise( fran );
		fb.facts << new AppDate( o.appdate );
		fb.facts << new treasury.facts.BillDate(o.appdate);

		def dates = [:]
		def rh = [
			getFactKeyValue : { f ->
				if( f instanceof DueDate ) {
					if(f.tag == 'renewal') dates.expirydate = f.date;
					if(f.tag == 'franchise') dates.franchise = [expirydate: f.date];
				}
				else if((f instanceof VariableInfo) || (f instanceof BillItem)) {
					fb.facts << f;
				}
				return null;
			}
		] as ResultHandler;
	
		def res = assmtSvc.execute( "vehicleassessment", o, fb, rh );
		if( res.askinfos ) return [askinfos: res.askinfos];

		if(! fb.facts.findAll{ it instanceof BillItem } ) 
			throw new Exception("There are no billitems computed. Please review the rules");

		/******************************************************
		* run billing here
		*******************************************************/
		def r = [ billitems:[], infos:[] ];

		rh = [
			getFactKeyValue: { f ->
				if(f instanceof VariableInfo) {
					if(! r.infos.find{ it.name == f.name} ) {
						r.infos << f.toMap();
					}
				}	
				else if( f instanceof BillSubItem ) {
					def sv = r.billitems.find{ it.item.objid == f.account.objid };
					if( sv ) {
						sv.amount += f.amount;
						sv.balance += f.amount;
					}
					else {
						r.billitems << f.toMap();
					}
				}
				else if(f instanceof BillItem) {
					def sv = r.billitems.find{ it.item.objid == f.account.objid };
					if(!sv) {
						r.billitems << f.toMap();	
					}
				}
				return null;
			}
		] as ResultHandler;

		assmtSvc.execute( "vehiclebilling", null, fb, rh );

		def app = [:];
		app.infos = r.infos;
		app.items = r.billitems;
		app.expirydate = dates.expirydate;
		if( dates.franchise?.expirydate ) app.franchise = dates.franchise;

		return app;
	}
}

