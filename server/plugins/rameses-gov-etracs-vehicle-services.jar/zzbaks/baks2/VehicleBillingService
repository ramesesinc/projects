import com.rameses.annotations.*;

import com.rameses.rules.common.*;
import vehicle.facts.*;
import treasury.facts.*;
import treasury.utils.*;
import enterprise.facts.*;
import enterprise.utils.*;


/**********************************************************
* This service handles computation of what fees to charge 
***********************************************************/
class VehicleBillingService {
	
	@Service("DateService")
	def dateSvc;

	@Service("AssessmentRuleService")
	def assmtSvc;

	@DataContext("vehicle_application")
	def appEm;

	@DataContext("vehicle_franchise")
	def franchiseEm;

	@DataContext("vehicle_application_fee")
	def appFeeEm;

	@DataContext("vehicle_franchise_fee")
	def franFeeEm;

	private void loadAppFees( def appid, def controlid, def facts, def buildBillItem ) {
		def list = null;
		if(appid) {
			list = appFeeEm.where( "app.objid = :appid AND amount - amtpaid > 0", [appid: appid] ).list();
		}
		else {
			list = appFeeEm.where( "app.controlid = :controlid AND amount - amtpaid > 0", [controlid: controlid] ).list();
		}
		list.each {
			def appFact = new VehicleApplication( it.app );
			it.ledgertype = "vehicle_application";
			it.billrefid = appFact.objid;
			facts << buildBillItem(it);
			facts << appFact;
		}
	}

	private void loadFranchiseFees( def controlid, def facts, def builder ) {
		def list  = franFeeEm.find( [parentid: controlid]  ).where("amount - amtpaid > 0").list();
		list.each {
			it.ledgertype = "vehicle_franchise";
			it.billrefid = it.parentid;
			facts << buildBillItem(it);
		}
	}

	@ProxyMethod
	public def getBilling( def o ) {
		throw new Exception("fire billing");
		/*
		if(!o.id) throw new Exception("id is required in VehicleBillingService.getInfo");
		if(!o._schemaname ) throw new Exception("_schemaname is required in VehicleBilling.getBilling ")
		o.id = o.id.trim();

		def newfacts = [];

		//find application or franchise...
		def vehicleid = null;
		def appid = null;
		if(o.appno) {
			def v = appEm.find( [appno: o.appno] ).first();
			appid = v.appid;
		}
		else if( o.appid ) {
			appEm.find( [appno: o.appno] ).first();
		}

		
		def itemAcct = new ItemAccountUtil();
		def buildBillItem = { oo ->
			def bi = new BillItem();
			bi.billrefid = oo.billrefid;
			bi.refid = oo.objid;
			bi.account = itemAcct.createAccountFact( oo.item );
			bi.ledgertype = oo.ledgertype;
			bi.amount = oo.amount - oo.amtpaid;
			return bi;
		}
		*/

	}

	/*
			if(!app.billitems) {
			throw new Exception("VehicleBillingService requires billitems");
		}
		if(!app.apptype) throw new Exception("app type is required");
		if(!app.vehicletype) throw new Exception("vehicle type is required");	
		if(!app.franchise?.controlno) throw new Exception("franchise controlno  is required");	
		def fb = new FactBuilder();
		fb.facts << new VehicleApplication( app );
		fb.facts << new VehicleFranchise( app.franchise );
		fb.facts << new AppDate( app.appdate );
		fb.facts << new treasury.facts.SystemDate(svrDate);
		fb.facts << new treasury.facts.BillDate(app.billdate);
		if(app.payment?.amount) {
			fb.facts << new treasury.facts.Payment( amount: app.payment.amount );
		}
		def svrDate = dateSvc.getServerDate();
		if(!app.billdate) app.billdate = svrDate;
			
	*/



}