import com.rameses.annotations.*;
import com.rameses.util.*;

class VehicleAccountTricycleInterceptor {

	@Env
	def env;

	@Service("DateService")
	def dateSvc;

	@DataContext("vehicle_account_tricycle")
	def triEm;

	@DataContext("vehicle_control")
	def controlEm;

	@Before(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'vehicle_account_tricycle' }", index=100)
	public void beforeCreate(def evt) {
		def o = evt.args[0];
		def g = triEm.find( [plateno: o.plateno] ).first(); 
		if(!g) {
			g = triEm.find( [engineno: o.engineno] ).first(); 
			if(!g) {
				g = triEm.find( [bodyno: o.bodyno] ).first(); 
			}
		}
		if(g) {
			if(g.control?.controlno)
				throw new Exception("This vehicle is currently registered to " + g.owner?.name +" with franchise no " + g.control.controlno);

			boolean hasDiff = false;
			def b = new StringBuilder();
			g.each {k,v->
				if(k.matches("plateno|engineno|bodyno|model|make|color")) {
					def v1 = o.get(k);
					if(v1 != v ) b.append( k+":"+ v+";");
					hasDiff = true;
				}
			};	
			def msg = null;
			if( !hasDiff ) {
				msg = "ok";
			}
			else {
				msg = "Please check vehicle already exists with the ff. differences: \n" + b.toString();
			}
			throw new Warning(msg, g );
		}

		o.dtcreated = dateSvc.getServerDate();
		o.createdby = [ objid: env.USERID, name: env.FULLNAME ];
		o.state = 'ACTIVE';
		o.vehicletype = 'tricycle';
	}

	@After(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'vehicle_account_tricycle' }", index=100)
	public void afterCreate(def evt) {
		def r = evt.args[0];
		if( r.control?.objid ) {
			controlEm.find( [objid: r.control.objid] ).update( [vehicleid: r.objid] );
		}
	}

}