import com.rameses.annotations.*; 

class VehicleApplicationTricycleInterceptor { 

	@DataContext('sys_user') 
	def sysuser_db; 

	@DataContext('vehicle_application') 
	def vapp_db; 

	@DataContext('vehicle_permit') 
	def vpermit_db; 

	@DataContext('entityindividual') 
	def individualEntityEm; 

	@After(pattern="PersistenceService.read", eval="#{args[0]._schemaname == 'vehicle_application_tricycle' }", index=10) 
	public void afterRead( evt ) {
		def result = evt.result; 

		def appinfo = vapp_db.find([ objid: result.objid ]).first(); 
		if ( !appinfo ) return; 

		def userinfo = sysuser_db.find([ objid: appinfo.filedby?.objid ]).first();
		if ( !userinfo ) return; 

		def fullname = [userinfo.firstname, userinfo.middlename, userinfo.lastname].findAll{( it )}.join(' '); 
		result.filedby = [ objid: userinfo.objid, name: fullname, jobtitle: userinfo.jobtitle ]; 
		result.permit = vpermit_db.find([ appid: appinfo.objid ]).first();

		//add also all info for individual entity
		def g = individualEntityEm.find( [objid: result.owner.objid ] ).first();
		g.each { k,v->
			if( !result.owner.containsKey(k) ) result.owner.put(k,v);
		}
	} 

} 