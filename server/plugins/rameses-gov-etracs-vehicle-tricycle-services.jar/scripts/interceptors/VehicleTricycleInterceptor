import com.rameses.annotations.*;
import com.rameses.util.*;

class VehicleTricycleInterceptor {

	@Env
	def env;

	@Service("DateService")
	def dateSvc;

	@DataContext("vehicle_tricycle")
	def triEm;

	@Before(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'vehicle_tricycle' }", index=100)
	public void beforeCreate(def evt) {
		def o = evt.args[0];
		def g = triEm.find( [plateno: o.plateno] ).first(); 
		if(!g) {
			g = triEm.find( [engineno: o.engineno] ).first(); 
			if(!g) {
				g = triEm.find( [bodyno: o.bodyno] ).first(); 
			}
		}
		if(g) {
			if(g.controlid) {
				def	msg = "This vehicle already exists with existing franchise " + g.franchise.controlno;
				throw new Exception(msg);
			}
			else {
				//just return without creating a new record.
				throw new Warning("ok", g );
			}
		}
		o.dtcreated = dateSvc.getServerDate();
		o.createdby = [ objid: env.USERID, name: env.FULLNAME ];
	}

	@After(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'vehicle_tricycle' }", index=100)
	public void afterCreate( def evt ) {
		def o = evt.args[0];
		//update the vehicle's current appid
		//triEm.find([objid: o.vehicleid]).update( [appid: o.objid] );
	}
}