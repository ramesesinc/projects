import com.rameses.annotations.*;

class WaterworksBillPrintingInterceptor{
	
	@Service("TemplateService")
	def template;

    @DataContext('vw_waterworks_billing') 
    def bill_db;

	@After(pattern="WaterworksBatchBillPrintingService.formatReport")
	public void afterFormatReport( evt ) {
        def list = evt.args[0];
        def result = evt.result;

        def df = new java.text.SimpleDateFormat("yyyy-MM-dd"); 
        list.each { 
            def bill = bill_db.find([ objid: it.objid ]).first();             
            resolveData( bill ); 

            def res = template.get( "reports/waterbillreport", [ o: bill ]).toString();
            result << res; 
        }
        //throw new Exception("stop at report!");
	} 



    // 
    // helper methods 
    // 
    private def MMM_YYYY = new java.text.SimpleDateFormat("MMM yyyy"); 
    private def MMDDYYYY = new java.text.SimpleDateFormat("MM/dd/yyyy"); 
    private void resolveData( p ) {
        p.zonecode = p.zone?.code; 
        p.seqno = p.indexno.toString().padLeft(4,'0'); 
        p.blockseqno = p.zonecode.toString() +"-"+ p.seqno.toString(); 

        def totals = [ amount: p.amount, arrears: p.arrears, surcharge: p.surcharge, interest: p.interest, discount: 0.0 ];  
        totals.amtwitharrears = p.amount + p.arrears; 
        totals.amtwithsurcharge = p.amount + p.surcharge; 
        totals.grandtotal = p.amount + p.arrears + p.surcharge + p.interest;

        p.billmonth = (p.toperiod instanceof Date ? MMM_YYYY.format(p.toperiod) : null) ;
        p.readingdate = (p.readingdate instanceof Date ? MMDDYYYY.format(p.readingdate) : null) ;
        p.prevreadingdate = (p.prevreadingdate instanceof Date ? MMDDYYYY.format(p.prevreadingdate) : null) ;
        p.discdate = (p.discdate instanceof Date ? MMDDYYYY.format(p.discdate) : null) ;
        p.duedate = (p.duedate instanceof Date ? MMDDYYYY.format(p.duedate) : null) ;

        p.acctname = format(p.acctname, 46, 0); 
        p.addresstext = format(p.addresstext, 46, 0);
        p.acctno = format(p.acctno, 14, 0);
        p.blockseqno = format(p.blockseqno, 15, 2);
        p.classificationid = format(p.classificationid, 3, 0);
        p.readingdate = format(p.readingdate, 14, 2);
        p.reading = format(p.reading, 14, 2);
        p.prevreadingdate = format(p.prevreadingdate, 14, 2);
        p.prevreading = format(p.prevreading, 14, 2);
        p.discdate = format(p.discdate, 14, 2);
        p.volume = formatNumber(p.volume, 14, 2, '#,##0');
        p.amount = formatNumber(totals.amount, 14, 2, '#,##0.00');
        p.billmonth = format(p.billmonth, 14, 2);
        p.arrears = formatNumber(totals.arrears, 14, 2, '#,##0.00');
        p.amtwithdisc = formatNumber(null, 14, 2, '#,##0.00');
        p.amtwitharrears = formatNumber(totals.amtwitharrears, 14, 2, '#,##0.00'); 
        p.surcharge = formatNumber(totals.surcharge, 14, 2, '#,##0.00'); 
        p.duedate = format(p.duedate, 14, 2); 
        p.amtwithsurcharge = formatNumber(totals.amtwithsurcharge, 14, 2, '#,##0.00'); 
        p.grandtotal = formatNumber(totals.grandtotal, 14, 2, '#,##0.00'); 

        def sb = new StringBuilder(); 
        sb.append(new String([0x1b, '@'] as char[])); 
        sb.append(new String([0x1b, 'M', 10] as char[])); 
        sb.append(new String([0x1b, '!', 8] as char[])); 
        p.initprinting = sb.toString(); 
    } 

    private String fill( int length ) { 
        StringBuilder sb = new StringBuilder(); 
        for (int i=0; i<length; i++) sb.append(" "); 
        return sb.toString(); 
    } 
    
    private String format( Object value, int length, int alignment ) {
        String str = (value == null ? "" : value.toString()); 
        int strlen = str.length(); 
        length = (length <= 0 ? strlen : length);
        if ( strlen >= length ) return str.substring(0, length);  

        int diff = length - strlen;
        diff = (diff < 0 ? 0 : diff); 
        StringBuilder sb = new StringBuilder();
        if (alignment == 2) {             
            sb.append(fill(diff)).append( str );
        } else if (alignment == 1) {
            int lpos = diff / 2; 
            lpos += ((diff % 2) > 0 ? 1 : 0); 
            sb.append(fill(lpos)).append( str ); 
            sb.append(fill(length - sb.length()));
        } else {
            sb.append( str ).append(fill(diff));
        }
        return sb.toString(); 
    }
    
    private String formatNumber( Number value, int length, int alignment, String pattern ) {
        if ( value == null ) return format("", length, alignment); 
        
        String xpattern = (pattern == null ? "" : pattern); 
        if ( xpattern.length() == 0 ) xpattern = "0"; 
        
        def numformat = new java.text.DecimalFormat( xpattern ); 
        return format( numformat.format( value ), length, alignment ); 
    }
}