import com.rameses.annotations.*;
import com.rameses.functions.*;

class WaterworksBatchBillingService {
	
	@DataContext('waterworks_batch_billing')
	def batchEm; 

	@DataContext("waterworks_consumption")
	def wbillEm;

	@Service("CreditPaymentService")
	def crPmtSvc;

	@Service("WaterworksComputationService")
	def computeSvc;

	@Service("DateService")
	def dateSvc;

	@Service("BasicBillingService")
	def billingSvc;

	@ProxyMethod
	public void processBilling( o ) { 
		def u = [billed:1, prevreadingdate: null, prevreading: 0];
		u.arrears = 0;
		u.surcharge = 0;
		u.interest = 0;
		u.otherfees = 0;
		u.credits = 0;

		def b = billingSvc.getBillingInfo([rulename:'waterworksbilling', params:[objid:o.acctid ]]); 
		if( b?.billitems) {
			def arrears = b.billitems.findAll{ it.reftype == 'waterworks_consumption' }.sum{ it.amount  };
			def surcharge = b.billitems.findAll{it.surcharge}?.sum{ it.surcharge };
			def interest = b.billitems.findAll{it.interest}?.sum{ it.interest };
			def otherFees = b.billitems.findAll{ it.reftype == 'waterworks_otherfee' }?.sum{ it.amount };
			def credits = b.billitems.findAll{ it.reftype == 'waterworks_credit' }?.sum{ it.amount };

			if( arrears ) u.arrears = arrears;
			if( surcharge ) u.surcharge = surcharge;
			if( interest ) u.interest = interest;
			if( otherFees ) u.otherfees = otherFees;
			if( credits ) {
				u.credits = credits * -1;
			}	
		}

		def meterid = o.account?.meterid;
		if ( meterid == null ) meterid = o.account?.meter?.objid;

		if ( meterid ) { 
			u.prevreadingdate = o.account.meter.lastreadingdate;
			u.prevreading = o.account.meter.lastreading;
		} else { 
			def res = computeSvc.compute([ objid: o.acctid ]);
			u.putAll( res ); 
			u.reading = 0;
		} 

		//get the average consumption for 3 months (default)//
		def avg = batchEm.findAverageConsumption([ acctid: o.acctid, year:o.year, month:o.month, months: 3 ])?.avgcon; 
		if ( !avg ) avg = 0; 

		u.averageconsumption = Math.ceil( avg ); 

		def rec = wbillEm.find([ objid: o.objid ]).first(); 
		def icount = wbillEm.find([ batchid: rec.batchid ])
							.select('icount:{COUNT(*)}')
							.where(' controlno IS NOT NULL ')
							.first()?.icount; 
		icount = (icount == null ? 1 : icount+1); 

		u.controlno = rec.batchid +'-'+ icount.toString().padLeft(4, '0');
		wbillEm.find([ objid: o.objid ]).update( u );
	}

	@ProxyMethod 
	def getBilledStatus( param ) { 
		if ( !param.objid ) throw new Exception('objid parameter is required'); 
		def m = [batchid: param.objid]; 
		return batchEm.findBilledStatus( m ); 
	} 

	@ProxyMethod
	public void post( def p ) {

		if ( !p.batchid ) throw new Exception('batchid parameter is required in WaterworksBatchBillingService.post'); 

		def info = batchEm.find([ objid: p.batchid ]).select('objid,state').first(); 
		if ( !info ) throw new Exception('batch transaction not found'); 	

		batchEm.find([ objid: p.batchid ]).update([ state: 'POSTED' ]); 
		wbillEm.find([ batchid: p.batchid ]).update([ state: 'POSTED', readingmethod: 'ONLINE' ]); 
		batchEm.postMeterReading([ batchid: p.batchid ]); 

		//select entries where there are advanced payments and post it to the ledger
		def clist = wbillEm.find([ batchid: p.batchid ]).where(" credits > 0 ").list(); 
		def txndate = dateSvc.getServerDate(); 
		clist.each { 
			def bb = [rulename: 'waterworksbilling', txntype: 'waterworks' ]; 
			bb.amtpaid =  it.credits; 
			bb.params = [objid: it.acctid ]; 
			bb.acctid = bb.params.objid; 

			def rct = crPmtSvc.init( bb ); 
			rct.txntype = 'waterworks'; 
			rct.reftype = 'waterworks_consumption'; 
			rct.refid = it.objid; 
			rct.refno = it.controlno; 
			rct.refdate =  txndate; 
			crPmtSvc.post( rct ); 
		} 
	} 
} 