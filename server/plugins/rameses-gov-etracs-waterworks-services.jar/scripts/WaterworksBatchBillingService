import com.rameses.annotations.*;
import com.rameses.functions.*;

class WaterworksBatchBillingService {
	
	@DataContext('waterworks_billing_batch')
	def batchEm; 

	@DataContext("waterworks_billing")
	def wbillEm;

	@Service("SingleBillingService")
	def billingSvc;

	@ProxyMethod
	public void processBilling( def o ) {
		def b = null;
		try { b = billingSvc.execute([rulename:'waterworksbilling', params:[objid:o.acctid ]]); } catch(ign) {;}
		def u = [billed: 1];
		if( b?.billitems) {
			def arrears = b.billitems.sum{ it.amount - it.amtpaid  };
			def surcharge = b.billitems.findAll{it.surcharge}?.sum{ it.surcharge };
			def interest = b.billitems.findAll{it.interest}?.sum{ it.interest };
			if( arrears ) u.arrears = arrears;
			if( surcharge ) u.surcharge = surcharge;
			if( interest ) u.interest = interest;
		}
	   	wbillEm.find( [objid: o.objid ] ).update( u );
	}

	@ProxyMethod 
	def submitForReading( param ) { 
		if ( !param.objid ) throw new Exception('objid parameter is required'); 

		def m = [ objid: param.objid ]; 
		def o = batchEm.find( m ).select('objid,state').first(); 
		if ( !o ) throw new Exception('batch billing transaction not found'); 

		def newstate = 'FOR_READING'; 
		batchEm.find( m ).where(" state='DRAFT' ").update([ state: newstate ]); 
		o = batchEm.find( m ).select('objid,state').first(); 
		if ( !o.state.toString().equalsIgnoreCase( newstate )) 
			throw new Exception('Transaction status must be in DRAFT mode');  

		return [ state: newstate ];  
	} 

	@ProxyMethod 
	def getBilledStatus( param ) { 
		if ( !param.objid ) throw new Exception('objid parameter is required'); 

		def m = [batchid: param.objid]; 
		return batchEm.findBilledStatus( m ); 
	} 



	@ProxyMethod 
	public def post( def p ) {
		//def hasitems = batchEm.select("cnt:{COUNT(*)}").find([batchid: p.objid]).where(" amount=0 AND state='DRAFT' ").first();	
		//if(hasitems) throw new Exception("There are items that are not processed. Please process first");
		return p;
	}


}