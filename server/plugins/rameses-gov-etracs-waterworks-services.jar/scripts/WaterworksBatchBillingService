import com.rameses.annotations.*;
import com.rameses.functions.*;

class WaterworksBatchBillingService {
	
	@DataContext('waterworks_batch_billing')
	def batchEm; 

	@DataContext("waterworks_billing")
	def wbillEm;

	@Service("SingleBillingService")
	def billingSvc;

	@ProxyMethod
	public void processBilling( def o ) {
		def b = null;
		try { b = billingSvc.execute([rulename:'waterworksbilling', params:[objid:o.acctid ]]); } catch(ign) {;}
		def u = [billed: 1];
		if( b?.billitems) {
			def arrears = b.billitems.findAll{ it.reftype == 'waterworks_consumption' }.sum{ it.amount  };
			def surcharge = b.billitems.findAll{it.surcharge}?.sum{ it.surcharge };
			def interest = b.billitems.findAll{it.interest}?.sum{ it.interest };
			def otherFees = b.billitems.findAll{ it.reftype == 'waterworks_otherfee' }?.sum{ it.amount };

			u.arrears = 0;
			u.surcharge = 0;
			u.interest = 0;
			u.otherfees = 0;

			if( arrears ) u.arrears = arrears;
			if( surcharge ) u.surcharge = surcharge;
			if( interest ) u.interest = interest;
			if( otherFees ) u.otherfees = otherFees;
		}
	   	wbillEm.find( [objid: o.objid ] ).update( u );
	}

	@ProxyMethod 
	def getBilledStatus( param ) { 
		if ( !param.objid ) throw new Exception('objid parameter is required'); 
		def m = [batchid: param.objid]; 
		return batchEm.findBilledStatus( m ); 
	} 

	@ProxyMethod 
	public def post( p ) { 
		if ( !p.objid ) throw new Exception('objid parameter is required'); 

		def info = batchEm.find([ objid: p.objid ]).select('objid,state').first(); 
		if ( !info ) throw new Exception('batch transaction not found'); 
		if ( !info.state.toString().equalsIgnoreCase('APPROVED') ) 
			throw new Exception('batch transaction must be in APPROVED status'); 

		batchEm.find([ objid: p.objid ]).update([ state: 'POSTED' ]); 
		wbillEm.find([ batchid: p.objid ]).update([ state: 'POSTED' ]); 
		batchEm.postConsumption([ batchid: info.objid ]); 
		batchEm.postMeterReading([ batchid: info.objid ]); 
		p.state = 'POSTED'; 
		return p;
	}


}