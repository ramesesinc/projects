import com.rameses.annotations.*;
import com.rameses.functions.*;

class WaterworksBatchBillingService {
	
	@DataContext('waterworks_batch_billing')
	def batchEm; 

	@DataContext("waterworks_billing")
	def wbillEm;

	@Service("SingleBillingService")
	def billingSvc;

	@Service("WaterworksComputationService")
	def computeSvc;

	@ProxyMethod
	public void processBilling( def o ) {
		def u = [billed:1, prevreadingdate: null, prevreading: 0];

		def b = billingSvc.execute([rulename:'waterworksbilling', params:[objid:o.acctid ]]); 
		if( b?.billitems) {
			def arrears = b.billitems.findAll{ it.reftype == 'waterworks_consumption' }.sum{ it.amount  };
			def surcharge = b.billitems.findAll{it.surcharge}?.sum{ it.surcharge };
			def interest = b.billitems.findAll{it.interest}?.sum{ it.interest };
			def otherFees = b.billitems.findAll{ it.reftype == 'waterworks_otherfee' }?.sum{ it.amount };
			def credits = b.billitems.findAll{ it.reftype == 'waterworks_credit' }?.sum{ it.amount };

			u.arrears = 0;
			u.surcharge = 0;
			u.interest = 0;
			u.otherfees = 0;
			u.credits = 0;

			if( arrears ) u.arrears = arrears;
			if( surcharge ) u.surcharge = surcharge;
			if( interest ) u.interest = interest;
			if( otherFees ) u.otherfees = otherFees;
			if( credits ) {
				u.credits = credits * -1;
			}	
		}

		if(o.account.meter?.objid) {
			u.prevreadingdate = o.account.meter.lastreadingdate;
			u.prevreading = o.account.meter.lastreading;
		}
		else {
			def res = computeSvc.compute([objid:o.acctid ]);
			u.putAll( res );
			u.reading = 0;
		}

		//get the average consumption for 3 months (default)//
		def avg = batchEm.findAverageConsumption( [acctid: o.acctid, year:o.year, month:o.month, months: 3]  )?.avgcon;
		if(!avg ) avg = 0;
		u.averageconsumption = Math.ceil( avg ); 

		wbillEm.find( [objid: o.objid ] ).update( u );
	}

	@ProxyMethod 
	def getBilledStatus( param ) { 
		if ( !param.objid ) throw new Exception('objid parameter is required'); 
		def m = [batchid: param.objid]; 
		return batchEm.findBilledStatus( m ); 
	} 


	@ProxyMethod
	public void post( def p ) {
		if ( !p.batchid ) throw new Exception('batchid parameter is required in WaterworksBatchBillingService.post'); 

		def info = batchEm.find([ objid: p.batchid ]).select('objid,state').first(); 
		if ( !info ) throw new Exception('batch transaction not found'); 	

		batchEm.find([ objid: p.batchid ]).update([ state: 'POSTED' ]); 
		wbillEm.find([ batchid: p.batchid ]).update([ state: 'POSTED' ]); 
		batchEm.postConsumption([ batchid: p.batchid ]); 
		batchEm.postMeterReading([ batchid: p.batchid ]);

		//select entries where there are advanced payments and post it to the ledger
		

	}


}