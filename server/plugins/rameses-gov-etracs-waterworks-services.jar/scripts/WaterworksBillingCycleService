import com.rameses.annotations.*;

import com.rameses.rules.common.*;
import waterworks.facts.*;
import treasury.facts.*;
import java.util.*;
import com.rameses.util.*;

/****************************
* calculate the date services
*****************************/
class WaterworksBillingCycleService  {
	
	@Service("RuleExecutorService")
	def ruleSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("waterworks_stubout")
	def stub;

	@DataContext("waterworks_billing_cycle")
	def billingcycle;
 
	@ProxyMethod
	public def computeBillingDates( def p ) {
		p.test = false;
		return getBillingDates( p );
	}

	@ProxyMethod
	public def getBillingDates( p ) {
		def sector = p.sector;
	
		def currDate = dateSvc.getServerDate();
		def billdate = ((p.billdate)? p.billdate : currDate); 

		def billdateinfo = dateSvc.parseDate( billdate, null ); 
		def billmonth = billdateinfo.month;
		def billyear = billdateinfo.year;  
		def m = [sectorid: sector, month: billmonth, year: billyear];

		//find billing cycle, if not exist then create
		if( !p.test ) {
			def billCycleRec = billingcycle.find( m ).first(); 
			billCycleRec._existing = true;
			if ( billCycleRec ) return billCycleRec; 
		}


		def facts = [];
		facts << new CurrentDate(currDate);
		facts << new BillDate( billdate );
		facts << new Stubout( sector: sector );
		
		//do this so it will immediately break after initial rulegroup.
		def h = { r-> return false };

		def res = ruleSvc.execute( "waterworksbillingcycle", facts, null, h );
		def period = res.period;
		if(!period) throw new Exception("No billing cycle rules executed")

		def db = new DateBean( period.fromperiod );
		period.month = db.month;
		period.year = db.year;

		period.sectorid = m.sectorid; 
		period.objid = period.sectorid + '-'+ period.year + '-'+ period.month.toString().padLeft(2,'0'); 
		if (!p.test) {
			billingcycle.create( period ); 
		}	
		return period;
	} 

	@ProxyMethod
	public void generateByYear( params ) {
		if ( !params.year ) throw new Exception('year parameter is required'); 
		if ( !params.sectorid ) throw new Exception('sectorid parameter is required'); 

		if ( params.year instanceof String ) {
			params.year = params.year.toInteger(); 
		}

		for (int month=1; month<=13; month++ ) { 
			try { 
				def p = [ sector: params.sectorid, test: true ]; 
				p.billdate = ''+ params.year +'-'+ month.toString().padLeft(2,'0') +'-01';  
				def period = getBillingDates( p ); 
				if( period._existing ) break;
				if ( period.year > params.year ) break;
				if ( period.year == params.year ) { 
					billingcycle.create( period ); 
				} 
			} catch(Throwable t) { 
				t.printStackTrace();
			} 
		}
	}
}