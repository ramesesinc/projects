import com.rameses.annotations.*;

import com.rameses.rules.common.*;
import waterworks.facts.*;
import treasury.facts.*;
import treasury.actions.*;

class WaterworksComputationService  {
	
	@Service("RuleExecutorService")
	def ruleSvc;

	/*************************************************************************************
	* Check first if there is meter, then compute volume = current reading - prev reading
	**************************************************************************************/
	@ProxyMethod
	public def compute( def o ) {

		//if no meter then do not compute 
		def meter = o.acct.meter;
		if( meter?.objid ) {
			if( o.prevreading >= meter.capacity ) {
                throw new Exception("Prev reading must be less than meter capacity");
            }
            if( o.reading >= meter.capacity ) {
                throw new Exception("Reading must be less than meter capacity");
            }
            //calculate volume if volume is not equal to zero
            if(o.volume == 0 ) {
                if( o.reading < o.prevreading ) {
                    o.volume = (meter.capacity + o.reading) - o.prevreading; 
                }
                else {
                    o.volume = o.reading - o.prevreading;
                }
            }
        }

		def facts = [];
		facts << new WaterAccount( o.acct );
		if( meter?.objid ) {
			facts << new WaterMeter( meter );
		};
		facts << new WaterConsumption( o );
		ruleSvc.execute( "waterworkscomputation", facts, null, null );

		def res = [:]
		facts.each { 
			if( it instanceof WaterConsumption ) {
				res.amount = it.amount;
				res.volume = it.volume;
				res.rate = it.rate;
			}
		}
		return res;
	}

}