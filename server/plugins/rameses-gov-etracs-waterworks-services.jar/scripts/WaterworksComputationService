import com.rameses.annotations.*;

import com.rameses.rules.common.*;
import waterworks.facts.*;
import treasury.facts.*;
import treasury.actions.*;

class WaterworksComputationService  {
	
	@Service("RuleExecutorService")
	def ruleSvc;

	@DataContext("waterworks_account")
	def acct;

	//find account by acctno or by objid
	def findAccount(def o) {
		def p = null;    
		if( o.objid ) {
			p = [objid: o.objid];
		}
		else if(o.acctno) {
			p = [acctno:o.acctno];
		}
		if(!p )
		    throw new Exception('Please specify objid or acctno');
		def m = acct.find( p ).first();
		if( !m ) 
			throw new Exception("Waterworks account not found");
		return m;	
	}


	/***********************************************************************
	* It only requires the acct no or objid, then retrieve the classification
	* then specify the volume, month and year
	***********************************************************************/
	@ProxyMethod
	public double compute( def o ) {
		def m = findAccount( o );
		if ( o.volume == null || o.volume < 0 ) 
			throw new Exception('Volume must be greater than or equal to zero');
		
		int vol = o.volume.toInteger();	

		def wc = new WaterConsumption( volume: vol );

		def facts = [];
		facts << wc
		facts << new WaterAccount( m );

		def res = ruleSvc.execute( "waterworkscomputation", facts, null, null );
		return wc.amount;
	}


}