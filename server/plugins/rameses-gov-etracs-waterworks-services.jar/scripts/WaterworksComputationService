import com.rameses.annotations.*;

import com.rameses.rules.common.*;
import waterworks.facts.*;
import treasury.facts.*;
import treasury.actions.*;

class WaterworksComputationService  {
	
	@Service("RuleExecutorService")
	def ruleSvc;

	
	@DataContext("waterworks_account")
	def wacctEm;


	//find account by acctno or by objid
	def findAccount(def o) {
		def p = null;    
		if( o.objid ) {
			p = [objid: o.objid];
		}
		else if(o.acctno) {
			p = [acctno:o.acctno];
		}
		if(!p )
		    throw new Exception('Please specify objid or acctno');
		def m = wacctEm.find( p ).first();
		if( !m ) 
			throw new Exception("Waterworks account not found");
		return m;	
	}


	/***********************************************************************
	* It only requires the acct no or objid, then retrieve the classification
	* then specify the volume, month and year
	***********************************************************************/
	@ProxyMethod
	public def compute( def o ) {
		def m = findAccount( o );

		int vol = 0;
		if( o.volume != null) { 
			vol = o.volume.toInteger();	
		}
		def facts = [];
		facts << new WaterAccount( m );
		facts << new WaterConsumption( volume: vol );
		
		if( m.meter?.objid ) 	facts << new WaterMeter( m.meter );

		ruleSvc.execute( "waterworkscomputation", facts, null, null );

		def res = [:]
		facts.each { 
			if( it instanceof WaterConsumption ) {
				res.amount = it.amount;
				res.volume = it.volume;
			}
		}
		return res;
	}

}