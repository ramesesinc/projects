import com.rameses.annotations.*;

import com.rameses.rules.common.*;
import waterworks.facts.*;
import treasury.facts.*;
import treasury.actions.*;

class WaterworksComputationService  {
	
	@Service("RuleExecutorService")
	def ruleSvc;

	@Service("WaterworksScheduleService")
	def scheduleSvc;	

	@DataContext("waterworks_account")
	def wacctEm;

	@DataContext("waterworks_consumption")
	def wconsEm;


	//find account by acctno or by objid
	def findAccount(def o) {
		def p = null;    
		if( o.objid ) {
			p = [objid: o.objid];
		}
		else if(o.acctno) {
			p = [acctno:o.acctno];
		}
		if(!p )
		    throw new Exception('Please specify objid or acctno');
		def m = wacctEm.find( p ).first();
		if( !m ) 
			throw new Exception("Waterworks account not found");
		return m;	
	}


	/***********************************************************************
	* It only requires the acct no or objid, then retrieve the classification
	* then specify the volume, month and year
	***********************************************************************/
	@ProxyMethod
	public double compute( def o ) {
		def m = findAccount( o );
		if ( o.volume == null || o.volume < 0 ) 
			throw new Exception('Volume must be greater than or equal to zero');
		
		int vol = o.volume.toInteger();	

		def wc = new WaterConsumption( volume: vol );

		def facts = [];
		facts << wc
		facts << new WaterAccount( m );

		def res = ruleSvc.execute( "waterworkscomputation", facts, null, null );
		return wc.amount;
	}


	@ProxyMethod 
	public def createBatch( param ) { 
		if ( !param.acctid ) throw new Exception('acctid parameter is required'); 

		def acctinfo = wacctEm.find([ objid: param.acctid ]).select('objid,stuboutnode.*').first(); 
		if ( !acctinfo ) throw new Exception('waterworks account not found'); 

		def zone = acctinfo.stuboutnode?.zone; 
		if ( !zone?.objid ) throw new Exception('Please specify a zone for this account'); 

		def sched = acctinfo.stuboutnode?.schedule; 
		if ( !sched?.objid ) throw new Exception('Please specify a schedule for zone '+ zone.code); 

		param.items.each{ o-> 
			def m = [ scheduleid: sched.objid, year: o.year, month: o.month ];
			def schedinfo = scheduleSvc.getSchedule( m ); 
			o.readingdate = schedinfo.readingdate;
			o.discdate = schedinfo.discdate;
			o.duedate = schedinfo.duedate;

			o.objid = o.acctid +'-'+ o.year.toString() + o.month.toString().padLeft(2,'0'); 
			o.prevreading = o.reading = o.volume = 0;
			o.amount = o.amtpaid = 0.0;
			o.readingmethod = 'CAPTURE'; 
			o.state = 'CAPTURE';
			wconsEm.create( o ); 

			def oo = wconsEm.read([ objid: o.objid ]); 
			if ( oo ) o.putAll( oo ); 
		} 
		return param; 
	} 
}