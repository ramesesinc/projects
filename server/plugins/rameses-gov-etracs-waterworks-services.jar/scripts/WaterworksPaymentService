import com.rameses.annotations.*;

class WaterworksPaymentService {
	
	@DataContext('waterworks_payment')
	def wp; 

	@DataContext('waterworks_account_consumption')
	def wc; 
	
	@DataContext('waterworks_application_fee')
	def wa; 

	private void postToLedger(def items, boolean isCredit) {
		String expr = (isCredit==true)?"{amtpaid+:amt}":"{amtpaid-:amt}";
		items.each {
			if( !it.txnrefid ) return;
			if( !it.txntype ) return;
			if( it.txntype.matches('WATERSALES.*') ) {
				wc.find( [objid: it.txnrefid ]).update( [amtpaid: expr], [amt: it.amount] );		
			}
			else if( it.txntype.matches('AR_MATERIALS') ) {

			}	
			else {
				wa.find( [objid: it.txnrefid ]).update( [amtpaid: expr], [amt: it.amount] );
			}
		}
	} 

	@ProxyMethod
	public def postCreate( def o ) {
		wp.create( o );
		postToLedger(o.items, true);
	}

	@ProxyMethod
	public def postVoid( def o ) {
		wp.find( [refid: o.refid] ).update( [voided: 1] );
		def objid = wp.find( [refid: o.refid] ).select("objid").val();
		def r = wp.read( [objid: objid] );
		postToLedger( items, false );
	}

	@ProxyMethod
	public def postRemove( def o ) {
		def o = wp.read(o);
		if( o.txnmode !=  'CAPTURE') 
			throw new Exception("Remove payment is only applicable for CAPTURE");
		postToLedger( items, false );
	}


}