import com.rameses.annotations.*;

class WaterworksAccountConsumptionPersistenceInterceptor{
	
	@DataContext("waterworks_consumption")
	def consumption;

	@DataContext("waterworks_account")
	def acct; 

	@Before(pattern="PersistenceService.removeEntity", eval="#{args[0]._schemaname == 'waterworks_consumption'}")
	public void beforeRemove( evt ) {
		def zz = evt.args[0];
		zz.acctid = consumption.select('acctid').find([ objid: zz.objid ]).val();
	}

	@After(pattern="PersistenceService.(create|update|removeEntity)", eval="#{args[0]._schemaname == 'waterworks_consumption'}")
	public void afterPersist(def evt) {
		def zz = evt.args[0];

		//update the maximum in the acct code.
		def z = consumption.select("c:{MAX(billingcycleid)}").find( [acctid:zz.acctid] ).val();
		if ( z ) { 
			def bc = consumption.find([billingcycleid: z]).first(); 
			acct.find( [objid: zz.acctid] ).update( [billingcycleid: z, currentreading: bc.reading, lastdateread: bc.billingcycle.readingdate,billdate:bc.billingcycle.billdate] );
		} else {
			acct.find([ objid: zz.acctid ]).update([ billingcycleid:'{NULL}', currentreading:0, lastdateread:'{NULL}', billdate:'{NULL}']);
		}
	}
}