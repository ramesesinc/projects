import com.rameses.annotations.*;

class WaterworksAccountConsumptionPersistenceInterceptor{
	
	@DataContext("waterworks_meter")
	def meterEm; 

	@After(pattern="PersistenceService.(create|update)", eval="#{args[0]._schemaname == 'waterworks_consumption'}")
	public void afterCreateUpdate( evt ) {
		def zz = evt.args[0];
		if( zz.meterid ) {
			meterEm.find( [objid:zz.meterid ]).update( [lastreading: zz.reading, lastreadingdate: zz.schedule.readingdate] );
		} 
	}

	@Before(pattern="PersistenceService.removeEntity", eval="#{args[0]._schemaname == 'waterworks_consumption'}")
	public void beforeRemove( evt ) {
		def zz = evt.args[0];
		if ( zz.batchid ) 
			throw new Exception('Cannot delete consumption from batch billing'); 
		if( zz.amtpaid > 0 )
			throw new Exception("Cannot delete consumption since payment was already made");
	}

}