import com.rameses.annotations.*;

class WaterworksAccountPersistenceInterceptor{
	
	@DataContext("waterworks_meter")
	def wm;

	@DataContext("waterworks_stubout_node")
	def stubnode;

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@Before(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'waterworks_account'}")
	public void beforeCreate(def evt) {
		def o  = evt.args[0];
        if( !o.acctno ) {
        	def prefix = "WACC" + dateSvc.getServerYear();
        	o.acctno = prefix  + seqSvc.getNextFormattedSeriesA( prefix, 5 );
        }    
	}

	@After(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'waterworks_account'}")
	public void afterCreate(def evt) {
		def o = evt.result;

		//update the meter information
		wm.find([objid:o.meter.objid]).update([currentacctid:o.objid]);
		
		if ( o.stuboutnode?.objid ) { 
			stubnode.find( [objid: o.stuboutnode.objid ]).update( [acctid: o.objid] );
		} 
	}

	@After(pattern="PersistenceService.read", eval="#{args[0]._schemaname == 'waterworks_account'}")
	public void afterRead( evt ) {
		def o = evt.result;
		if ( o.zone ) { 
			// a workaround to match the combo listing of zones 
			o.zone.remove('readerid'); 
		} 
	}
}