import com.rameses.annotations.*;

import java.rmi.server.UID;
import com.rameses.util.*;
import treasury.utils.*;
import treasury.facts.*;
import waterworks.facts.*;
import com.rameses.annotations.*;
import com.rameses.util.*;

class WaterworksBasicBillingInterceptor {
	
	@DataContext('waterworks_account')
	def acctEm; 

	@DataContext("waterworks_consumption")
	def wcEm;

	@DataContext("waterworks_credit")
	def wcCreditEm;

	@DataContext("waterworks_otherfee")
	def wotherEm;

    @After(pattern="BasicBillingHandler.getInfo",  eval="#{ args[0].rulename == 'waterworksbilling' }" )
	public void getInfo(def evt) {
		def obj = evt.args[0];
		def r = evt.result;
		def p = obj.params;

		def acct = null;
		if( p.objid ) {
			acct = acctEm.find([objid:p.objid]).first(1);
		}
		else if( p.id ) {
			acct = acctEm.find([acctno:p.id]).first(1);
		}
		if(!acct) throw new Exception("Waterworks Account not found");

		r.putAll( acct );
		r.acctid = acct.objid;
		r.schedule = acct.stuboutnode?.schedule; 
		r.sector = acct.stuboutnode?.sector; 
		r.zone   = acct.stuboutnode?.zone; 
	}
 
    @After(pattern="BasicBillingHandler.getBillItems",  eval="#{ args[0].rulename == 'waterworksbilling' }" )
	public void getWaterworksBillItems(def evt) {
		def p = evt.args[0];
		def bill = evt.args[1];
		def list = evt.result;

		def arr = [];
		def wp = [:];
		if(p.params.payoption) {
			arr << "((year * 12)+month) <= :yearmonth";
			wp.yearmonth = (p.params.payoption.year * 12)+p.params.payoption.month;
		} 
		arr << "amount - amtpaid > 0"
		def select = "year,month,volume,amount:{amount-amtpaid},refid:{objid},reftype:{'waterworks_consumption'},duedate,discdate"; 
		def conList = wcEm.find([acctid: bill.acctid]).select(select).where(arr.join(" AND "), wp).orderBy("year,month").list();
		list.addAll( conList );

		//select for other fees
		select = "year,month,item.*,amount:{amount-amtpaid},refid:{objid},reftype:{'waterworks_otherfee'}";
		conList = wotherEm.find([acctid: bill.acctid]).select(select).where(arr.join(" AND "), wp).orderBy("year,month").list();
		list.addAll( conList );

	}

 	@After(pattern="BasicBillingHandler.getCreditItems",  eval="#{ args[0].rulename == 'waterworksbilling' }" )
	public void getWaterworksCreditItems(def evt) {
		def p = evt.args[0];
		def bill = evt.args[1];		
		def list = evt.result;
		def s =  "amount:{amtpaid-amount},refid:{objid},reftype:{'waterworks_credit'},item.*"
		def conList = wcCreditEm.find( [parentid: bill.acctid] ).where(" amount - amtpaid > 0 ").select(s).list();
		list.addAll( conList );
	}


	@After(pattern="FactBuilderService.getFacts",  eval="#{ args[0] == 'waterworksbilling' }")
	public void buildFactsForBilling(def evt) {
		def data = evt.args[1];
		def zone = data.zone; 
		def sector = data.sector; 
		def schedule = data.schedule;
		if(  !schedule?.objid ) throw new Exception("Please specify a schedule for zone " + zone?.code +" sector "+ sector?.code );

		def factBuilder = evt.result;
		factBuilder.facts << new Sector( objid: sector?.objid);
		factBuilder.facts << new Zone( objid: zone?.objid,  sectorid: sector?.objid );
		factBuilder.facts << new WaterBlockSchedule( id: schedule.objid );
		if( data.meter?.objid ) {
			factBuilder.facts << new WaterMeter( data.meter );
		}

		factBuilder.billItemProvider.createBillItemFact = { o-> 
			if( o.reftype == 'waterworks_consumption' ) {
				return  new WaterBillItem(o);
			}
			else if( o.reftype == 'waterworks_credit' ) {
				return new CreditBillItem( o );
			}
			else {
				return new MonthBillItem(o);
			}
		} 
		
		if(data.attributes) {
			data.attributes.each {
				factBuilder.facts << new Attribute( it.attribute );
			}
		}
	}

	/*******************************************
    * CASH RECEIPT SPECFIC HANDLERS
	********************************************/
	//applicable for cash receipt billing
	@After( pattern="BasicBillingHandler.formatReceiptInfo", eval="#{  args[0].txntype?.contains('waterworks')  }")
	public void formatCashReceipt(def evt ) {
		def info = evt.args[1];
		def res = evt.result;
		if(info.owner?.objid) {
			res.payer = info.owner;
		}
		res.paidby = info.acctname + " (" + info.acctno + ")";
		res.paidbyaddress = info.address?.text;
		res.acctno = info.acctno;
		res.acctid = info.objid;
	} 

	/***********************************************************
    * THIS IS BOTH USED BY CASH RECEIPT AND CAPTURE PAYMENT
	************************************************************/
	@After( pattern="BasicBillingHandler.getPostPaymentInfo", eval="#{  args[0].txntype.toString().contains('waterworks')  }")
	public void getPostPaymentInfo( evt ) {
		def bill = evt.args[1];
		def result = evt.result;
		result.parentid =  bill.acctid;
		result.rootid =  bill.acctid;
		result.items = bill.billitems;
		result._schemaname = 'waterworks_payment';
		result.creditschemaname = 'waterworks_credit';
		result.parentschemaname = "waterworks_account";
	} 

//	@After( pattern="SingleBillingHandler.getPaymentWorkflow", eval="#{  args[0].collectiontype.handler?.contains('waterworks')  }")
//	public void getWorkflowTask(def evt ) {
//		def p = evt.args[0];
//		def result = evt.result;
//		if(p.taskid) {
//			result.processname = 'waterworks_application';
//			result.refid = p.txnid; 
//			result.taskid = p.taskid;
//			result.taskstate = 'payment';
//			result.payaction = "post"
//			result.voidaction = "return";
//		}
//	} 
//
//
	@After( pattern="BasicBillingHandler.getVoidInfo", eval="#{ args[0].collectiontype.handler?.contains('waterworks') }")
	public void getVoidInfo(def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		result._schemaname = 'waterworks_payment';
		result.creditschemaname = 'waterworks_credit';
	} 

}