import com.rameses.annotations.*;
import treasury.facts.*;

class WaterworksBatchBillingInterceptor {
	
	@DataContext("waterworks_batch_billing")
	def batchEm;

	@DataContext("waterworks_batch_billing_task")
	def taskEm;

	@Service("WorkflowTaskService")
	def taskSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("waterworks_consumption")
	def wbillEm;

	@Service("WaterworksBatchBillingService")
	def batchBillingSvc;

	@Before(pattern="PersistenceService.create", eval="#{ args[0]._schemaname == 'waterworks_batch_billing' }")
	public void beforeCreate( evt ) { 
		def o = evt.args[0];
		o.objid = 'WBILL' + o.zone.code + o.year + o.month.toString().padLeft(2, '0' );
		o.state = 'DRAFT';
	}

	@After(pattern="PersistenceService.create", eval="#{ args[0]._schemaname == 'waterworks_batch_billing' }")
	public void buildBillItems( evt ) { 
		def o = evt.args[0];
		def m = [ batchid: o.objid ];

		batchEm.buildBillings( m );
		if ( !wbillEm.find(m).first()) 
			throw new Exception('No available accounts for this batch. Please verify.'); 
		
		def p = [:];
		p.processname = 'waterworks_batch_billing';
		p.refid = o.objid;
		p.startdate = dateSvc.serverDate;
		taskSvc.start(p);
	}

	@Before(pattern="WorkflowTaskService.signal", 
		eval="#{ args[0].processname == 'waterworks_batch_billing' && args[0].taskstate == 'approved' && args[0].action == 'post'  }")
	public void beforePost( def evt ) {
		def p = evt.args[0];

		if(!p.refid) throw new Exception("Error WorkflowTaskService.signal post error. refid is required");
		
		batchBillingSvc.post([ batchid: p.refid ]);
	}


	@Before(pattern="PersistenceService.removeEntity", eval="#{ args[0]._schemaname == 'waterworks_batch_billing'}")
	void beforeRemoveEntity( evt ) {
		def p = evt.args[0]; 
		if ( batchEm.find([ objid: p.objid ]).select('task.state').val()?.state != 'draft' )
			throw new Exception('Transaction must be in draft state');  

		wbillEm.find([ batchid: p.objid ]).delete(); 
		batchEm.find([ objid: p.objid ]).update([ taskid: '{NULL}' ]); 
		taskEm.find([ refid: p.objid ]).delete();
	}

}