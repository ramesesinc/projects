import com.rameses.annotations.*;
import java.rmi.server.UID;

class WaterworksCashReceiptInterceptor{

	@DataContext('waterworks_application_fee')
	def appFee;

	@DataContext("waterworks_account_ledger")
	def ledger;	

	@DataContext("waterworks_payment")
	def wp;	

	@Service('WorkflowTaskService')
	def taskSvc;

	@Service('WaterworksAccountBillingService')
	def billingSvc;

	@Service('LedgerPaymentService') 
	def ledgerPaymentSvc;

	@After(pattern="CashReceiptService.post", eval="#{result.collectiontype?.handler == 'waterworks'}")
	public void postPayment( evt) {
		def o = evt.args[0]; 
		def m = [:]
		if(!o.applicationid && !o.acctid) 
			throw new Exception("WaterworksCashreceipt.post interceptor error. applicationid or acctid is required!");

		def appid = o.applicationid;
		def acctid = o.acctid;

		//post waterworks_payment. This is different from cashreceipt bec. this allows us to reverse transactions
		def pmt = [ _schemaname:'waterworks_payment' ];
		if ( acctid ) { 
			pmt.acctid = acctid;
		} else { 
			pmt.applicationid = appid;
		} 
		pmt.reftype = "cashreceipt";
		pmt.refid = o.objid;			//the cash receipt objid
		pmt.refno = o.receiptno;		
		pmt.refdate = o.receiptdate;
		pmt.amount = o.amount;
		pmt.txnmode = 'ONLINE';
		pmt.voided = 0;
		pmt.items = [];
		o.items.each {
			def p = [:];
			p.acctid = pmt.acctid;
			p.applicationid = pmt.applicationid; 
			p.installmentid = it.installmentid;
			p.txnrefid = it.refid;
			p.amount = it.amount;
			p.discount = 0;
			p.surcharge = 0;
			p.interest = 0;
			p.item = it.item;
			pmt.items << p;
		}

		ledgerPaymentSvc.post( pmt ); 

		def billres = billingSvc.getBilling([ applicationid: pmt.applicationid, acctid: pmt.acctid ]); 
		//check if were allowed to signal the process by checking the billing balance
		if( billres != null && appid ) {
			taskSvc.signal( [processname:'waterworks_application', refid: appid, state:'for-payment', action:'submit'] );
		} 
	}

	@After(pattern="CashReceiptVoidService.post",index=0,eval="#{result.receipt.collectiontype.handler=='waterworks'}")
	public void voidPayment( evt) {
		def rct = evt.result.receipt;
		ledgerPaymentSvc.postVoid([ _schemaname: 'waterworks_payment', refid: rct.objid ]); 
	} 
}