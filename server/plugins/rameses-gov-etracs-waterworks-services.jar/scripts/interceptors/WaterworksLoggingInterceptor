import com.rameses.annotations.*; 

class WaterworksLoggingInterceptor {

	private final boolean LOG_ENABLED = true; 

	@DataContext('txnlog') 
	def txnlog_em; 

	@DataContext(dynamic=true)
	def db;

	@Env 
	def env; 

	@Service('DateService')
	def dateSvc; 

	private void log( data ) {
		if ( !data.objid ) data.objid = 'LOG'+ new java.rmi.server.UID(); 

		if ( !data.userid ) data.userid = env.USERID; 
		if ( !data.username ) data.username = env.NAME; 

		data.txndate = dateSvc.getServerDate(); 
		txnlog_em.create( data );  
	} 

	@After(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'waterworks_account'}", index=9999) 
	public void afterCreateAccount( evt ) {
		def result = evt.result; 
		log([
			action  : 'create', 
			refid   : result.objid, 
			ref     : 'waterworks_account', 
			remarks : 'created account '+ (result.acctno? result.acctno: '')  
		]); 
	}

	@Before(pattern="PersistenceService.update", eval="#{args[0]._schemaname == 'waterworks_account'}", index=9999) 
	public void beforeUpdateAccount( evt ) { 
		def params = evt.args[0]; 
		def pk = params.findBy?.objid; 
		if ( !pk ) pk = params.objid; 

		params._refid = pk; 
	} 

	@After(pattern="PersistenceService.update", eval="#{args[0]._schemaname == 'waterworks_account'}", index=9999) 
	public void afterUpdateAccount( evt ) {
		def params = evt.args[0];
		def remarks = (params._actiontype ? params._actiontype : ''); 
		if ( params.reason ) {
			if ( remarks ) remarks += ' : '; 

			remarks += params.reason; 
		}

		def result = evt.result; 
		log([
			action  : 'update', 
			refid   : params._refid, 
			ref     : params._schemaname,
			remarks : remarks 
		]); 
	}

	@After(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'waterworks_consumption'}", index=9999) 
	public void afterCreateConsumption( evt ) { 
		logConsumption( evt, 'create' );  
	}	
	@After(pattern="PersistenceService.update", eval="#{args[0]._schemaname == 'waterworks_consumption'}", index=9999) 
	public void afterUpdateConsumption( evt ) {
		logConsumption( evt, 'update' );  
	}	
	private void logConsumption( evt, action ) {
		def params = evt.args[0];
		def result = evt.result; 
		log([
			action  : action, 
			refid   : params.objid, 
			ref     : params._schemaname,
			remarks : params.readingmethod +' : reading='+ params.reading +', prevreading='+ params.prevreading
		]); 	
	}

	@Before(pattern="PersistenceService.removeEntity", eval="#{args[0]._schemaname == 'waterworks_consumption'}", index=9999) 
	public void beforeRemoveConsumption( evt ) {
		def params = evt.args[0]; 
		if ( params.objid && params._schemaname ) { 
			def em = db.lookup( params._schemaname );  
			def o = em.find([ objid: params.objid ]).first(); 
			if ( !o ) return; 

			params._loginfo = [
				action : 'deleteConsumption', 
				refid  : o.acctid, 
				ref    : 'waterworks_account', 
				remarks: 'Deleted from billing cyle '+ o.billingcycleid 
			]; 
		} 
	} 
	@After(pattern="PersistenceService.removeEntity", eval="#{args[0]._schemaname == 'waterworks_consumption'}", index=9999) 
	public void afterRemoveConsumption( evt ) { 
		def params = evt.args[0]; 
		if ( params._loginfo ) { 
			log( params._loginfo ); 
		} 
	} 

	@After(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'waterworks_installment'}", index=9999) 
	public void afterCreateInstallment( evt ) { 
		logInstallment( evt, 'create' ); 
	}		
	@After(pattern="PersistenceService.update", eval="#{args[0]._schemaname == 'waterworks_installment'}", index=9999) 
	public void afterUpdateInstallment( evt ) { 
		logInstallment( evt, 'update' ); 
	}		
	private void logInstallment( evt, action ) {
		def params = evt.args[0];
		log([
			action  : action, 
			refid   : params.objid, 
			ref     : params._schemaname, 
			remarks : params.txntypeid +' : '+ params.particulars 
		]); 
	} 

	@Before(pattern="PersistenceService.removeEntity", eval="#{args[0]._schemaname == 'waterworks_installment'}", index=9999) 
	public void beforeRemoveInstallment( evt ) {
		def params = evt.args[0]; 
		if ( params.objid && params._schemaname ) { 
			def em = db.lookup( params._schemaname );  
			def o = em.find([ objid: params.objid ]).first(); 
			if ( !o ) return; 

			params._loginfo = [
				action : 'deleteInstallment', 
				refid  : o.acctid, 
				ref    : 'waterworks_account', 
				remarks: 'Deleted installment record '+ o.controlno  
			]; 
		} 
	} 
	@After(pattern="PersistenceService.removeEntity", eval="#{args[0]._schemaname == 'waterworks_installment'}", index=9999) 
	public void afterRemoveInstallment( evt ) { 
		def params = evt.args[0]; 
		if ( params._loginfo ) {
			log( params._loginfo ); 
		}
	} 	

	@After(pattern="WaterworksPaymentService.postCreate", index=9999) 
	public void afterPostCreatePayment( evt ) { 
		def result = evt.args[0]; 
		log([ 
			action  : 'create', 
			refid   : result.objid, 
			ref     : 'waterworks_payment', 
			remarks : result.txnmode +' '+ result.refno  
		]); 
	} 	
	@Before(pattern="PersistenceService.removeEntity", eval="#{args[0]._schemaname == 'waterworks_payment'}", index=9999) 
	public void beforeRemovePayment( evt ) {
		def params = evt.args[0]; 
		if ( params.objid && params._schemaname ) { 
			def em = db.lookup( params._schemaname );  
			def o = em.find([ objid: params.objid ]).first(); 
			if ( !o ) return; 

			params._loginfo = [
				action : 'deletePayment', 
				refid  : o.acctid, 
				ref    : 'waterworks_account', 
				remarks: 'Deleted payment record '+ o.refno   
			]; 
		} 
	} 	
	@After(pattern="PersistenceService.removeEntity", eval="#{args[0]._schemaname == 'waterworks_payment'}", index=9999) 
	public void afterRemovePayment( evt ) { 
		def params = evt.args[0]; 
		if ( params._loginfo ) {
			log( params._loginfo ); 
		} 
	} 
}
