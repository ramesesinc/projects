import com.rameses.annotations.*;

import java.rmi.server.UID;
import com.rameses.util.*;
import treasury.utils.*;
import treasury.facts.*;
import waterworks.facts.*;
import com.rameses.annotations.*;
import com.rameses.util.*;

class WaterworksSingleBillingInterceptor {
	
	@DataContext('waterworks_account')
	def acctEm; 

	@DataContext("waterworks_consumption")
	def wcEm;

    @After(pattern="SingleBillingHandler.getInfo",  eval="#{ args[0].rulename == 'waterworksbilling' }" )
	public void getInfo(def evt) {
		def obj = evt.args[0];
		def r = evt.result;
		def p = obj.params;
		def acct = null;
		if( p.objid ) {
			acct = acctEm.find([objid:p.objid]).first(1);
		}
		else if( p.id ) {
			acct = acctEm.find([acctno:p.id]).first(1);
		}
		if(!acct) throw new Exception("Waterworks Account not found");
		r.putAll( acct );
		r.acctid = acct.objid;
	}
 
    @After(pattern="SingleBillingHandler.getBillItems",  eval="#{ args[0].rulename == 'waterworksbilling' }" )
	public void getWaterworksBillItems(def evt) {
		def p = evt.args[0];
		def list = evt.result;

		def arr = [];
		def wp = [:];
		if(p.params.payoption) {
			arr << "((year * 12)+month) <= :yearmonth";
			wp.yearmonth = (p.params.payoption.year * 12)+p.params.payoption.month;
		} 
		arr << "amount - amtpaid > 0"
			
		def select = "year,month,volume,amount,amtdue:{amount-amtpaid},refid:{objid},reftype:{'waterworks_consumption'}"; 
		def conList = wcEm.find([acctid: p.acctid]).select(select).where(arr.join(" AND "), wp).orderBy("year,month").list();
		list.addAll( conList );
	}

	@After(pattern="FactBuilderService.getFacts",  eval="#{ args[0] == 'waterworksbilling' }")
	public void buildFactsForBilling(def evt) {
		def data = evt.args[1];
		
		def factBuilder = evt.result;
		factBuilder.facts << new Stubout( zone:data.zoneid, sector:data.sector?.objid );

		if(  !data.zone?.schedule ) throw new Exception("Please specify a schedule for zone " + data.zone?.code );
		factBuilder.facts << new WaterBlockSchedule( id: data.zone.schedule.objid );

		factBuilder.billItemProvider.createBillItemFact = { o-> 
			if( o.reftype == 'waterworks_consumption' ) {
				return  new WaterBillItem(o);
			}
			else {
				return new MonthBillItem(o);
			}
		};
		factBuilder.addBillItems( data.billitems ); 
		if(data.attributes) {
			data.attributes.each {
				factBuilder.facts << new Attribute( it.attribute );
			}
		}
	}

	@After(pattern="SingleBillingService.execute",  eval="#{ args[0].rulename == 'waterworksbilling' }" )
	public void afterBilling(def evt) {
		def r = evt.result;
		/*
		if( m.consumption ) {
			m.chartdata = m.consumption.collect{ [month:it.month, consumption:it.consumption] }
			m.averageconsumption = (int) (m.consumption.sum{it.consumption} / m.consumption.size());
		}
		else {
			m.chartdata = [];
			m.averageconsumption = 0;
		}
		r.billitems.each {
			it.parent = app;
		}		
		*/
	}

	/*******************************************
    * CASH RECEIPT SPECFIC HANDLERS
	********************************************/
	//applicable for cash receipt billing
	@After( pattern="SingleBillingHandler.formatReceiptInfo", eval="#{  args[0].collectiontype.handler == 'waterworks'  }")
	public void formatCashReceipt(def evt ) {
		def info = evt.args[0].params;
		def res = evt.result;
		if(info.owner?.objid) {
			res.payer = info.owner;
		}
		res.paidby = info.acctname + " (" + info.acctno + ")";
		res.paidbyaddress = info.address?.text;
		res.acctno = info.acctno;
		res.acctid = info.objid;
	} 

	/***********************************************************
    * THIS IS BOTH USED BY CASH RECEIPT AND CAPTURE PAYMENT
	************************************************************/
	@After( pattern="SingleBillingHandler.getPostPaymentInfo", eval="#{  args[0].collectiontype.handler == 'waterworks'  }")
	public void getPostPaymentInfo(def evt ) {
		def e = evt.args[0];
		def result = evt.result;
		result.parentid =  e.acctid;
		result.rootid =  e.acctid;
		result.items = e.billitems;
		result.parentschemaname = "waterworks_account";
	} 

	@After( pattern="SingleBillingHandler.getPaymentWorkflow", eval="#{  args[0].collectiontype.handler == 'waterworks'  }")
	public void getWorkflowTask(def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		if(p.taskid) {
			result.processname = 'waterworks_application';
			result.refid = p.txnid; 
			result.taskid = p.taskid;
			result.taskstate = 'payment';
			result.payaction = "post"
			result.voidaction = "return";
		}
	} 


	@After( pattern="SingleBillingHandler.getVoidPaymentWorkflow", eval="#{  args[0].collectiontype.handler == 'waterworks' }")
	public void getVoidWorkflowTask(def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		/*
		result.processname = 'waterworks_application';
		result.refid = p.appid;
		result.taskid = p.taskid;
		result.action = 'return';
		*/
	} 

}