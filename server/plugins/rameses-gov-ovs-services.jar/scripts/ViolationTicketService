import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;

class ViolationTicketService {

	@DataContext("ovr_violation_ticket")
	def ovt;

	@DataContext("ovr_violation_ticket_entry")
	def ovte;

	@DataContext("ovr_violation_ticket_vehicle")
	def ovtv;

	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public def getList(def o){
		o.searchtext = o.searchtext ? o.searchtext : '%';
		return ovt.where("ticketno LIKE :searchtext",[searchtext:o.searchtext]).list();
	}

	@ProxyMethod
	public def open(def o){
		return ovt.find([objid:o.objid]).first();
	}

	@ProxyMethod
	public def create(def o){
		o.dtcreated = dateSvc.getServerDate();
		def data = ovt.create(o);
		o.entry.each{ ovte.create(it); }
		ovtv.create([parentid:o.objid,vehicleid:o.vehicle.objid]);
		return data;
	}

	@ProxyMethod
	public def update(def o){
		ovte.find([parentid:o.objid]).delete();
		o.entry.each{ ovte.create(it); }
		ovtv.find([parentid:o.objid]).delete();
		ovtv.create([parentid:o.objid,vehicleid:o.vehicle.objid]);
		return ovt.find([objid:o.objid]).update(o);
	}

	@ProxyMethod
	public void removeEntity(def o){
		ovte.find([parentid:o.objid]).delete();
		ovtv.find([parentid:o.objid]).delete();
		ovt.find([objid:o.objid]).delete();
	}

	@ProxyMethod
	def getViolations(params){
		return ovt.getViolations(params);
	}

	@ProxyMethod
	def getViolationsPerTicket(params){
		return ovt.getViolationsPerTicket(params);
	}

	@ProxyMethod
	def getVehiclePerTicket(params){
		return ovt.findVehiclePerTicket(params);
	}
}