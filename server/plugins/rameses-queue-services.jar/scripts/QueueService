import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.util.*;
import java.rmi.server.UID;

class QueueService { 

    @XConnection('ws_sender')
    def wssender;

	@XConnection("queue_poll")
	def queue_poll;

	@DataContext(value='queue_group', adapter='queue') 
	def qg; 

	@DataContext(value='queue_counter', adapter='queue') 
	def qc; 

	@DataContext(value='queue_section', adapter='queue') 
	def qs; 

	@DataContext(value='queue_number', adapter='queue') 
	def qn; 

	@DataContext(value='queue_number_archive', adapter='queue') 
	def qna; 	

	@DataContext(value='queue_number_counter', adapter='queue') 
	def qnc; 

	@Service('DateService')
	def dateSvc;

	@Service 
	def self; 


	/* initiated by taxpayer to get the next current series number  */
	@ProxyMethod 
	public def fetchNextNumber( o ) {
		if ( !o.sectionid ) throw new Exception('sectionid parameter is required');

		def m = qs.find([ objid: o.sectionid ]).first(); 
		if ( !m ) throw new Exception('queue section does not exist'); 

		def prefix = m.prefix; 
		def nextseries = m.currentseries+1; 
		qs.find([ objid: o.sectionid ]).update([ currentseries: nextseries ]); 

		def dd = [ 
			txndate: dateSvc.getServerDate(), 
			groupid: m.groupid, sectionid: m.objid, 
			seriesno: nextseries, state : 'PENDING' 
		]; 
		dd.ticketno = formatSeriesNumber([ seriesno: dd.seriesno, prefix: prefix ]); 
		qn.create( dd ); 
		return dd.ticketno; 
	} 

	@ProxyMethod
	def formatSeriesNumber( data ) {
		if ( data.seriesno ) {
			def prefix = (data.prefix? data.prefix : ''); 
			def snum = data.seriesno.toString();
			if ( snum.length() < 4 ) { 
				snum = snum.padLeft(4,'0'); 
			} 
			return ''+prefix+snum; 
		} else { 
			return ''; 
		} 
	} 

	@ProxyMethod 
	public def getWaitingList( params ) {
		return qn.getPendingList([ sectionid: params.sectionid, state:'PENDING', _limit: 3 ]); 
	}

	@ProxyMethod 
	public def getPendingSections( params ) { 
		return qn.getPendingSections( params ); 
	} 
} 