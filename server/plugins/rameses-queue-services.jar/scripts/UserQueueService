import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.util.*;

class UserQueueService { 

    @XConnection('ws_sender')
    def wssender;

	@XConnection("queue_poll")
	def queue_poll;

	@DataContext(value='queue_group', adapter='queue') 
	def qg; 

	@DataContext(value='queue_counter', adapter='queue') 
	def qc; 

	@DataContext(value='queue_section', adapter='queue') 
	def qs; 

	@DataContext(value='queue_number', adapter='queue') 
	def qn; 

	@DataContext(value='queue_number_archive', adapter='queue') 
	def qna; 

	@DataContext(value='queue_number_counter', adapter='queue') 
	def qnc; 

	@DataContext(value='queue_counter_section', adapter='queue') 
	def qcs; 

	@Service('DateService')
	def dateSvc;

	@Service('QueueService')
	def queueSvc;

	@Service 
	def self; 

	@Env 
	def env;

	@ProxyMethod 
	public def init() {
		def m = qc.find([ objid: env.TERMINALID ]).first(); 
		if( m == null ) return [objid:env.TERMINALID, sections: [] ];

		if ( !m ) throw new Exception('No queue counter registered for this terminal. Please contact queue administrator');

		m.sections = qcs.getCounterSections([ counterid: m.objid ]); 

		def c = qc.findCurrentNumber([ counterid: env.TERMINALID ]);
		if ( c ) {
			m.current = c;
			m.current.currentno = queueSvc.formatSeriesNumber(c);
		} 
		return m;  
	} 

	/*
		initiated by operator 
	*/
	@ProxyMethod 
	public def takeNextNumber( o ) { 
		if ( !o.sectionid ) throw new Exception('sectionid parameter is required');
		if ( !o.counterid ) throw new Exception('counterid parameter is required');

		def rundate = dateSvc.getServerDate();
		def a = qs.find([ objid: o.sectionid ]).first(); 
		if ( !a ) throw new Exception('queue section does not exist'); 

		def m = qn.findNextAvailableNumber( o ); 
		if ( !m ) throw new Exception('No available queue number'); 

		qnc.create([ objid: m.objid, counterid: o.counterid ]); 

		m.prefix = a.prefix; 
		if ( !m.ticketno ) {
			m.ticketno = queueSvc.formatSeriesNumber( m ); 
			qn.find([ objid: m.objid ]).update([ ticketno: m.ticketno ]); 
		} 

		def dd = qn.find([ objid: m.objid ]).first();
		dd.ticketno = m.ticketno; 
		dd.dtfiled = dd.txndate;
		dd.state = 'PROCESSING'; 
		dd.startdate = rundate; 
		dd.servedby = [objid: env.USERID, name: env.FULLNAME ];
		dd.counter = qc.find([ objid: o.counterid ]).first(); 
		dd.group = qg.find([ objid: a.groupid ]).first(); 
		dd.section = a; 
		qna.create( dd ); 

		try {
			return dd.ticketno; 
		} finally { 
			notify([ 
				sectionid: o.sectionid, counterid: o.counterid, 
				seriesno: m.seriesno, ticketno: dd.ticketno,  
				type:'TAKE_NUMBER', prefix: a.prefix 
			]); 
		} 
	} 

	@ProxyMethod 
	public void consumeNumber( o ) {
		if ( !o.counterid ) throw new Exception('counterid parameter is required'); 

		def rundate = dateSvc.getServerDate();
		def qncdata = qnc.find([ counterid: o.counterid ]).first(); 
		if ( !qncdata ) return; 

		qnc.find([ objid: qncdata.objid ]).delete(); 

		def qndata = qn.find([ objid: qncdata.objid ]).first(); 
		qn.find([ objid: qndata.objid ]).delete(); 
		qna.find([ objid: qndata.objid ]).update([ state: 'CLOSED', enddate: rundate ]); 

		def qsdata = qs.find([ objid: qndata.sectionid ]).first(); 
		notify([ 
			counterid: o.counterid, sectionid: qsdata.objid, prefix: qsdata.prefix, 
			type:'CONSUME_NUMBER', seriesno: qndata.seriesno, ticketno: qndata.ticketno 
		]); 
	} 

	@ProxyMethod 
	public void buzzNumber( o ) { 
		if ( !o.counterid ) throw new Exception('counterid parameter is required'); 

		def qncdata = qnc.find([ counterid: o.counterid ]).first(); 
		if ( !qncdata ) throw new Exception('No available queue number for this counter');

		def qndata = qn.find([ objid: qncdata.objid ]).first(); 
		def qsdata = qs.find([ objid: qndata.sectionid ]).first(); 

		notify([ 
			counterid: o.counterid, sectionid: qsdata.objid, prefix: qsdata.prefix, 
			type:'BUZZ_NUMBER', seriesno: qndata.seriesno, ticketno: qndata.ticketno 
		]); 
	} 

	@ProxyMethod 
	public void skipNumber( o ) {
		if ( !o.counterid ) throw new Exception('counterid parameter is required'); 

		def rundate = dateSvc.getServerDate();
		def m = qnc.find([ counterid: o.counterid ]).first(); 
		qn.find([ objid: m.objid ]).update([ state: 'SKIP' ]); 
		qnc.find([ objid: m.objid ]).delete(); 
		qna.find([ objid: m.objid ]).update([ 
			servedby: [ objid: env.USERID, name: env.FULLNAME ], 
			counter: qc.find([ objid: o.counterid ]).first(), 
			state: 'SKIP', enddate: rundate 
		]); 
	} 


	@ProxyMethod 
	public def getQueueSections() {
		return qs.getList(); 
	} 


	void notify( data ) { 
		def uuid = ''+ data.sectionid +'_'+ data.counterid; 
		data.uuid = uuid.toLowerCase(); 
		data.formattedseriesno = formatSeriesNumber( data ); 
		self.notifyHttp( data ); 
		self.notifyWs( data ); 
	} 

	def formatSeriesNumber( data ) {
		if ( data.seriesno ) {
			def prefix = (data.prefix? data.prefix : ''); 
			def snum = data.seriesno.toString();
			if ( snum.length() < 4 ) { 
				snum = snum.padLeft(4,'0'); 
			} 
			return ''+prefix+snum; 
		} else { 
			return ''; 
		} 
	} 

	@Async 
	@ProxyMethod(local=true) 
	public void notifyHttp( data ) { 
		if ( data ) { 
			queue_poll.send( data );  
		} 
	} 
	@Async 
	@ProxyMethod(local=true) 
	public void notifyWs( data ) { 
		if ( !data ) return; 

		data.channel = data.group = 'queue'; 

		wssender.send([ 
            channel : data.channel, 
            group   : data.group, 
            data    : resolveData( data )  
        ]); 
	} 	

	def resolveData( data ) {
        try {
            return new Base64Cipher().decode( data ); 
        } catch(Throwable t) { 
            return data; 
        } 
    }  


} 