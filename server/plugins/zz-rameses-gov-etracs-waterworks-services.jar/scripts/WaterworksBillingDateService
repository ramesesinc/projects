import com.rameses.annotations.*;

import com.rameses.rules.common.*;
import waterworks.facts.*;
import treasury.facts.*;

/****************************
* calculate the date services
*****************************/
class WaterworksBillingDateService  {
	
	@Service("RuleExecutorService")
	def ruleSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("waterworks_stubout")
	def stub;
 
	@ProxyMethod
	public def getBillingDates( def p ) {

		def so = p.stubout;

		if(!so.objid) throw new Exception("stubout id is required");
		so = stub.find( [objid: so.objid ]).first();
		
		def currDate = dateSvc.getServerDate();
		
		def facts = [];
		facts << new CurrentDate(currDate);
		facts << new BillDate( ((p.billdate)? p.billdate : currDate) );
		facts << new Stubout(zone: so.zone.objid, sector: so.zone.sector?.objid, barangay:so.barangay?.objid);
		
		//do this so it will immediately break after initial rulegroup.
		def h = { r-> return false };

		def res = ruleSvc.execute( "waterworksbilling", facts, null, h );
		def period = res.period;
		period.rundate = currDate;
		return period;
	}



}