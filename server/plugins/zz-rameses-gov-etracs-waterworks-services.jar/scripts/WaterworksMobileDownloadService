import com.rameses.annotations.*;
import java.rmi.server.*;
import com.rameses.util.*;
import com.rameses.functions.*;
import java.text.*;

class WaterworksMobileDownloadService {
	
	@DataContext("waterworks_mobile_header")
	def header;

	@DataContext("waterworks_mobile_info")
	def wm;

	@DataContext("waterworks_account")
	def wa;

	@DataContext("vw_waterworks_stubout")
	def vw_waterworks_stubout;

	@DataContext("waterworks_stubout")
	def ws;

	@DataContext('collectiontype_account') 
	def cta;

	@DataContext('waterworks_sector_reader') 
	def wsr;

	@DataContext('waterworks_sector_zone') 
	def wsz;

	@Service("DateService")
	def dateSvc;

	@Service("WaterworksBillingService")
	def billingSvc;

	@Service
	def self;

	@ProxyMethod
	@Async
	public def processDownload(def o) {
        def y = dateSvc.getServerYear();
		def m = dateSvc.getServerMonth() - 1;
		if(m==0) {
			m = 12;
			y = y-1;
		}

		def rundate = dateSvc.getServerDate();
		DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
		
		def acct = cta.findAccountByHandlerAndTag([handler:'waterworks', tag:'WFEE']); 
		if ( !acct ) throw new Exception('Please provide an itemaccount ');

		def params = [assigneeid: o.assigneeid, sectorid:o.sectorid];
		def list = wm.getListForDownload(params);
		println 'process download list-size: '+ list.size();
		list.each { 
			it.state = 'PENDING';
			it.barcode = '51030:' + it.acctno;
			it.batchid = o.batchid;
			it.month = DateFunc.getMonth(it.fromperiod);
			it.year = DateFunc.getYear(it.fromperiod);;
			it.period = df.format(it.fromperiod) + " - " + df.format(it.toperiod);
			it.rundate = rundate;
			it.itemaccountid = acct.account.objid; 
			it.discodate = it.disconnectiondate;
			it.info = wm.serializer.write([
				barangay: (it.barangayid? it.barangayid: ''), 
				classification: it.classificationid, 
				metersize: it.metersize 
			]);
			def items = billingSvc.getBilling( [acctid: it.objid]).collect {
				[title: it.item.title + ' ' + ((!it.remarks)?it.remarks:''), amount: it.amount ];
			}
			it.items = wm.serializer.write(items);
			wm.create(it);
		}
		header.find([batchid: o.batchid]).update([state:1]);
	}


	@ProxyMethod
	public String initForDownload( def o ){ 
		println 'init for download... '+ o.batchid;
		if (!o.sectorid) throw new Exception("sectorid is required!"); 

		if ( o.batchid ) {
			//do nothing, client is resuming downloads...
		} else {
			def b = header.create([ state: 0 ]);
			o.batchid = b.batchid; 
		} 
		
		self.processDownload( o );
		return o.batchid; 
	}

	@ProxyMethod
	public int getBatchStatus( String batchid ) {
		int state = header.find([batchid: batchid]).select("state").val();	
		if( state == 0 ) return -1;
		return wm.find([batchid:batchid]).select("x:{COUNT(*)}").val();
	}	

	@ProxyMethod
	public def download( def o ) {
		println "fetch download " + o;
		if(!o.batchid) throw new Exception("Please specify batchid!"); 
		if(o._start == null) throw new Exception("Please specify _start!"); 
		if(o._limit == null) throw new Exception("Please specify _limit!"); 
		return wm.find([batchid:o.batchid]).list(o._start, o._limit);
	}

	@ProxyMethod
	public def confirmDownload( def o ){
		if(!o.batchid) throw new Exception("Please specify batchid!"); 
		wm.find([batchid:o.batchid]).update([state:"DOWNLOADED"]);
		return "OK";
	}

	@ProxyMethod
	public void cancelDownload( def o ){
		if(!o.batchid) throw new Exception("Please specify batchid!"); 
		def list = "('" + o.downloadedlist.join("','") + "')";
		wm.cancelDownload([batchid: o.batchid, downloadedlist: list]);
	}

	@ProxyMethod
	def getSectorByUser( o ){
		if(!o.userid) throw new Exception("userid is required!");
		return wm.getSectorByUser(o);
	}

	@ProxyMethod
	def getStuboutsBySector( o ){
		if (!o.sectorid) throw new Exception("sectorid is required!");
		if(!o.userid) throw new Exception("userid is required!");
		return wm.getStuboutsBySector(o);
	}

	@ProxyMethod
	def getReaderBySector( o ){
		if (!o.sectorid) throw new Exception("sectorid is required!");
		if(!o.userid) throw new Exception("userid is required!");
		return wsr.find([sectorid:o.sectorid,"assignee_objid":o.userid]).list();
	}

	@ProxyMethod
	def getZoneBySector( o ){
		if (!o.sectorid) throw new Exception("sectorid is required!");
		if(!o.userid) throw new Exception("userid is required!");
		return wm.getZoneBySector(o);
	}

}