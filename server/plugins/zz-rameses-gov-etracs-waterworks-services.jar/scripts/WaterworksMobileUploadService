import com.rameses.annotations.*;

class WaterworksMobileUploadService {
	
	@DataContext("waterworks_mobile_info")
	def wm;

	@DataContext("waterworks_account")
	def wa;

	@DataContext("waterworks_account_consumption")
	def wac;

	@DataContext("waterworks_account_ledger")
	def wal;

	@DataContext("itemaccount")
	def itemaccount;

	@Service('DateService')
	def dateSvc;

	@Service('WaterworksBillingDateService') 
	def billingSvc; 


	@ProxyMethod 
	public def upload( def o ) {
		if(!o.objid) throw new Exception("Please specify objid!");
		if(!o.reading) throw new Exception("Please specify reading!");
		if(!o.dtreading) throw new Exception("Please specify dtreading!");
		if(!o.userid) throw new Exception("Please specify userid!");
		if(!o.name) throw new Exception("Please specify reader_name!");
		if(!o.amount) throw new Exception("Please specify amount!");

		def mobileinfo = wm.find([ objid: o.account.objid ]).first();
		if ( !mobileinfo ) throw new Exception('Account not found in mobile info table');

		def a = wa.find([ objid: o.account.objid ]).first();
		if ( !a ) throw new Exception("Account does not exist!");
		
		o.readingmonth = dateSvc.getServerMonth();
		o.readingyear =  dateSvc.getServerYear();

		def c = [:];
		c.account = o.account;
		c.dtreading = o.dtreading;
		c.year = o.readingyear;
		c.month = o.readingmonth;
		c.prevreading = mobileinfo.lastreading;
		c.reading = o.reading;
		c.readingmethod = 'ONLINE';
		c.reader = [objid:o.userid, name: o.name]; 
		c.volume = c.reading - c.prevreading;
		wac.create(c); 

		def r = wm.find([batchid:o.batchid, objid:o.account.objid]).first(); 
		def smonth = dateSvc.getMonths().find{ it.index==c.month }.name; 
		wal.create([ 
			txntype : 'WFEE', 
			parentid: a.objid,  
			amount  : o.amount, 
			amtpaid : 0, 
			remarks : smonth +' '+ c.year, 
			duedate : r.duedate, 
			item    : itemaccount.find([objid: r.itemaccountid]).first() 
		]);

		def billinfo = billingSvc.getBillingDates([ 
			stubout:[objid:mobileinfo.stuboutid], 
			billdate : o.dtreading 
		]); 

		def acctdb = wa.find([ objid: o.account.objid ]);
		acctdb.updateReading([ 
			lastdateread : c.dtreading,
			currentreading : o.reading, 
			billingcycleid : billinfo.objid  
		]);

		wm.find([ batchid:o.batchid, objid:o.account.objid ]).delete(); 
		return o;  
	} 

}