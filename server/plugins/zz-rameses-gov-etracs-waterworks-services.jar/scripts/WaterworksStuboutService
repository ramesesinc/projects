import com.rameses.annotations.*;

class WaterworksStuboutService {
	
    @Service('QueryService')
    def querySvc; 

    @Service('PersistenceService')
    def persistenceSvc; 

    @DataContext('vw_waterworks_stubout_account') 
    def vw_waterworks_stubout_account; 

    @DataContext('waterworks_account') 
    def waterworks_account; 

    @ProxyMethod 
    public List getAccounts( params ) { 
    	if (!params.stuboutid) throw new Exception('stuboutid parameter is required'); 

    	return vw_waterworks_stubout_account.find([ stuboutid: params.stuboutid ])
    										.orderBy('stuboutindex')
    										.list();
    }

    @ProxyMethod 
    public void addAccount( params ) {
    	if (!params.stuboutid) throw new Exception('stuboutid parameter is required'); 
    	if (!params.accountid) throw new Exception('accountid parameter is required'); 
    	
    	def icount = vw_waterworks_stubout_account.find([ stuboutid: params.stuboutid ])
    								 			  .select('icount:{COUNT(objid)}')
    								 			  .val(); 

  		def m = [stubout:[objid: params.stuboutid], stuboutindex: icount+1 ]; 
    	waterworks_account.find([ objid: params.accountid ]).update( m ); 
    }

    @ProxyMethod 
    public void removeAccount( params ) {
    	if (!params.stuboutid) throw new Exception('stuboutid parameter is required'); 
    	if (!params.accountid) throw new Exception('accountid parameter is required'); 
    	
    	def m = [ stuboutid: params.stuboutid, objid: params.accountid ]; 
    	def o = waterworks_account.find( m ).select('stuboutindex').first(); 
 		if ( o ) {
 			//waterworks_account.find([ objid: params.accountid ]).update([ stubout:null, stuboutindex:null ]); 
 			//waterworks_account.find([ objid: params.accountid ]).update([ stuboutid:null, stuboutindex:null ]); 
 			waterworks_account.clearStubout([ objid: params.accountid ]); 
 			waterworks_account.find([ stuboutid: params.stuboutid ])
 							  .where('stuboutindex > :stuboutindex', [stuboutindex: o.stuboutindex]) 
 							  .update([ stuboutindex: '{stuboutindex-1}' ]);
 		} 
    }


    @ProxyMethod 
    public void moveUp( params ) {
    	if (!params.stuboutid) throw new Exception('stuboutid parameter is required'); 
    	if (!params.accountid) throw new Exception('accountid parameter is required'); 
    	
    	def m = [ stuboutid: params.stuboutid, objid: params.accountid ]; 
    	def src = waterworks_account.find( m ).select('objid,stuboutindex').first(); 
    	if ( src.stuboutindex <= 1 ) return; 

    	m = [ stuboutid: params.stuboutid, stuboutindex: src.stuboutindex-1 ]; 
    	def dest = waterworks_account.find( m ).select('objid,stuboutindex').first(); 

    	waterworks_account.find([ objid: src.objid ]).update([ stuboutindex: '{stuboutindex-1}' ]); 
    	waterworks_account.find([ objid: dest.objid ]).update([ stuboutindex: '{stuboutindex+1}' ]); 
    }
    
    @ProxyMethod 
    public void moveDown( params ) {
    	if (!params.stuboutid) throw new Exception('stuboutid parameter is required'); 
    	if (!params.accountid) throw new Exception('accountid parameter is required'); 
    	
    	def m = [ stuboutid: params.stuboutid, objid: params.accountid ]; 
    	def src = waterworks_account.find( m ).select('objid,stuboutindex').first(); 
    	if ( src.stuboutindex <= 1 ) return; 

    	m = [ stuboutid: params.stuboutid, stuboutindex: src.stuboutindex+1 ]; 
    	def dest = waterworks_account.find( m ).select('objid,stuboutindex').first(); 
    	if ( !dest ) return; 

    	waterworks_account.find([ objid: src.objid ]).update([ stuboutindex: '{stuboutindex+1}' ]); 
    	waterworks_account.find([ objid: dest.objid ]).update([ stuboutindex: '{stuboutindex-1}' ]); 
    }    

	@ProxyMethod 
    public void swap( params ) {
    	if (!params.stuboutid) throw new Exception('stuboutid parameter is required'); 
    	if (!params.accountid) throw new Exception('accountid parameter is required'); 
    	if (!params.stuboutindex) throw new Exception('stuboutindex parameter is required'); 
    	
    	def m = [ stuboutid: params.stuboutid, objid: params.accountid ]; 
    	def src = waterworks_account.find( m ).select('objid,stuboutindex').first(); 

    	m = [ stuboutid: params.stuboutid, stuboutindex: params.stuboutindex ]; 
    	def dest = waterworks_account.find( m ).select('objid,stuboutindex').first(); 

    	waterworks_account.find([ objid: src.objid ]).update([ stuboutindex: params.stuboutindex ]); 
    	waterworks_account.find([ objid: dest.objid ]).update([ stuboutindex: src.stuboutindex ]); 
    }        
}