import com.rameses.annotations.*;

class WaterworksStuboutService {
	

    @DataContext('waterworks_account') 
    def waterworks_account; 

    @DataContext('waterworks_stubout_node') 
    def stubout_node; 

    @DataContext('vw_waterworks_stubout_node') 
    def vw_waterworks_stubout_node; 

    @ProxyMethod
    public def getNodes( def o ) {
        return vw_waterworks_stubout_node.find([stuboutid: o.stuboutid]).orderBy("indexno").list();
    }

    @ProxyMethod
    public void addNodes( o ) {
        if ( !o.stuboutid ) 
            throw new Exception("WaterworksStuboutService.addNodes error. Please pass parameter stuboutid");
        if ( !o.nodecount ) 
            throw new Exception("WaterworksStuboutService.addNodes error. Please pass parameter nodecount");

        def aggr = stubout_node.select("maxcount:{COUNT(*)}, maxindexno:{MAX(indexno)}").find([stuboutid: o.stuboutid]).first();
        if ( !aggr.maxindexno ) aggr.maxindexno = 0; 
        if ( aggr.maxcount != aggr.maxindexno ) { 
            // resolve the node gaps 
            for ( int idx=1; idx <= aggr.maxindexno; idx++ ) { 
                def map = [ stuboutid: o.stuboutid, indexno: idx ]; 
                def item = stubout_node.find( map ).first(); 
                if ( !item ) stubout_node.create( map ); 
            } 
            // exit immediately after resolving the node gaps
            return;  
        } 

        int start = aggr.maxcount+1; 
        int j = aggr.maxcount + o.nodecount;  
        for( int i=start; i <= j; i++ ) {
            def m = [stuboutid: o.stuboutid, indexno: i];
            stubout_node.create(m);      
        } 
    }

    @ProxyMethod
    public def assignAccount(def o) {
        if(!o.objid) 
            throw new Exception("WaterworksStuboutService.assignAccount error. Please pass parameter objid");
        if(!o.acctid) 
            throw new Exception("WaterworksStuboutService.assignAccount error. Please pass parameter acctid");
        stubout_node.find( [objid: o.objid] ).update( [acctid:o.acctid] );      
    }


    @ProxyMethod
    public def unassignAccount(def o) {
        if(!o.objid) 
            throw new Exception("WaterworksStuboutService.assignAccount error. Please pass parameter objid");
        stubout_node.find( [objid: o.objid] ).update( [acctid: "{NULL}" ] );      
    }

    @ProxyMethod
    public def swap(def o) {
        if(!o.item1) 
            throw new Exception("WaterworksStuboutService.swap error. Please pass parameter item1[objid,acctid]");
        if(!o.item2) 
            throw new Exception("WaterworksStuboutService.swap error. Please pass parameter item2[objid,acctid]");

        
        //nullify it first    
        stubout_node.find( [objid: o.item2.objid] ).update( [acctid: "{NULL}" ] );     
        
        stubout_node.find( [objid: o.item1.objid] ).update( [acctid: o.item2.acctid ] );      
        stubout_node.find( [objid: o.item2.objid] ).update( [acctid: o.item1.acctid ] );          
    }

}