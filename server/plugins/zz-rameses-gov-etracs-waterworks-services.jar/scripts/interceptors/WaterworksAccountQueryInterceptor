import com.rameses.annotations.*;

class WaterworksAccountQueryInterceptor{
	
	@After(pattern="QueryService.getNodeList", eval="#{args[0]._schemaname == 'waterworks_account'}")
	public void getAcctNodeList(def evt) {
		def result = evt.result;
		result << [ title: 'Active', id:'active'];
		result << [ title: 'For Reading', id:'for-reading'];
		result << [ title: 'Processing', id:'processing'];
		result << [ title: 'For Disconnection', id:'for-disconnection'];
		result << [ title: 'Disconnected', id:'disconnected'];
		result << [ title: 'For Reconnection', id:'for-reconnection'];
	}

	@Before(pattern="QueryService.getList", eval="#{args[0]._schemaname == 'waterworks_account'}")
	public void loadList(def evt) {
		def o = evt.args[0];
		if( !o.node?.id ) return;

		def str = "state=:state";
		def m = [:];

		switch( o.node.id ) {
			case 'active':
				m.state = 'ACTIVE';
				break;
			case 'for-reading':
				m.state = 'ACTIVE'
				str += ' AND readingdate <= NOW() AND (lastdateread IS NULL OR lastdateread < readingdate)'; 
				break;

			case 'processing':
				m.state = 'PROCESSING';
				break;

			case 'for-disconnection':
				m.state = 'ACTIVE';
				str += ' AND disconnectiondate < NOW() AND (lastdatepaid IS NULL OR lastdatepaid < disconnectiondate)'; 
				break;

			case 'disconnected':
				m.state = 'DISCONNECTED';
				break;

			case 'for-reconnection':
				m.state = 'FOR-RECONNECTION';
				break;
		}

		//add to first position of where
		if( o.where ) {
			o.where[0] = str + " AND " + o.where[0];	
			o.where[1].putAll( m );
		}
		else {
			o.where = [str, m];
		}
	}

}