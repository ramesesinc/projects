import com.rameses.annotations.*;

class WaterworksApplicationPersistenceInterceptor{
	
	@DataContext("waterworks_account")
	def waterworks_account;	

	@DataContext("waterworks_application_fee")
	def waterworks_application_fee;

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@Service("WorkflowTaskService")
	def workflowTaskSvc;

	@Before(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'waterworks_application'}")
	public void beforeCreate(def evt) {
		def o  = evt.args[0];
		o.appno = 'WA'+seqSvc.getNextFormattedSeriesA('water_application', 6);
		o.address.text = formatAddress( o.address ); 
		o.dtfiled  = dateSvc.getServerDate();
		o.fees.each{
			it.amtpaid = 0;
			it.txntype = 'REG'; 
		}
	}

	@After(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'waterworks_application'}")
	public void afterCreate(def evt) {
		def o = evt.result;
		workflowTaskSvc.start( [refid:o.objid, processname: 'waterworks_application' ] );
	}

	def formatAddress( addr ) {
		def buff = []; 
		def values = [ addr.unitno, addr.bldgno, addr.bldgname ]; 
		def text = values.findAll{ it != null }.join(' ');
		if ( text ) buff << text; 

		values = [ addr.street, addr.subdivision, addr.barangay?.name, addr.municipality, addr.city, addr.province ]; 
		text = values.findAll{ it != null }.join(', ');
		if ( text ) buff << text; 

		return buff.join('\n'); 
	} 

	/*****************************************************************************************************
	* attach the task
	*****************************************************************************************************/
	@After(pattern="PersistenceService.read", eval="#{args[0]._schemaname == 'waterworks_application'}")
	public void findFirst(def evt) {
		def o  = evt.result;
		def parm = evt.args[0];
		def m =[processname: 'waterworks_application'];
		if(parm.taskid) {
			m.taskid = parm.taskid; 
		}
		o.task = workflowTaskSvc.findTask( m );
	}

}