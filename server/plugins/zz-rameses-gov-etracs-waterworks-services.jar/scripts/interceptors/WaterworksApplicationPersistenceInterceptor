import com.rameses.annotations.*;

class WaterworksApplicationPersistenceInterceptor{
	
	@DataContext("waterworks_application_task")
	def appTask;	

	@DataContext("waterworks_stubout_node")
	def stubout_node;	

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@Service("WorkflowTaskService")
	def workflowTaskSvc;

	@Before(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'waterworks_application'}")
	public void beforeCreate(def evt) {
		def o  = evt.args[0];
		o.appno = 'WA'+seqSvc.getNextFormattedSeriesA('water_application', 6);
		o.dtfiled  = dateSvc.getServerDate();
		o.fees.each{
			it.amtpaid = 0;
			it.txntype = 'REG'; 
		}
	} 

	@After(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'waterworks_application'}")
	public void afterCreate(def evt) {
		def o = evt.result;
		workflowTaskSvc.start( [refid:o.objid, processname: 'waterworks_application' ] );
	}

	@After(pattern="PersistenceService.update", eval="#{args[0]._schemaname == 'waterworks_application'}")
	public void beforeUpdate(def evt) {
		def o  = evt.args[0];
		//update the stubout node.
		if(o.stuboutnode?.objid) {
			stubout_node.find( [objid: o.stuboutnode.objid] ).update( [applicationid: o.objid] );	
		}
	}

	/*****************************************************************************************************
	* attach the task
	*****************************************************************************************************/
	@After(pattern="PersistenceService.read", eval="#{args[0]._schemaname == 'waterworks_application'}")
	public void findFirst(def evt) {
		def o  = evt.result;
		def parm = evt.args[0];
		def m =[processname: parm._schemaname];
		if(parm.taskid) {
			m.taskid = parm.taskid; 
		}
		else {
			//find task id based on ref
			m.taskid = appTask.find([refid: o.objid]).select("taskid").where("enddate IS NULL").val();
			if(!m.taskid) 
				throw new Exception("There is no open task for this record");
		}
		o.task = workflowTaskSvc.findTask( m );
	}



}