import com.rameses.annotations.*;
import java.rmi.server.*;

class WaterworksApplicationTaskInterceptor{
	
	@DataContext("waterworks_installment")
	def inst;

	@DataContext("waterworks_application_fee")
	def appFee;

	@Service("DateService")
	def dateSvc;

	@Env
	def env;

	@Before(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'waterworks_application' && args[0].to=='for-payment'}")
	public void beforeSignalForPayment(def evt) {
		def t = evt.args[0];

		def d = t.data;
		def txntype = 'BOM';

		def m = [:];
		if( d.type == 'installment' ) {
			m.dtfiled = dateSvc.getServerDate();
			m.controlno = "BMI-"+new UID();
			m.state = 'OPEN';
			m.doctype = txntype;
			m.account = d.account;
			m.particulars = d.particulars;
			m.amount = d.amount;
			m.amtpaid = 0;
			m.amortization = d.amortization;
			m.term = d.term;
			m = inst.create( m );
		}

		//also add the materials in the application fees
		def z = [:];
		z.parentid = t.refid;
		z.item = d.account;
		z.txntype = txntype;
		z.amount = d.amount;
		z.amtpaid = 0;
		if( m?.objid!=null ) {
			z.installmentid = m.objid;		
			z.remarks = "Term: " + d.term;
		}	
		appFee.create( z );
	}

	@Before(pattern="WorkflowTaskService.signal", 
		eval="#{args[0].processname == 'waterworks_application' && args[0].action == 'return_for-billing'}")
	public void beforeReturnForReBilling(def evt) {
		def t = evt.args[0];
		def m = appFee.find( [parentid: t.refid, txntype:'BOM'] ).first();
		if( m?.objid!=null ) {
			if( m.installmentid ) inst.find( [objid: m.installmentid] ).delete();
			appFee.find( [objid: m.objid]).delete();
		}
		else {
			throw new Exception("Material Billing not found");
		}
	}
}