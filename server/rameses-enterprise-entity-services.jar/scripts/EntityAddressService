import com.rameses.common.*
import com.rameses.annotations.*
import com.rameses.services.extended.*
import java.rmi.server.UID;

class EntityAddressService extends ActiveCrudService {

	@ActiveDB('entity_address')
	def em

	public void beforeCreate(o) {
		if(!o.objid) {
			o.objid = 'ENTADDR'+new UID();	
		}	
		o.text = formatAddress( o, "\n" );
	}

	public void beforeUpdate(o) {
		o.text = formatAddress( o, "\n" );
		if( o.asdefault!=null && o.asdefault == 1 ) {
			em.updateEntityDefaultAddress( [addresstext: o.text, entityid: o.parentid] );
		}
	}

	@ProxyMethod 
	public def formatAddress( def x, def delimiter ) {
		def txt1 = [x.unitno, x.bldgno, x.bldgname].findAll{ (it? true: false) }.join(" ").trim(); 
		def txt2 = [x.street, x.subdivision].findAll{ (it? true: false) }.join(" ").trim(); 
		def txt3 = [x.barangay?.name, x.city, x.municipality, x.province].findAll{ (it? true: false) }.join(", ").trim(); 
		return [txt1, txt2, txt3].findAll{ (it? true: false) }.join( delimiter ).trim();
	}

	@ProxyMethod
	public def makeDefault( def o ) {
		def addr = em.read( [objid: o.objid] );
		addr.text = formatAddress( addr, '\n');
		em.makeDefault( [addresstext: addr.text, entityid: o.parentid, addressid: o.objid ] );
		return addr;
	}

	@ProxyMethod
	public def removeEntityAddress(def o) {
		em.removeEntityAddress(o)
	}

	@ProxyMethod
	public def getListByOwner( def o ) {
		def list = em.getListByOwner( o );
		list.each { x->
			def txt = formatAddress( x, ", " );
			x.text =  txt;	
		}
		return list;
	}

}