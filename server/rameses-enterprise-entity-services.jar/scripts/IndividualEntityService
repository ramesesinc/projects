import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID;
import com.rameses.util.*;
import com.rameses.io.*;
import com.rameses.services.extended.*;

class IndividualEntityService extends ActiveCrudListService {

	@ActiveDB("entityindividual")
	def	em; 

	@ActiveDB("entity")
	def	entityDB; 

	@Env
	def env;

	@Service('DateService')
	def dtSvc;

	@Service("LOVService")
	def LOV;

	@Service("EntityService")
    def entitySvc;


	def INDEX_CHAR_COUNT = 300;

	String pagingKeys = 'e.objid'

	@ProxyMethod
	public def getColumns( params ) {
		return [
			[name:'entityno', caption:'Entity No', width:80, resizable:false],
			[name:'name', caption:'Name'], 
			[name:'address.text', caption:'Address'], 				
			[name:'gender', caption:'Gender', width:50, resizable:false, alignment:'center'], 
			[name:'birthdate', caption:'Birth Date', width:70, resizable:false, alignment:'center']
		]; 
	}

	public void updateName( o ) {
		o.name = o.lastname+', '+o.firstname; 
		if (o.middlename) o.name += ' '+o.middlename;	
		def len = o.name.length()
		if (len > INDEX_CHAR_COUNT) len = INDEX_CHAR_COUNT
		o.entityname = o.name.substring(0, len);		
	}

	public void beforeCreate(o) { 
		validateBirthdate( o );

		if ( !o.objid ) o.objid = "IND"+new UID();

		updateName(o);
		o.type = 'INDIVIDUAL';
		o.loaded = true;
		formatAddress( o.address, ", "); 
		entitySvc.create( o );
	}

	public void afterCreate(o) { 
		if(o.photo) {
			updatePhoto(o);			
		}
	}

	public void beforeUpdate(o) {
		validateBirthdate( o );
		updateName( o );
		o.loaded = true;
		entitySvc.update( o );
	}

	public void afterRemoveEntity(o) {
		o.loaded = true;
		entitySvc.removeEntity( o );
	}

	public void afterOpen(o) {
		o.loaded = true;
		def m = entitySvc.open( o );
		o.putAll(m);
		o.photo = getPhoto( o );

		if (o.birthdate) {  
			def birthyear = dtSvc.getYear( o.birthdate );
			def age = dtSvc.serverYear - birthyear;
			o.seniorcitizen = (age >= 60);
		} 
	} 

	@ProxyMethod
	public def updatePhoto( def o ) {
		em.updatePhoto( o );
	}

	@ProxyMethod
	public def getPhoto( def o ) {
		return em.findPhoto( o )?.photo;
	}

	@ProxyMethod
	public def getCitizenshipList(o) {
		o.searchtext += "%";
		o._limit = 8;
		return em.getCitizenshipList( o )*.citizenship;
	}

	@ProxyMethod
	public def getReligionList(o) {
		o.searchtext += "%";
		o._limit = 8;
		return em.getReligionList( o )*.religion;
	}

	@ProxyMethod
	public def getProfessionList(o) {
		o.searchtext += "%";
		o._limit = 8;
		return em.getProfessionList( o )*.profession;
	}

	@ProxyMethod
	public void editName(o) {
		updateName(o);
		em.updateName( o );
		entityDB.find([ objid: o.objid ]).update([ name: o.entityname, entityname: o.entityname ]); 
	}

	void afterList( params, list ) {
		list.each{ formatAddress( it?.address, ", " ) } 
	} 

	void formatAddress( x, delimiter ) { 
		if ( !x ) return;

		def txt1 = [x.unitno, x.bldgno, x.bldgname].findAll{ (it? true: false) }.join(" ").trim(); 
		def txt2 = [x.street, x.subdivision].findAll{ (it? true: false) }.join(" ").trim(); 
		def txt3 = [x.barangay?.name, x.city, x.municipality, x.province].findAll{ (it? true: false) }.join(", ").trim(); 
		def result = [txt1, txt2, txt3].findAll{ (it? true: false) }.join( delimiter ).trim();  
		if (result) x.text = result; 
	} 

	void validateBirthdate( data ) {
		if ( !data.birthdate ) return; 

		def birthdate = dtSvc.resolveDate( data.birthdate ); 
		data.age = dtSvc.calculateAge( birthdate );
		data.birthdate = dtSvc.format( 'yyyy-MM-dd', birthdate );  
	}
}
