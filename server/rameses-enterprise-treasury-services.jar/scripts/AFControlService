import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

class AFControlService  {

	@ActiveDB("af_control")
	def em;

	@Env
	def env;

	@ProxyMethod
	public def getColumns(o) {
	    return [
	        [name:'afid', caption:'AF No'],
	        [name:'startseries', caption:'Start Series', alignment:'CENTER'],
	        [name:'endseries', caption:'End Series', alignment:'CENTER'],
	        [name:'currentseries', caption:'Current Series', alignment:'CENTER'],
	        [name:'stubno', caption:'Stub No', alignment:'CENTER', maxWidth:60],
	        [name:'qtybalance', caption:'Balance', alignment:'CENTER', maxWidth:70 ],
	        [name:'qtyissued', caption:'Qty Issued', alignment:'CENTER', maxWidth:70],
	        [name:'active', caption:'Active', type:'checkbox', checkedValue:1, uncheckedValue:0, maxWidth:70],
	        [name:'txnmode', caption:'Mode', width:100],
	        [name:'fund.title', caption:'Fund' ],
	        [name:'assignee.name', caption:'Assignee'],
	    ];    
	}

	@ProxyMethod
	public def getOpenList( def o ) {
		o._pagingKeys = 'a.objid';
		if(! o.userid ) o.userid = env.USERID; 

		def filters = []; 
		if ( o.filter ) filters << o.filter; 
		if ( o.formno ) filters << ''' afid = $P{formno} ''';
		
		if ( filters ) {
			o.filter = ' AND '+ filters.join(' AND '); 
		} else { 
			o.filter = ''; 
		} 
		return em.getOpenList( o ); 
	} 

	@ProxyMethod
	public def getAssigneeOpenList( def o ) { 
		o.userid = env.USERID;
		o.filter = ''

		if( o.collectiontype?.fund?.objid ) {
			o.fundid = o.collectiontype.fund.objid 
			o.filter = ''' and fund_objid=$P{fundid}  '''
		}
		return em.getAssigneeOpenList(o);
	}


	@ProxyMethod
	public def getAssigneeIssuanceList(def o){
		def p = [userid : ( o.userid ? o.userid:env.USERID ) , formno: o.formno]
		return  em.getAssigneeIssuanceList(p);
	}

	@ProxyMethod 
	public void assignFund(entity) {
		def params = [
			objid: entity.objid,
			fundid: entity.fund.objid,
			fundtitle: entity.fund.title 
		]
		em.assignFund( params );
	}

	@ProxyMethod 
	public void unassignFund(entity) {
		em.unassignFund( entity );
	}

	@ProxyMethod
	public void activateControl(def p) {
		def m = [:];
		m.objid = p.objid;
		m.txnmode = p.txnmode;
		m.filter = ''
		if( p.fund && p.fund.objid) {
			m.filter = " and fund_objid='${p.fund.objid}'".toString()
		}
		
		if(!m.txnmode)
			throw new Exception("Please indicate txn mode first");

		m.afid = p.formno;
		if(!p.collector) 
			m.userid = env.USERID;
		else	
			m.userid = p.collector.objid
			
		def z = em.findActiveControlForDeactivation(m);
		if(z) {
			deactivateControl( z )
		}
		em.reactivateControl(m);
		
	}

	@ProxyMethod
	public def findActiveControlForCashReceipt(def params) {
		params.filter = ' and ac.fund_objid is null ';
		if( params.fundid ) {
			params.filter =  ''' and ac.fund_objid = $P{fundid} ''';
		} 
		return em.findActiveControlForCashReceipt( params );
	}

	@ProxyMethod
	public void deactivateControl(def p) {
		def m =[ objid: p.objid ]
		m.filter = ''
		if( p.fund && p.fund.objid ) {
			m.filter = " and fund_objid='${p.fund.objid}'".toString()
		}
		em.deactivateControl(m);
	}

	@ProxyMethod
	public void updateNextSeries( p ) {
		if(!p.qtyissued) p.qtyissued = 1;

		//open and check if the end series is not valid
		def o = em.read( p );
		if( p.qtyissued >  (o.endseries - o.currentseries + 1)  ) {
			throw new Exception("There is not enough accountable forms for this batch");
		}
		//check that currentseries must not be greater than endseries + 1;
		em.updateNextSeries(p);
	}

	@ProxyMethod
	public void changeMode(def p) {
		em.changeMode(p);
	}

	@ProxyMethod
	public void assignToSubcollector(def p) {
		def m = [:];
		m.objid = p.objid;
		m.assigneeid = p.assignee.objid;
		m.assigneename = p.assignee.name;
		em.assignSubcollector(m);
	}

	@ProxyMethod
	public void unassign(def p) {
		em.unassignSubcollector([objid:p.objid]) 
	}

	@ProxyMethod 
	public def findAFSummary( params ) {
		if ( !params.controlid ) throw new Exception('controlid parameter is required'); 

		return em.findAFSummary( params ); 
	} 
}
