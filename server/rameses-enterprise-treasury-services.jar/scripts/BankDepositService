import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class BankDepositService  {

	@ActiveDB('bankdeposit')
	def adb 

	@PersistenceContext("main")
	def em; 

	@Env
	def env;

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@Service("BankAccountPostService")
	def bankBook;

	@Service("CashBookPostService")
	def cashBook;

	@Service('Var')
	def var

	@ProxyMethod
	public def init() {
		def list = em.sqlContext.createNamedQuery("bankdeposit:getUndepositedLiquidation")
			.setParameters( [cashierid: env.USERID]).resultList.each { it.selected = true };
		
		if(!list)
			throw new Exception("No pending transactions to deposit");

		def o = [objid: "DEP"+new UID()];	
		o.state = 'DRAFT'
		o.liquidations = list;
		o.deposits = [];
		o.dtposted = dateSvc.serverDate;
		o.cashier = [ objid:env.USERID, name:env.FULLNAME, title:env.JOBTITLE ];
		o.depositbyaccount = var.getProperty("deposit_collection_by_bank_account", '0').toString().equals('1')
		return o
	} 
	
	@ProxyMethod 
	public def process( params ) {
		def o = [:]	
		params.cashierid = env.USERID 
		o.fundsummaries = adb.getUndepositedByFund(params)
		o.fundsummaries.each {
			def p = [liquidationids: params.liquidationids, fundid:it.fund.objid ]
			def cm = adb.findCrediteMemos(p)
			it.creditmemo = (cm && cm.creditmemo) ? cm.creditmemo : 0.0 

			it.amount = it.totalamount - it.creditmemo

			it.allocated = 0;
			it.balance = it.amount;
			it.bankaccounts = adb.getBankAccountsByFund(it.fund)
		}	
		
		o.undepositedChecks = adb.getUndepositedChecks(params)
		return o;
	}

	@ProxyMethod
	public def getUndepositedChecks(  ) {
		def params = [ cashierid : env.USERID  ]
		return adb.getUndepositedChecks(params) 
	}


	@ProxyMethod
	public def post( def o ) {
		// double check if already posted 
		if( adb.getPostedLiquidations(o) )
			throw new Exception("Liquidations already posted.   ")

		if(o.undepositedChecks) 
			throw new Exception("There are still undeposited non-cash payment. Please verify. ")


		o.state = 'OPEN'
		o.txnno = formatTxnno(o);
		o.totalcash = o.deposits.sum{it.totalcash};
		o.totalnoncash = o.deposits.sum{it.totalnoncash};
		o.amount = o.totalcash+o.totalnoncash;
		em.create("bankdeposit", o);

		def liquidationfunds = adb.getUndeposited( [cashierid:o.cashier.objid, liquidationids: "'" + o.liquidations.objid.join("','") + "'"  ] )

		for( x in liquidationfunds ) {
			def m = [:];	
			m.objid = x.objid;
			m.bankdepositid = o.objid;	
			em.create("bankdeposit:liquidation", m);
		}

		for( x in o.deposits ) {
			x.objid = "BNKDEPENTRY"+new UID();
			x.parentid = o.objid;
			x.state='OPEN'
			em.create("bankdeposit:entry", x);
			x.checks.each { c->
				c.parentid = x.objid;
				em.create("bankdeposit:entry_check", c);
			}
		}
		
		o.deposits = loadDepositEntry( o )
		return o;

	}

	@ProxyMethod
	public def addDepositValidation( deposit, entry ){

		def e = em.read("bankdeposit:entry", entry);
		//credit cashier cashbook

		if( e.state == 'OPEN') {
			def m = [:];
			m.subacctid = deposit.cashier.objid;
			m.fundid = entry.fund.objid;
			m.fundtitle = entry.fund.title;
			m.type = 'CASHIER'
			m.refid = entry.objid;
			m.refno = entry.validationno;
			m.refdate = entry.validationdate;
			m.reftype = "DEPOSIT";
			m.amount = entry.amount;
			m.particulars = "DEPOSITED/VALIDATED TO " + entry.bank.code;
			cashBook.postCR( m );

			//debit bank
			def bdep = [:];
			bdep.objid = entry.bankaccount.objid;
			bdep.refid = deposit.objid;
			bdep.refno = deposit.txnno;
			bdep.refdate = deposit.dtposted;
			bdep.reftype = "DEPOSIT";
			bdep.amount = entry.amount;
			bdep.particulars = "DEPOSITED BY " + env.FULLNAME;
			bankBook.postDR( bdep );
			
		}
		adb.validateBankEntry(entry);
		//close bankAccount
		if(! adb.findOpenBankEntry(deposit)) { 
			adb.closeDeposit( deposit ) 
		}
	}


	@ProxyMethod
	public def open( deposit ) {
		deposit = em.read('bankdeposit', deposit)	
		deposit.liquidations = em.sqlContext.createNamedQuery('bankdeposit:getPostedLiquidations')
				.setParameters(deposit).resultList

		def liquidationids =  "'" + deposit.liquidations.objid.unique().join("','") + "'"		
		deposit.fundsummaries = em.sqlContext.createNamedQuery('bankdeposit:getFundSummaries')
				.setParameters(deposit).resultList.each{
					def p = [liquidationids: liquidationids, fundid:it.fund.objid ]
					def cm = adb.findCrediteMemos(p)
					it.creditmemo = (cm && cm.creditmemo) ? cm.creditmemo : 0.0 

					it.amount = it.totalamount - it.creditmemo
				}
		deposit.deposits = loadDepositEntry( deposit )
		
		return deposit
	}

	private def loadDepositEntry( deposit )
	{
		return em.sqlContext.createNamedQuery('bankdeposit:getDepositSummaries')
				.setParameters(deposit).resultList.each {
						it.checks = em.sqlContext.createNamedQuery('bankdeposit:getDepositedChecks').setParameters(it).resultList
						it.cashbreakdown = em.serializer.read( it.cashbreakdown ).each { it.qty = it.qty.toString() }
					}
	}


    public def formatTxnno( dep ) {
    	def format = 'UTFS'
    	def seqid = null
    	if(var.bankdeposit_format) format = var.bankdeposit_format;
    	if(var.bankdeposit_sequenceid_format ) seqid = var.bankdeposit_sequenceid_format;
    	

        //Formatting Options:
        // YY - YEAR POSTED
        // MM - MONTH POSTED 
        // DD - DATE POSTED 
        // UT - USER TXNCODE
        // SQ - SEQUENCE 
        // FS- FORMATTED SEQUENCE 
        
        def dt = dateSvc.parseDate( dep.dtposted, null)
        def txncode = "DEP";	
		if(env.TXNCODE) txncode = "DEP-" + env.TXNCODE ; 		

        def values = [
        	YY:dt.year+"", 
        	MM:dt.month.toString().padLeft(2, '0',),
        	DD:dt.day.toString().padLeft(2, '0'),
        	UT:txncode 
        ]

        def txnno  = format 
        values.keySet().each {
            txnno = txnno.replace( it, values[it] )
        }

        def series 
        if(seqid) {
        	def seq = seqid;
        	values.keySet().each {
            	seq = seq.replace( it, values[it] )
            }
            series = seqSvc.getNextSeries( seq); 
            
        } else {
        	series = seqSvc.getNextSeries(  txnno.replace("FS", '') ); 
        }

        txnno = txnno.replace( 'SQ', series+"" )
        txnno = txnno.replace( 'FS', "$series".padLeft(5, '0') )
        return txnno 
    }

}
