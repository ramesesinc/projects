import com.rameses.annotations.*;

class CapturePaymentService {
	
	@Service
	def self;

	@DataContext(dynamic=true)
	def db;

	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public def getItems( def o ) {
		return [];
	}

	@ProxyMethod
	public def init(def o) {
		if(!o._schemaname) throw new Exception("_schemaname is required in CapturePaymentService.init");
		def m = [:];
		m.refdate = dateSvc.getServerDate();
		m.amount = 0;
		m.type = 'CAPTURE'
		def items = self.getItems(o);

		if( !items ) throw new Exception("No unpaid items found");
		items.each { v,idx->
			if(!v.item ) throw new Exception("Each item must have an item (account)");
			v.amount = 0;
			v.surcharge = 0;
			v.interest = 0;
			v.total = 0;
			if(v.paymentpriority == null) v.paymentpriority = 0; 
		};
		m.items = items.sort{ v.paymentpriority };
		return m;
	}

	@ProxyMethod
	public void post(def o) {
		if(!o._schemaname) throw new Exception("_schemaname is required in CapturePaymentService.init");
		def em = db.lookup( o._schemaname + "_payment" );
		return em.create( o );
	}


	@ProxyMethod
	public void postVoid(def o) {
		o.items.each {
			
		}


		if(!o._schemaname) throw new Exception("_schemaname is required in CapturePaymentService.init");
		def em = db.lookup( o._schemaname + "_payment" );
		em.find( [objid: o.objid] ).update([voided: 1]);
	}

}