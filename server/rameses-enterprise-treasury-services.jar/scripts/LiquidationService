import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*;


class LiquidationService  {

	@ActiveDB("liquidation")
	def em; 

	@Env
	def env;

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@Service("CashBookPostService")
	def cashBook;

	@Service("Var")
	def var 
	
	@DataContext("liquidation_remittance")
	def liqRem;

	@DataContext("liquidation_fund")
	def liqfund;

	@DataContext("liquidation")
	def liqEm;

	@DataContext("remittance")
	def remEm;


	@ProxyMethod 
	public def delete( params ) {
		liqRem.find([ liquidationid: params.objid ]).delete();
		liqfund.find([ liquidationid: params.objid ]).delete();
		liqEm.find([ objid: params.objid ]).delete(); 
		return null; 
	}

	@ProxyMethod
	public def init() {
		/*if( ! toBoolean(var.allow_multiple_open_liquidation, true)) {
			def ud = em.getUndepositedLiquidations([liquidatingofficerid: env.USERID] ) 
			if(ud ) throw new Exception("There are still undeposited liquidations. ");	
		}*/

		def m = [ state: 'DRAFT', cashbreakdown:[] ];
		m.liquidatingofficer = [objid:env.USERID, name:env.FULLNAME, title: env.JOBTITLE ];
		m.dtposted = dateSvc.serverDate;
		m.txnno = Encoder.MD5.encode( env.USERID ); 
		m.amount = 0.0;
		m.totalcr = 0.0;
		m.totalcash = 0.0;
		m.totalnoncash = 0.0;
		m = liqEm.create( m ); 

		def liqparam = [ liquidationid: m.objid ]; 
		liqEm.insertRemittances( liqparam ); 
		if ( !liqRem.find( liqparam ).first() ) 
			throw new Exception("No pending remittances to liquidate"); 

		liqEm.insertFunds( liqparam ); 

		m.remittances = liqRem.find( liqparam ).list()*.remittance;
		return m; 

        /*def str = "objid,remittanceno:{txnno},remittancedate,collector.name,totalcash,totalnoncash,amount" 
		def o = [objid: "LIQ"+new UID(), cashier:[:]];
		o.remittances = remEm.where( " state='APPROVED' AND liquidatingofficer.objid = :lqid AND liquidation.liquidationid IS NULL ", [lqid: env.USERID] ).select( str ).list();
		if(!o.remittances)
			throw new Exception("No pending remittances to liquidate");

		o.amount = o.remittances.sum{ it.amount };	
		o.totalcash = o.remittances.sum{ it.totalcash };	
		o.totalnoncash = o.remittances.sum{ it.totalnoncash };	

		//get fund summary
		o.fundsummary =  em.getUnliquidatedFundSummary( [liquidatingofficerid: env.USERID] );		
		o.checks = em.getUnliquidatedChecks( [liquidatingofficerid: env.USERID] );	

		//initial values
		o.liquidatingofficer = [objid:env.USERID, name:env.FULLNAME, title: env.JOBTITLE ];	
		o.state = "OPEN";
		*/
	}

	@ProxyMethod 
	public def getChecks( params ) {
		return liqEm.getChecks([ liquidationid: params.objid ]); 
	}


	@ProxyMethod
	public def post( o ) {
		o.state = 'OPEN'; 
		o.txnno = formatTxnno( o ); 
		o.cashbreakdown = (o.cashbreakdown ? o.cashbreakdown : []); 
		liqEm.find([ objid: o.objid]).update([ state: o.state, txnno: o.txnno, cashbreakdown: o.cashbreakdown ]); 
		return o; 
	} 


	@ProxyMethod
	public def open( o ) {
		o = em.read([ objid:o.objid ]);
		if( o.signature !=null ) {
			Base64Cipher cipher = new Base64Cipher()
			o.signature = cipher.decode( o.signature );
		}
		if( o.cashier?.signature !=null ) {
			Base64Cipher cipher = new Base64Cipher()
			o.cashier.signature = cipher.decode( o.cashier.signature );
		}


		o.remittances = liqRem.find( [liquidationid: o.objid] ).list()*.remittance;

		o.fundsummary = em.getFundSummaries([ liquidationid: o.objid ]);
		o.checks = em.getLiquidatedNoncash( o ); 

		def td = o.checks.findAll{ it.reftype == 'CHECK' }?.sum{it.amount};
		if(td==null) td = 0.0;

		def tc = o.checks.findAll{ it.reftype == 'CREDITMEMO' }?.sum{it.amount};
		if(tc==null) tc = 0.0;

		o.totaldeposit = td + o.totalcash;
		o.totalcreditmemo = tc;
		return o;
	}

	@ProxyMethod
	public def getFundSummaries(o) {
		return em.getFundSummaries([ liquidationid: o.objid ]);
	}

	@ProxyMethod
    public def formatTxnno( liq ) {
    	def format = 'UTFS'
    	def seqid = null
    	if(var.liquidation_format) format = var.liquidation_format;
    	if(var.liquidation_sequenceid_format ) seqid = var.liquidation_sequenceid_format;
    	

        //Formatting Options:
        // YY - YEAR POSTED
        // MM - MONTH POSTED 
        // DD - DATE POSTED 
        // UT - USER TXNCODE
        // SQ - SEQUENCE 
        // FS- FORMATTED SEQUENCE 
        
        def dt = dateSvc.parseDate( liq.dtposted, null)
        def txncode = "LIQ";	
		if(env.TXNCODE) txncode = "LIQ-" + env.TXNCODE; 		

        def values = [
        	YY:dt.year+"", 
        	MM:dt.month.toString().padLeft(2, '0',),
        	DD:dt.day.toString().padLeft(2, '0'),
        	UT:txncode 
        ]

        def txnno  = format 
        values.keySet().each {
            txnno = txnno.replace( it, values[it] )
        }

        def series 
        if(seqid) {
        	def seq = seqid;
        	values.keySet().each {
            	seq = seq.replace( it, values[it] )
            }
            series = seqSvc.getNextSeries( seq); 
            
        } else {
        	series = seqSvc.getNextSeries(  txnno.replace("FS", '') ); 
        }

        txnno = txnno.replace( 'SQ', series+"" )
        txnno = txnno.replace( 'FS', "$series".padLeft(5, '0') )
        return txnno 
    }

    public boolean toBoolean(value, defvalue){
        if (value == null) 
            return defvalue;

        if (value instanceof Boolean) 
            return value;

        if ('1/y/yes/t/true'.indexOf(value.toString().trim()) >= 0 ) 
            return true;
        
        return false;
    }


    
	@ProxyMethod
    public void approve(def o) {
    	def m = [state:'APPROVED'];
    	m.approver = [ objid:env.USERID, name:env.FULLNAME, title:env.JOBTITLE, signature: o.signature ]; 
    	liqEm.find( [objid : o.objid] ).update( m );
    }

}	