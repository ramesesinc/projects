import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*;


class LiquidationService  {

	@ActiveDB("liquidation")
	def em; 

	@Env
	def env;

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@Service("CashBookPostService")
	def cashBook;

	@Service("Var")
	def var 
	
	@DataContext("liquidation_remittance")
	def liqRem;

	@DataContext("liquidation_fund")
	def liqfund;

	@DataContext("liquidation_noncashpayment")
	def liqnoncash;

	@DataContext("liquidation")
	def liqEm;

	@DataContext("remittance")
	def remEm;


	@ProxyMethod 
	public void delete( params ) {
		def o = liqEm.find([ objid: params.objid ]).first(); 
		if ( !o.state.toString().equalsIgnoreCase("DRAFT")) {
			throw new Exception("Transaction no longer in DRAFT mode"); 
		}

		//def rems = liqRem.find([ liquidationid: params.objid ]).select('objid').list();

		liqnoncash.find([ liquidationid: params.objid ]).delete();
		liqRem.find([ liquidationid: params.objid ]).delete(); 
		liqfund.find([ liquidationid: params.objid ]).delete(); 
		liqEm.find([ objid: params.objid ]).delete(); 
	} 

	@ProxyMethod
	public def init() {
		/*if( ! toBoolean(var.allow_multiple_open_liquidation, true)) {
			def ud = em.getUndepositedLiquidations([liquidatingofficerid: env.USERID] ) 
			if(ud ) throw new Exception("There are still undeposited liquidations. ");	
		}*/

		def m = [ state:'DRAFT', posted:0, cashbreakdown:[] ];
		m.liquidatingofficer = [objid:env.USERID, name:env.FULLNAME, title: env.JOBTITLE ];
		m.txnno = Encoder.MD5.encode( env.USERID ); 
		m.txndate = dateSvc.serverDate;
		m.dtposted = m.txndate;
		m.amount = 0.0;
		m.totalcr = 0.0;
		m.totalcash = 0.0;
		m.totalnoncash = 0.0;
		m = liqEm.create( m ); 

		def liqparam = [ liquidationid: m.objid, liquidatingofficerid: env.USERID ]; 
		liqEm.insertRemittances( liqparam ); 
		liqparam.remove('liquidatingofficerid');
		
		if ( !liqRem.find( liqparam ).first() ) 
			throw new Exception("No pending remittances to liquidate"); 

		liqEm.insertFunds( liqparam ); 
		liqEm.insertNoncashPayments( liqparam );		

        def cblist = [];
		def cashbreakdowns = liqEm.getRemittanceFundsCashbreakdown( liqparam ); 
		cashbreakdowns.each{ 
			if ( it.cashbreakdown ) cblist.addAll( it.cashbreakdown );
		}
		def newcblist = [];
		cblist.groupBy{ it.denomination }.each{ k,v-> 
			newcblist << [ 
				caption:k, denomination:k, 
				qty: v.sum{( it.qty? it.qty: 0 )}, 
				amount: v.sum{( it.amount ? it.amount : 0.0 )} 
			]; 
		}

		def amount=0.0; def totalcr=0.0; def totalcash=0.0; def totalnoncash=0.0;
		def funds = liqfund.find( liqparam ).select('amount,totalcash,totalnoncash,totalcr').list();
		funds.each{ 
			amount += ( it.amount ? it.amount : 0.0 ); 
			totalcr += ( it.totalcr ? it.totalcr : 0.0 ); 
			totalcash += ( it.totalcash ? it.totalcash : 0.0 ); 
			totalnoncash += ( it.totalnoncash ? it.totalnoncash : 0.0 ); 
		} 
		m.amount = amount;
		m.totalcr = totalcr; 
		m.totalcash = totalcash; 
		m.totalnoncash = totalnoncash; 
		m.cashbreakdown = newcblist; 
		liqEm.find([ objid: m.objid ]).update([ 
			amount: m.amount, totalcash: m.totalcash, 
			totalnoncash: m.totalnoncash, totalcr: m.totalcr, 
			cashbreakdown: m.cashbreakdown 
		]);

		def o = open([ objid: m.objid ]); 
		return o;
	}

	@ProxyMethod
	public def open( o ) {
		o = em.read([ objid:o.objid ]);
		if( o.signature !=null ) {
			Base64Cipher cipher = new Base64Cipher()
			o.signature = cipher.decode( o.signature );
		}
		if( o.cashier?.signature !=null ) {
			Base64Cipher cipher = new Base64Cipher()
			o.cashier.signature = cipher.decode( o.cashier.signature );
		}

		def liqparam = [ liquidationid: o.objid ];
		o.fundsummary = liqfund.find( liqparam ).list();
		o.remittances = liqRem.find( liqparam ).list()*.remittance;
		o.creditmemos = [];
		o.checks = [];
		liqnoncash.find( liqparam ).list().each{
			def a = [ objid: it.objid, liquidationid: o.objid ];
			if ( it.check ) a.putAll( it.check ); 
			if ( a.reftype == 'CREDITMEMO' ) o.creditmemos << a; 
			else o.checks << a; 
		}

		o.totalnoncash = o.checks.sum{( it.amount ? it.amount : 0.0 )} 
		if ( !o.totalnoncash ) o.totalnoncash = 0.0;

		o.totalcr = o.creditmemos.sum{( it.amount ? it.amount : 0.0 )} 
		if ( !o.totalcr ) o.totalcr = 0.0;

		o.totalcash = o.amount - ( o.totalnoncash - o.totalcr );
		if ( !o.totalcash ) o.totalcash = 0.0;

		o.totaldeposit = o.totalcash + o.totalnoncash; 
		return o; 
	}

	@ProxyMethod
	public def post( o ) { 
		o.state = 'POSTED'; 
		o.txnno = formatTxnno( o ); 
		liqEm.find([ objid: o.objid ]).update([ state: o.state, txnno: o.txnno ]); 
		liqRem.find([ liquidationid: o.objid ]).list().each{
			def f = [liquidatingofficer : [signature: o.signature] ];
			f.state = 'CLOSED'; 
			remEm.find([ objid: it.objid ]).update( f ); 
		}		
		return o; 
	} 

	@ProxyMethod 
	public def getChecks( params ) {
		return liqEm.getChecks([ liquidationid: params.objid ]); 
	}

	@ProxyMethod
	public def getFundSummaries(o) {
		return em.getFundSummaries([ liquidationid: o.objid ]);
	}

	@ProxyMethod
    public def formatTxnno( liq ) {
    	def format = 'UTFS'
    	def seqid = null
    	if(var.liquidation_format) format = var.liquidation_format;
    	if(var.liquidation_sequenceid_format ) seqid = var.liquidation_sequenceid_format;
    	

        //Formatting Options:
        // YY - YEAR POSTED
        // MM - MONTH POSTED 
        // DD - DATE POSTED 
        // UT - USER TXNCODE
        // SQ - SEQUENCE 
        // FS- FORMATTED SEQUENCE 
        
        def dt = dateSvc.parseDate( liq.dtposted, null)
        def txncode = "LIQ";	
		if(env.TXNCODE) txncode = "LIQ-" + env.TXNCODE; 		

        def values = [
        	YY:dt.year+"", 
        	MM:dt.month.toString().padLeft(2, '0',),
        	DD:dt.day.toString().padLeft(2, '0'),
        	UT:txncode 
        ]

        def txnno  = format 
        values.keySet().each {
            txnno = txnno.replace( it, values[it] )
        }

        def series 
        if(seqid) {
        	def seq = seqid;
        	values.keySet().each {
            	seq = seq.replace( it, values[it] )
            }
            series = seqSvc.getNextSeries( seq); 
            
        } else {
        	series = seqSvc.getNextSeries(  txnno.replace("FS", '') ); 
        }

        txnno = txnno.replace( 'SQ', series+"" )
        txnno = txnno.replace( 'FS', "$series".padLeft(5, '0') )
        return txnno 
    }

    public boolean toBoolean(value, defvalue){
        if (value == null) 
            return defvalue;

        if (value instanceof Boolean) 
            return value;

        if ('1/y/yes/t/true'.indexOf(value.toString().trim()) >= 0 ) 
            return true;
        
        return false;
    }


	@ProxyMethod
    public void approve(def o) {
    	def m = [ state: 'APPROVED' ];
    	liqEm.find( [objid : o.objid] ).update( m );
    }
}	