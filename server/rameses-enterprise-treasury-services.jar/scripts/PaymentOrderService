import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class PaymentOrderService  {
	
	@ActiveDB("paymentorder")
	def em 

	
	@Service("SequenceService")
	def seqSvc 

	@Service("DateService")
	def dtSvc 

	@Service("RevenueItemAccountService")
	def revenueItem;

	@Service("CollectionTypeService")
	def collectionType;

	@ProxyMethod
	public def create(def entity){	
		if(! entity.items ) throw new Exception("items is required. ")
		if(! entity.amount ) throw new Exception("amount is required. ") 
		if(! entity.paidby) throw new Exception("paidby is required. ") 
		if(! entity.paidbyaddress) throw new Exception("paidbyaddress is required. ");
		if(! entity.txntype) throw new Exception("txntype is required. ") 

		
		if(!entity.collectiontype) {
			entity.collectiontype = collectionType.findByHandler([handler:'misc']);
		}	
		entity.items.each {
			if( !it.item?.objid ) throw new Exception("Items item must have an objid");
			if( !it.amount ) throw new Exception("Items item must have an amount");
			it.item = revenueItem.findAccount([objid: it.item.objid]); 
		}
		if( entity.items.sum{it.amount} != entity.amount)
			throw new Exception("Amount must be equal sum of amount of items");

		def m = [:];
		m.txnid = 'P' + seqSvc.getNextFormattedSeriesA("PAYMENTORDER", 6)
		m.expirydate = dtSvc.findNextDate('1y')
		m.info = em.serializer.write( entity );
		m.txntype = entity.txntype;
		em.create(m);
		return m; 
	}

	@ProxyMethod
	def open( params){
		def entity = em.read( params )
		if( !entity ) throw new Exception("Payment Order Code does not exist.     ")
		entity.info =  em.serializer.read( entity.info) 
		return entity 
	}

	@ProxyMethod
	def close( params ){ 
		em.delete(params)
	}


}