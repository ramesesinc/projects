import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class RemittanceService  {

	@Env
	def env;

	@ActiveDB("remittance")
	def em; 

	@ActiveDB("remittance_tool")
	def remittance_tool; 

	@DataContext("draftremittance")
	def draftrem_db; 

	@DataContext("draftremittance_cashreceipt")
	def draftremc_db; 

	@DataContext("remittance_fund")
	def remf_db; 

	@DataContext("remittance_cashreceipt")
	def remc_db; 

	@DataContext("remittance_noncashpayment")
	def remnc_db; 

	@Service("PersistenceService")
	def persistSvc;

	@Service("DateService")
	def dateSvc;

	@Service("SequenceService")
	def seqSvc;

	@Service("CashBookPostService")
	def cashBook;
	
	@Service("Var")
	def var;

	@ProxyMethod
	public def init( params ) { 
		boolean split_txn = (var.remittance_split_transaction.toString().matches('false|0') ? false : true); 

		def rundate = dateSvc.getServerDate(); 
		def sdf = new java.text.SimpleDateFormat('yyyy-MM-dd'); 
		boolean capturemode = ( params.capturemode == true ); 
		if ( capturemode ) {
			if ( !params.remittancedate ) throw new Exception('Please specify the remittance date');  

			if ( params.remittancedate instanceof String ) { 
				params.remittancedate = sdf.parse( params.remittancedate ); 
			} 

			params.remittancedate = new java.sql.Date( params.remittancedate.time ); 

		} else { 
			params.remittancedate = rundate; 
		} 

		def remo = [ state: 'OPEN', dtfiled: rundate, remittancedate: params.remittancedate ];
		remo.collector = [ objid: env.USERID, name: env.FULLNAME, title: env.JOBTITLE ];   
		remo.amount = remo.totalcash = remo.totalnoncash = 0.0; 
		remo.txnmode = ( capturemode ? 'CAPTURE' : 'ONLINE' ); 
		remo.objid = 'REM'+ new java.rmi.server.UID(); 
		remo = createDraftRemittance( remo ); 

		//check first if there are still remaining collection on the end of the month 
		def o = [ objid: remo.objid ]; 
		def m = [ remittanceid : remo.objid ]; 
		def info = [ remittanceid: remo.objid, collectorid: remo.collector.objid ]; 
		info.txnstate = ( capturemode ? 'CAPTURED' : 'POSTED' );

		if ( split_txn ) {
			info.txndate = getMonthFirstDate( params.remittancedate ); 
			draftrem_db.insertCashReceipts( info ); 

			o.items = draftrem_db.getCashReceiptSummary( info ); 
			if ( o.items ) { 
				o.endofmonth = true; 
				o.message = "End of the month remittance only. Please remit again for the remaining collection."; 
				o._txndate = info.txndate.toString(); 

				remo.remittancedate = dateSvc.add( info.txndate, '-1d' ); 
				draftrem_db.find([ objid: remo.objid ]).update([ remittancedate: remo.remittancedate ]); 				
			} 
		} 

		if ( !o.items ) {
			info.txndate = rundate; 
			if ( capturemode ) { 
				info.txndate = dateSvc.add( params.remittancedate, '1d' ); 
			} 

			draftrem_db.insertCashReceipts( info ); 
			o.items = draftrem_db.getCashReceiptSummary( info ); 
			o._txndate =  dateSvc.format('yyyy-MM-dd HH:mm:ss', params.remittancedate );
		} 

		if ( !o.items ) throw new Exception("No collections to be remitted.   ");

		// check delegated receipts 
		if ( draftrem_db.findDelegatedReceipt( info )) {
			throw new Exception('There are still delegated receipts that needs to be remitted by your subcollector'); 
		}

		o.amount = 0.0;
		o.totalcash = 0.0;
		o.totalnoncash = 0.0;

		def cancelledreceipts = draftrem_db.getCancelledCashReceipts( info ); 
		o.items.each { oi-> 
			oi.cancelSeriesList = cancelledreceipts.findAll{( it.controlid == oi.controlid )} 
			o.amount += (oi.amount ? oi.amount : 0.0);
			o.totalcash += (oi.totalcash ? oi.totalcash : 0.0);
			o.totalnoncash += (oi.totalnoncash ? oi.totalnoncash : 0.0);
		} 

		draftrem_db.find([ objid: remo.objid ]).update([ amount: o.amount, totalcash: o.totalcash, totalnoncash: o.totalnoncash ]); 

		o.checks = draftrem_db.getCashReceiptChecks( info ); 
		o.remittancedate = remo.remittancedate; 
		o.collector = remo.collector; 
		return o; 
	} 

	private def createDraftRemittance( remo ) { 
		if ( !remo?.collector?.objid ) throw new Exception('collector parameter is required'); 

		//
		// clear previous draft remittances for this collector  
		// 
		draftrem_db.find(['collector.objid': remo.collector?.objid ]).list().each{ 
			draftrem_db.removeCashReceipts([ remittanceid: it.objid ]); 
			draftrem_db.find([ objid: it.objid ]).delete(); 
		} 

		return draftrem_db.create( remo ); 
	} 

	@ProxyMethod 
	public def post( o ) { 
		if ( o.amount == 0 && !o.items ) throw new Exception("There is no amount to remit"); 
		else if ( !o.items ) throw new Exception("No available item(s) to remit"); 

		if ( !o.cashbreakdown ) throw new Exception("Cash breakdown has been change during the submission.Please recreate transaction");

		boolean remotetxn = ( o.remotetxn == true );
		if ( remotetxn ) { 
			o.dtfiled = o.dtposted; 
			o.txnmode = ( o.txnmode ? o.txnmode : 'ONLINE' ); 
			createDraftRemittance( o ); 

			o.cashreceipts.each{
				draftrem_db.insertCashReceipt([ remittanceid: o.objid, receiptid: it ]); 
			} 
		} 

		// initiate lock of the draft records 
		o.lockid = new java.rmi.server.UID().toString();
		draftrem_db.find([ objid: o.objid ]).update([ lockid: o.lockid ]); 
		draftremc_db.find([ remittanceid: o.objid ]).update([ lockid: o.lockid ]); 

		// check in the draftremittance table 
		def remo = draftrem_db.find([ objid: o.objid ]).first();
		if ( !remo ) throw new Exception('Draft remittance record no longer exist. Please recreate the remittance transaction.'); 

		if ( remotetxn ) { 
			remo.txnno = o.txnno; 
			remo.dtposted = remo.dtfiled; 
		} else { 
			remo.dtposted = dateSvc.getServerDate(); 
			remo.txnno = formatTxnno( remo ); 
		}

		remo.cashbreakdown = o.cashbreakdown; 
		remo.liquidatingofficer = o.liquidatingofficer;
		remo.remarks = o.remarks; 
		em.create( remo ); 
		
		if ( !remotetxn ) {
			o.putAll( remo ); 
		} 

		def m = [ remittanceid: remo.objid ]; 
		draftrem_db.postCashReceipts( m ); 
		draftrem_db.postCashReceiptPayments( m ); 
		draftrem_db.getFundSummary( m ).each{ 
			it.objid = 'REMF'+ new java.rmi.server.UID(); 
			it.remittanceid = m.remittanceid; 
			remf_db.create( it ); 
		} 

		// initiate checking here...
		if ( !remf_db.find( m ).first() ) 
			throw new Exception('Posting failed! No fund summary found for this remittance. Please recreate your transaction.');  
		if ( !remc_db.find( m ).first() ) 
			throw new Exception('Posting failed! No cashreceipt found for this remittance. Please recreate your transaction.');  

		return o; 
	} 

	@ProxyMethod
	public def open( o ) {
		o = em.read( o );
		o.checks = em.getRemittedChecks(o);

		def td = o.checks.findAll{ it.reftype == 'CHECK' }?.sum{it.amount};
		if(td==null) td = 0.0;

		def tc = o.checks.findAll{ it.reftype == 'CREDITMEMO' }?.sum{it.amount};
		if(tc==null) tc = 0.0;

		o.totaldeposit = td + o.totalcash;
		o.totalcreditmemo = tc;
		return o;
	}

	@ProxyMethod
	public def getRemittedReceipts( o ) { 
		if ( o.remitted ) {
			return em.getRemittedReceipts( o ); 
		} else { 
			o.remittanceid = o.objid; 
			return draftrem_db.getCashReceipts( o ); 
		} 
	} 

	public def getMonthFirstDate( dt ) {
        def cal = Calendar.getInstance();
        cal.setTime( dt );
        cal.set( Calendar.DAY_OF_MONTH, 1 ); 
        return new java.sql.Date( cal.time.time ); 
    } 

    @ProxyMethod
    public def formatTxnno( remittance ) {
    	def format = 'UTFS';
    	def seqid = null;
    	if ( var.remittance_format ) format = var.remittance_format;
    	if ( var.remittance_sequenceid_format ) seqid = var.remittance_sequenceid_format;
    	
        //Formatting Options:
        // YY - YEAR POSTED
        // MM - MONTH POSTED 
        // DD - DATE POSTED 
        // UT - USER TXNCODE
        // SQ - SEQUENCE 
        // FS - FORMATTED SEQUENCE 
        
        def txncode = "REM"; 
        if ( remittance.txnmode == 'CAPTURE' ) txncode = "CAPREM"; 

        txncode = [txncode, env.TXNCODE, env.ORGTXNCODE].findAll{( it )}.join("-");
        def dt = dateSvc.parseDate( remittance.dtposted, null); 
        def values = [ 
        	YY:dt.year+"", 
        	MM:dt.month.toString().padLeft(2, '0',),
        	DD:dt.day.toString().padLeft(2, '0'),
        	UT:txncode 
        ];

        def txnno = format;  
        values.keySet().each {
            txnno = txnno.replace( it, values[it] )
        }

        def series; 
        if ( seqid ) { 
        	def seq = seqid;
        	values.keySet().each {
            	seq = seq.replace( it, values[it] )
            }
            series = seqSvc.getNextSeries( seq); 
            
        } else { 
        	series = seqSvc.getNextSeries(  txnno.replace("FS", '') ); 
        }

        txnno = txnno.replace( 'SQ', series+"" );
        txnno = txnno.replace( 'FS', "$series".padLeft(5, '0')); 
        return txnno; 
    }

    @ProxyMethod 
    public void revert( params ) {
    	if ( !params.objid ) throw new Exception('objid parameter is required'); 

    	params.remittanceid = params.objid; 
    	def o = remittance_tool.findRemittance( params ); 
    	if ( !o ) throw new Exception('Remittance record does not exist'); 
    	if ( o.liquidated > 0 ) throw new Exception('This transaction has already been liquidated. Cannot revert remittance'); 

    	remittance_tool.removeFunds( params ); 
    	remittance_tool.removeAFs( params ); 
    	remittance_tool.removeCashReceipts( params ); 
    	remittance_tool.removeCreditMemoPayments( params ); 
    	remittance_tool.removeNonCashPayments( params ); 
    	remittance_tool.removeRemittance( params ); 
    } 

    @ProxyMethod 
    public def modify( o ) { 
    	if ( !o?.objid ) throw new Exception('objid parameter is required'); 
    	if ( !o?.action ) throw new Exception('action parameter is required'); 
    	if ( !o?.reason ) throw new Exception('reason parameter is required'); 
    	if ( !o?.info ) throw new Exception('info parameter is required'); 

    	def rundate = dateSvc.getServerDate(); 
    	def p = [ _schemaname: 'remittance' ]; 
    	p.findBy = [ objid: o.objid ]; 
    	p.putAll( o.info ); 
		persistSvc.update( p ); 

		def remarks = new StringBuilder();
		remarks.append("[REASON] ").append( o.reason ); 
		remarks.append(" [CHANGES] ").append( o.info.toString()); 

		p = [ _schemaname: 'txnlog' ]; 
		p.ref = 'remittance';
		p.refid = o.objid; 
		p.action = o.action;
		p.txndate = rundate; 
		p.userid = env.USERID; 
		p.username = env.FULLNAME; 
		p.remarks = remarks.toString();
		persistSvc.create( p ); 
    	return o; 
    } 
} 