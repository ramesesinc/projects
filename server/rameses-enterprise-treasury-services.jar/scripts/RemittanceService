import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class RemittanceService  {

	@ActiveDB("remittance")
	def em; 

	@ActiveDB("remittance_tool")
	def remittance_tool; 

	@Env
	def env;

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@Service("CashBookPostService")
	def cashBook;
	
	@Service("Var")
	def var;

	@ProxyMethod
	public def init() { 
		boolean split_txn = (var.remittance_split_transaction.toString().matches('false|0') ? false : true); 

		//check first if there are still remaining collection on the end of the month 
		def o = [ objid: "REM"+new UID() ]; 
		def info = [ collectorid: env.USERID ];
		if ( split_txn ) {
			info.txndate = getMonthFirstDate( dateSvc.serverDate ); 
			o.items = em.getUnremittedForCollector( info ); 
			if ( o.items ) { 
				o.endofmonth = true; 
				o.message = "End of the month remittance only. Please remit again for the remaining collection."; 
				o._txndate = info.txndate; 
			} 
		} 

		if ( !o.items ) {
			info.txndate = dateSvc.serverDate; 
			o.items = em.getUnremittedForCollector( info ); 
			o._txndate = dateSvc.format('yyyy-MM-dd HH:mm:ss', info.txndate);
		} 

		if ( !o.items ) throw new Exception("No collections to be remitted.   ");

		o.items.each {
			it.cancelSeriesList = em.getUnremittedCancelSeries([ collectorid:it.collector.objid, controlid: it.controlid ])
		}
		o.amount = 0;
		o.totalcash = 0;
		o.totalnoncash = 0;
		if ( o.items ) { 
			o.amount = o.items.sum{ it.amount };	
			o.totalcash = o.items.sum{ it.totalcash };	
			o.totalnoncash = o.items.sum{ it.totalnoncash };	
		} 
		o.checks = em.getUnremittedChecks( info );
		o.collector = [ objid:env.USERID, name:env.FULLNAME, title:env.JOBTITLE ]; 

		//used for checking
		o.checksum = em.getUnremittedTotals( info  );
		return o; 
	} 

	@ProxyMethod 
	public def post( o ) { 
		if( o.amount == 0 ) 
			throw new Exception("There is no amount to remit");

		if(! o.cashbreakdown ) throw new Exception("Cash breakdown has been change during the submission.Please recreate transaction");

		//compare checksum. deny if changed
		def p = [remittanceid: o.objid, collectorid: o.collector.objid, txndate : dateSvc.serverDate]

		if(! o.remotetxn ) {
			if( o.endofmonth ) p.txndate = getMonthFirstDate( p.txndate )
			def checksum = o.checksum;
			def checktest = em.getUnremittedTotals( p );
			if(checksum!=checktest)
				throw new Exception("Changes have been made prior to remittance. Please redo transaction");

			o.dtposted = dateSvc.serverDate;
			o.remittancedate = o.endofmonth ? dateSvc.add(dateSvc.parse("yyyy-MM-dd",p.txndate), "-1d") : o.dtposted 
		
			o.txnno = formatTxnno(o)
			o.state = "OPEN";	
		}

		em.create( o );
		//insert the cash receipts 
		if( o.remotetxn  ) {
			o.cashreceipts.each{
				def rc = [objid: it, remittanceid: o.objid ]
				em.create(rc, "remittance_cashreceipt") 
			}

		} else {
			em.collectReceipts(p);
		}

		em.collectNoncash(p); 
				
		em.getRemittedFundTotals(p).each { 
			def n = [:]
			n.objid = "REMFUND"+new UID();
			n.remittanceid = o.objid;
			n.fund = it.fund;
			n.amount = it.amount;
			em.create( n, "remittance_fund" );
		} 
		return o; 
	} 

	@ProxyMethod
	public def open( o ) {
		o = em.read( o );
		o.checks = em.getRemittedChecks(o);

		def td = o.checks.findAll{ it.reftype == 'CHECK' }?.sum{it.amount};
		if(td==null) td = 0.0;

		def tc = o.checks.findAll{ it.reftype == 'CREDITMEMO' }?.sum{it.amount};
		if(tc==null) tc = 0.0;

		o.totaldeposit = td + o.totalcash;
		o.totalcreditmemo = tc;
		return o;
	}

	@ProxyMethod
	public def getUnremittedReceipts( o ) { 
		def m = [ collectorid: o.collector.objid, txndate: o.txndate ];
		if ( !m.txndate ) {
			boolean split_txn = (var.remittance_split_transaction.toString().matches('false|0') ? false : true); 
			if ( split_txn ) { 
				m.txndate = getMonthFirstDate( dateSvc.serverDate ); 
				def list =  em.getUnremittedReceipts( m ); 
				if ( list ) return list; 
			} 

			m.txndate = dateSvc.serverDate; 
		} 
		return em.getUnremittedReceipts( m ); 
	}

	@ProxyMethod
	public def getRemittedReceipts(o) {
		return em.getRemittedReceipts(o);
	}


	public def getMonthFirstDate( dt ) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(dt);
        cal.set( Calendar.DAY_OF_MONTH, 1 );
        return dateSvc.format('yyyy-MM-dd', cal.getTime()) + " 00:00:00";
    }

    @ProxyMethod
    public def formatTxnno( remittance ) {
    	def format = 'UTFS'
    	def seqid = null
    	if(var.remittance_format) format = var.remittance_format;
    	if(var.remittance_sequenceid_format ) seqid = var.remittance_sequenceid_format;
    	

        //Formatting Options:
        // YY - YEAR POSTED
        // MM - MONTH POSTED 
        // DD - DATE POSTED 
        // UT - USER TXNCODE
        // SQ - SEQUENCE 
        // FS - FORMATTED SEQUENCE 
        
        def txncode = ["REM", env.TXNCODE, env.ORGTXNCODE].findAll{( it )}.join("-");
        def dt = dateSvc.parseDate( remittance.dtposted, null); 
        def values = [ 
        	YY:dt.year+"", 
        	MM:dt.month.toString().padLeft(2, '0',),
        	DD:dt.day.toString().padLeft(2, '0'),
        	UT:txncode 
        ];

        def txnno = format;  
        values.keySet().each {
            txnno = txnno.replace( it, values[it] )
        }

        def series; 
        if ( seqid ) { 
        	def seq = seqid;
        	values.keySet().each {
            	seq = seq.replace( it, values[it] )
            }
            series = seqSvc.getNextSeries( seq); 
            
        } else { 
        	series = seqSvc.getNextSeries(  txnno.replace("FS", '') ); 
        }

        txnno = txnno.replace( 'SQ', series+"" );
        txnno = txnno.replace( 'FS', "$series".padLeft(5, '0')); 
        return txnno; 
    }

    @ProxyMethod 
    public void revert( params ) {
    	if ( !params.objid ) throw new Exception('objid parameter is required'); 

    	params.remittanceid = params.objid; 
    	def o = remittance_tool.findRemittance( params ); 
    	if ( o?.liquidated > 0 ) 
    		throw new Exception('This transaction has already been liquidated. Cannot revert remittance'); 

    	remittance_tool.removeFunds( params ); 
    	remittance_tool.removeAFs( params ); 
    	remittance_tool.removeCashReceipts( params ); 
    	remittance_tool.removeCreditMemoPayments( params ); 
    	remittance_tool.removeNonCashPayments( params ); 
    	remittance_tool.removeRemittance( params ); 
    } 
}