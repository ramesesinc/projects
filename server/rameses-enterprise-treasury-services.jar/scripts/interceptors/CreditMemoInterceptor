import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class CreditMemoInterceptor { 
	
	@Env
	def env

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc; 

	@Service("BankAccountPostService")
	def bankService;

	@DataContext('creditmemo')
	def creditmemoEm;	

	@DataContext('income_summary')
	def incEm;



	/*************************************************************************************************
	* CREATE POST TO BANK
	*************************************************************************************************/
	@Before(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'creditmemo' }", index=0)
	public void updateStateForPosting( def evt ) { 
		def o = evt.args[0];
		o.state = 'OPEN';
		o.controlno = 'CR' + seqSvc.getNextFormattedSeries('CR');
		o.issuedby = [objid: env.USERID, name:env.FULLNAME];
		o.dtissued = dateSvc.getServerDate();	
		o.issuereceipt = 1;
	}	

	@After(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'creditmemo' }", index=0)
	public void postToBank( def evt ) { 
		def o = evt.args[0];
		def m = [
			objid: o.bankaccount.objid,
			amount: o.amount,
			refid: o.objid,
			refno: o.refno,
			refdate: o.refdate,
			reftype: 'CREDITMEMO',
			particulars: o.particulars
		];
		bankService.postDR( m );
	}

	/*************************************************************************************************
	* UPDATE POST TO INCOME
	*************************************************************************************************/
	@After(pattern="PersistenceService.update", eval="#{args[0]._schemaname == 'creditmemo' }", index=0)
	public void postToIncome( def evt ) { 
		def param = evt.args[0]; 
		println '> ' + param; 
		println '>> '+ evt.result;
		throw new Exception("updated credit memo");
	} 

	/*
	@After(pattern="CreditMemoService.create", eval="#{args[0].type.issuereceipt == 0 }", index=0)
	public void postIncomeSummary( def evt ) { 
		def dc = evt.args[0];
		dc.items.each {
			def p = [:]
			p.refid = it.parentid
			p.refdate = dc.refdate
			def rv = revItemSvc.findAccount( it.item )	
			p.acctid = rv.objid
			p.fundid = rv.fund.objid 
			p.amount = it.amount
			p.refno = dc.refno
			p.reftype = dc.type.objid;
			p.orgid = env.ORGID 
			incSumEm.create(p)
		}
	}
	*/	

}

