import com.rameses.annotations.*;

class RemittanceDefaultInterceptor {

	@ActiveDB('unliquidated_remittance') 
	def unliqrem_db; 

	@Service("Var")
	def var;

	@After(pattern="RemittanceService.init")
	public void afterInit( evt ) { 
		checkMultipleUniquidatedRemittanceOption( evt.result ); 
	} 

	@Before(pattern="RemittanceService.post")
	public void beforePost( evt ) { 
		def param = evt.args[0]; 
		checkMultipleUniquidatedRemittanceOption( param ); 
	} 

	private void checkMultipleUniquidatedRemittanceOption( param ) {
		boolean allow_multi = (var.allow_multiple_unliquidated_remittance.toString().matches('false|0') ? false : true); 
		if ( allow_multi ) return; 

		def YMD = new java.text.SimpleDateFormat('yyyy-MM-dd');
		def dt = null; 
		if ( param.remittancedate instanceof java.util.Date ) {
			dt = param.remittancedate; 
		} else if ( param.remittancedate instanceof String ) {
			dt = YMD.parse( param.remittancedate.toString().split(" ")[0] );
		}

		def iyear = 0; def imonth = 0; 
		if ( dt instanceof java.util.Date ) {
			def arr = YMD.format( dt ).split("-"); 
			iyear = arr[0].toInteger(); 
			imonth = arr[1].toInteger(); 
		} 

		def pending = unliqrem_db.findPendingByCollector([ collectorid: param.collector.objid, year: iyear, month: imonth ]); 
		if ( pending ) {
			throw new Exception('You still have pending unliquidated remittances. Kindly inform your liquidating officer.'); 
		}  
	}

	@After(pattern="RemittanceService.init")
	public void afterInit( evt ) { 
		checkMultipleUniquidatedRemittanceOption( evt.result ); 
	} 	
}
