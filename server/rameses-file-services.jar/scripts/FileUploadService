import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.UID;

public class FileUploadService
{
	@ActiveDB(value='file_registry', em='fileregistry')
	def fileregistry;

	@ActiveDB(value='file', dynamic=true)	
	def filedb;

	@Service('DateService')
	def dateSvc;

	@ProxyMethod 
	public def create( data ) { 
		if ( !data.objid ) data.objid = 'F'+new UID();  

		//create registry 
		def context = fileregistry.findContext([name: 'context']);
		fileregistry.create( [objid: data.objid, context: context.value] ); 

		//create file header 
		data.state = 'PENDING'; 				
		data.dtfiled = dateSvc.serverDate.toString(); 
		def em = filedb.lookup(context.value); 
		em.create( data ); 
		return data; 
	} 

	@ProxyMethod 
	public def addItem( data ) { 
		def reg = fileregistry.read([objid: data.parentid]); 
		if (!reg) throw new Exception("'"+data.parentid+"' file registry not found"); 

		def em = filedb.lookup(reg.context); 
		return createItem( em, data );
	} 

	def createItem( em, data ) {
		data.objid = data.parentid + '-' + data.indexno; 
		def header = em.read([objid: data.parentid]); 
		if (!header) throw new Exception("'"+data.parentid+"' file header not found"); 

		println 'header.objid-> ' + header.objid; 
		def content = data.content; 
		data.content = new Base64Cipher().encode( data );  
		em.create( data, 'detail' ); 
		data.content = content; 

		def countinfo = em.getCount([ objid: header.objid ]); 
		println 'totalcount='+ countinfo[0].totalcount +', chunkcount='+ header.chunkcount;
		if (countinfo[0].totalcount == header.chunkcount) { 
			em.updateHeaderStatus([objid: header.objid, state:'COMPLETED']); 
		} 
		return data; 
	}

	@ProxyMethod 
	public void addItems( params ) { 
		if ( !params.fileid ) throw new Exception('fileid parameter is required'); 
		if ( !params.items ) throw new Exception('items parameter is required'); 

		def reg = fileregistry.read([ objid: params.fileid ]); 
		if (!reg) throw new Exception("'"+ params.fileid +"' file registry not found"); 

		def em = filedb.lookup(reg.context); 
		params.items.each{ data-> 
			data.parentid = params.fileid; 
			createItem( em, data );
		} 
	} 

	@ProxyMethod 
	public void removeFile( params ) {
		if ( !params.fileid ) throw new Exception('fileid parameter is required'); 

		def reg = fileregistry.read([ objid: params.fileid ]); 
		if (!reg) return;  

		fileregistry.delete( reg ); 
		def em = filedb.lookup( reg.context ); 
		em.removeItems([ parentid: params.fileid ]); 
		em.delete([ objid: params.fileid ]); 
	} 
} 
