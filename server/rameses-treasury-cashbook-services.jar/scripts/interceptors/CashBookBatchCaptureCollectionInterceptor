import com.rameses.annotations.*;

class CashBookBatchCaptureCollectionInterceptor {

	@ActiveDB('cashbook_tool') 
	def cashbook_tool; 

	@After( pattern="BatchCaptureCollectionService.revertPosting" ) 
	public void revertPosting( evt ) { 
		def params = evt.args[0]; 
		def cashbook = [:]; 
		def m = [:]; 

		params.entries.each{ o-> 
			def list = cashbook_tool.getEntriesByRef([ refid: o.receiptid ]); 
			if ( !list ) return; 

			list.collect{[ cashbookid: it.parentid, indexno: it.lineno ]}
			    .groupBy{ it.cashbookid } 
			    .each{ k,v-> 
			    	def x = cashbook.get( k );  
			    	def y = v.min{ it.indexno }
			    	if ( x == null ) {
			    		cashbook.put( k, y ); 

			    	} else if ( y != null ) {
			    		def prevlineno = x.indexno;
			    		def newlineno = y.indexno; 
			    		if ( y.indexno < x.indexno ) {
			    			cashbook.put( k, y ); 
			    		}
			    	}
			    } 

			m.clear(); 
			list.each { 
				m.objid = it.objid; 
				cashbook_tool.removeCashBookEntry( m );  
			}
		} 

		cashbook.each{ k,v-> 
			def runbal = null; 
			def indexno = null; 
			cashbook_tool.getEntriesFromIndex( v ).each{ o-> 
				if ( runbal == null ) {
					runbal = o.runbalance;  
					indexno = o.lineno; 
					return; 
				}

				indexno += 1; 
				runbal = (runbal + o.dr) - o.cr; 
				o.runbalance = runbal; 
				o.lineno = indexno; 
				cashbook_tool.updateCashBookEntryBalance( o ); 
			} 

			cashbook_tool.updateCashBookBalance( v );  
		} 
	} 

}