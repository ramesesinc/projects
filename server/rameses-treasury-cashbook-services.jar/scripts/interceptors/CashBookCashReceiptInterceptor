import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.util.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

/* 
	This interceptor posts to the cashbook after post. 
	It also reverses the entry during void 
*/
class CashBookCashReceiptInterceptor { 

	@Service("CashBookPostService")
	def cashbookPostSvc;

	@Service("CashBookService")
	def cashbookSvc;

	@Service('UserService')
	def userSvc; 
	
	@After(pattern="CashReceiptService.post", index=-10)
	public void postCashReceipt( evt ) { 
		def p = evt.args[0];
		def userinfo = userSvc.open( p.collector ); 
		if ( !userinfo?.txncode ) { 
			throw new Exception('Please provide a user transaction code');   
		} 

		userinfo.name = [userinfo.firstname, userinfo.middlename, userinfo.lastname].findAll{ it != null }.join(' ');  

		def fundTest = p.items.findAll{ !it.item.fund?.objid };
		if( fundTest ) {
			String msg = fundTest*.item?.title.join(",");
			throw new Exception("The following items must have a fund: \n" + msg);
		} 

		//summarize receipts by fund, locate the fund and update 
		def z = p.items.groupBy{ it.item.fund.objid } 
		z.each { k,v->
			def fund = v[0].item.fund; 
			def entry = [:]
			entry.fundid = k;
			entry.fundtitle = fund.title;   //get the first element
			entry.subacctid = p.collector.objid;
			entry.type = 'COLLECTOR'
			entry.refid = p.objid;
			entry.refno = p.receiptno;
			entry.refdate = p.receiptdate;
			entry.reftype = "cashreceipt";
			entry.particulars = p.collectiontype?.name + "("+p.paidby+")"; 
			//deduct credit memo payments per fund.
			entry.amount = v.sum{ it.amount } 

			def header = cashbookSvc.findBySubAcctFund( entry ); 
			if ( !header ) { 
				header = [ objid: "CSB" + new UID(), state: "APPROVED", type: entry.type ]; 
				header.subacct = [objid: userinfo.objid, name: userinfo.name ]; 
				header.code  = userinfo.txncode + " - " + fund.title;  
				header.title = userinfo.name + " - " + fund.title;
				header.fund  = fund; 
				cashbookSvc.create( header );  
			} 
			cashbookPostSvc.postDR( entry ); 
		} 
	} 

	@After(pattern="CashReceiptVoidService.post", index=-10)
	public def postCashReceiptVoid( evt ) {  
		//summarize receipts by fund, locate the fund and update 
		def p = evt.args[0];
		def v = evt.result;
		def z = p.receipt.items.groupBy{ it.item.fund.objid };
		z.each { k, c->
			def entry = [:]
			entry.fundid = k;
			entry.fundtitle = c[0].item.fund.title;   //get the first element 
			entry.subacctid = p.receipt.collector.objid;
			entry.type = 'COLLECTOR'
			entry.refid = v.objid;
			entry.refno = p.receipt.receiptno;
			entry.refdate = v.txndate;
			entry.reftype = "cashreceipt:void";
			entry.particulars = "VOID " + p.reason;
			entry.amount = c.sum{ it.amount } 
			cashbookPostSvc.postCR( entry ); 
		}
	}
}
