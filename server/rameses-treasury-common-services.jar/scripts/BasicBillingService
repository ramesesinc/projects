import com.rameses.annotations.*;

import treasury.utils.*;
import treasury.facts.*;
import enterprise.utils.*;
import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import java.util.*;
import com.rameses.rules.common.RuleExecutionContext;

class BasicBillingService {

	@Service('BasicBillingHandler')
	def handler;

	@Service('BasicBillingRuleService')
	def ruleSvc;

	@Service('FactBuilderService')
	def factBuilderSvc;

	@ProxyMethod
	public def getCashReceiptInfo( pp ) { 
		if ( pp.options == null ) pp.options = [:];

		pp.options.summarize_item = true; 
		def bill = getBillingInfo( pp ); 

		if( !pp.txntype ) pp.txntype = pp.params?.collectiontype.handler;
		
		def rctinfo = handler.formatReceiptInfo( pp, bill ); 
		bill.putAll( rctinfo ); 
		bill.remove('objid');
		bill._postpayment = true; 
		return bill; 
	}

	@ProxyMethod
	public def getBillingInfo( pp ) { 
		if( !pp.rulename ) throw new Exception("BasicBillingService error. rulename is required");
		if( !pp.params ) throw new Exception("BasicBillingService error. params is required");

		def bill = handler.getInfo( pp ); 
		def billitems = handler.getBillItems( pp, bill ); 

		if ( !pp.options?.include_credit.toString().equals('false') ) {
			def citems = handler.getCreditItems( pp, bill ); 
			if ( citems ) { 
				citems.each{ it.txntype = 'creditpayment' } 
				billitems.addAll( citems ); 
			} 
		}

		def startgroup = "billing";
		if( pp.startgroup ) startgroup = pp.startgroup; 

		def rp = [:]
		rp.putAll( pp );
		rp.putAll( pp.params );
		rp.putAll( bill );
		rp.billitems = billitems;
 			
		def res = ruleSvc.execute([rulename: pp.rulename, startgroup: startgroup, params: rp ] ); 
		bill.putAll( res ); 
		bill.billitems = [];
		if ( pp.options?.summarize_item.toString() == 'true' ) {
			def items = []; 
			def grpItems = res.billitems.groupBy{[ it.item, it.group ]}
			grpItems.each { k,v->
				items << [item: k[0], remarks: k[1]?.remarks, amount: NumberUtil.round(v.sum{ it.amount }) ];
			} 
			bill.items = items;
		}

		res.billitems.each {
			if( it.txntype ==null) bill.billitems << it;
			else if( it.summary ) bill.billitems << it;
			else if( !it.txntype.toLowerCase().matches('discount|surcharge|interest') ) bill.billitems << it;
		}

		bill.billitems.each {
			if(!it.total) it.total = it.amount;
		}
		bill.amount = bill.billitems.sum{ it.total } 
		bill.billitems.sort{ it.sortorder } 
		return bill;
	}

}
