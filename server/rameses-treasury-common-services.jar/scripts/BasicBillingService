import com.rameses.annotations.*;

import treasury.utils.*;
import treasury.facts.*;
import enterprise.utils.*;
import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import java.util.*;
import com.rameses.rules.common.RuleExecutionContext;

class BasicBillingService {

	@Service('BasicBillingHandler')
	def handler;

	@Service('BillingRuleService')
	def ruleSvc;

	@ProxyMethod
	public def getCashReceiptInfo( pp ) { 
		if ( pp.options == null ) pp.options = [:];

		pp.options.include_items = true; 
		def bill = getBillingInfo( pp ); 

		if( !pp.txntype ) pp.txntype = pp.params?.collectiontype.handler;
		
		def rctinfo = handler.formatReceiptInfo( pp, bill ); 
		bill.putAll( rctinfo ); 
		bill.remove('objid');	//we should remove objid bec. there might be conflicts 
		bill._postpayment = true; //we should mark this to indicate posting will be automatically handled
		return bill; 
	}

	@ProxyMethod
	public def getBillingInfo( pp ) { 
		if( !pp.rulename ) throw new Exception("BasicBillingService error. rulename is required");
		if( !pp.params ) throw new Exception("BasicBillingService error. params is required");

		def opt = pp.options;

		def bill = handler.getHeaderInfo( pp ); 
		def billitems = handler.getBillItems( pp, bill ); 

		if ( !pp.options?.include_credit.toString().equals('false') ) {
			def citems = handler.getCreditItems( pp, bill ); 
			if ( citems ) { 
				citems.each{ it.txntype = 'creditpayment' } 
				billitems.addAll( citems ); 
			} 
		}

		/*
		def startgroup = "billing";
		if( pp.startgroup ) startgroup = pp.startgroup; 
		*/

		def rp = [:]
		rp.putAll( pp );
		rp.putAll( pp.params );
		rp.putAll( bill );
		rp.billitems = billitems;

		def req = [rulename: pp.rulename, params: rp ];
		if(opt) req.putAll( opt );
 		
		def res = ruleSvc.execute( req ); 
		
		bill.putAll( res ); 
		return bill;
	}

}
