import com.rameses.annotations.*;

import java.rmi.server.UID;
import com.rameses.util.*;
import vehicle.facts.*;
import treasury.utils.*;
import treasury.facts.*;

class BillingCapturePaymentService {

	@Service("SingleBillingHandler")
	def self;

	@Service("SingleBillingService")
	def billingSvc;

	@Service("PaymentPostingService")
	def service;


	@PersistenceContext
	def db;

	@ProxyMethod
	public def getInfo( def p ) {
		if(!p.txntype) throw new Exception("txntype handler is required in BillingCapturePaymentService.getInfo");
		if(!p.rulename ) throw new Exception("rulename is required in BillingCapturePaymentService");
		if(!p.id && !p.objid) throw new Exception("txnid or objid is required in BillingCapturePaymentService.getInfo");	

		def pp = [:];
		pp.txntype = p.remove("txntype");
		pp.rulename = p.remove("rulename");
		pp.params = [:];
		pp.params.putAll( p );

		def pi = billingSvc.execute( pp );
		if(!pi.txntype) pi.txntype = pp.txntype;
		return getItems( pi );
	}


	@ProxyMethod
	public def getItems( def p ) {
		if( !p.billitems )
			throw new Exception("BillingCapturePaymentService error. billitems is required "  );

		p.collectiontype = [ handler: p.txntype ];	
		p.billitems = p.billitems.findAll{ it.txntype==null || !it.txntype.toLowerCase().matches('discount|surcharge|interest')  };


		//get also the payment info. This will instruct the PostPaymentService regarding how to update the ledger
		def payInfo = self.getPostPaymentInfo(  p );
		if(!payInfo) throw new Exception("Please override the getPostPaymentInfo method in BilliongHandler")

		if( !payInfo.parentschemaname )
			throw new Exception("CashReceiptBillingService.getItems getPostPaymentInfo error parentschemaname is required");	
		if( !payInfo.items  )
			throw new Exception("CashReceiptBillingService.getItems getPostPaymentInfo error items is required");
		payInfo.billitems.each {
			if(!it.item?.objid) throw new Exception( "CashReceiptBillingService.getItems getPostPaymentInfo error. item.objid is required in each item" );
			if( !it.txntype?.matches('credit|misc')) {
				if(!it.reftype ) throw new Exception( "CashReceiptBillingService.getItems error. getPostPaymentInfo reftype  is required in " + it.item.title );
			}
		}
		payInfo.amount = p.amount;
		payInfo.each { k,v->
			if(!k.matches("items")) p.put(k,v);
		}
		return p;
	}
	
	def findPaymentSchema( def receipt ) {
		def pmtName = receipt.collectiontype?.handler + "_payment";
		def schema = null; 
		try { schema = db.schemaManager.getElement( pmtName ); } catch(ign) {;} 
		if( schema.properties.autopost == "true" ) {
			return schema;
		}	
		else {
			return null;
		}
	}

	@ProxyMethod
	public def post( def pmt ) {

		if(!pmt.txnmode) pmt.txnmode = 'CAPTURE';
		pmt._schemaname = findPaymentSchema( pmt )?.name
		if( !pmt._schemaname ) 
			throw new Exception("_schemaname is required in CashReceipt post payment. Please check if payment schema has an autopost='true'")

		//format the payment references
		service.post( pmt );
	}

}