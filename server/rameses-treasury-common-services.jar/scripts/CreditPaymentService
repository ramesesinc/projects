import com.rameses.annotations.*;

import java.rmi.server.UID;
import com.rameses.util.*;
import vehicle.facts.*;
import treasury.utils.*;
import treasury.facts.*;

/*********************************************************************************************************************************
*  This will create and post bill
*********************************************************************************************************************************/

class CreditPaymentService {

	@Service("SingleBillingHandler")
	def self;

	@Service("SingleBillingService")
	def billingSvc;

	@Service("PaymentPostingService")
	def paymentPostingSvc;

	@DataContext("creditpayment")
	def billEm;

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@Env
	def env;

	@ProxyMethod
	public def post( def pp ) {
		if(!pp.rulename) throw new Exception("rulename is required in parameter of CreditPaymentService.init")
		if(!pp.collectiontype) throw new Exception("collectiontype is required in parameter of CreditPaymentService.init")
		if(!pp.amtpaid )throw new Exception("amtpaid is required in parameter of CreditPaymentService.init")

		pp.include_credits = false;
		pp.include_items = true;

		if( pp.amtpaid < 0 ) pp.amtpaid = pp.amtpaid * -1;

		def rct = billingSvc.execute( pp );	
		rct.collectiontype = pp.collectiontype;
		rct.txnmode = 'ONLINE';
		rct.org = [objid:env.ORGID, name:env.ORGNAME];
		rct.user = [objid: env.USERID, name:env.USER];
		rct.state = 'OPEN';
		rct.controlno = pp.controlno;
		rct.controldate = pp.controldate;
		rct.txndate = pp.controldate;
		rct.txntype = pp.txntype;

		pp.params = rct;
		
		def rct1 = self.formatReceiptInfo( pp );
		rct.putAll( rct1 );
		
		if( !rct.paidby  ) throw new Exception("Paid by is required");
		if( !rct.paidbyaddress ) throw new Exception("Paid by address is required ");
		if(! rct.items ) throw new Exception("items is required ");

		def payInfo = self.getPostPaymentInfo( rct );
		if( payInfo ) {
			if( !payInfo.parentschemaname )
				throw new Exception("BillPostingService.init getPostPaymentInfo error parentschemaname is required");	
			if( !payInfo.items  )
				throw new Exception("BillPostingService.init getPostPaymentInfo error items is required");
			payInfo.items.each {
				if(!it.item?.objid) throw new Exception( "BillPostingService.init getPostPaymentInfo error. item.objid is required in each item" );
				if( it.refid && !it.reftype ) {
					throw new Exception( "BillPostingService.init error. getPostPaymentInfo reftype  is required if refid is specified for " + it.item.title );
				}
			}
			payInfo.reftype = 'creditpayment';
			payInfo.refno = rct.controlno;
			payInfo.refdate = rct.receiptdate;
			payInfo.amount = rct.amount;
			rct._postpayment = payInfo;
		}
		
		return billEm.create( rct );
	}


}