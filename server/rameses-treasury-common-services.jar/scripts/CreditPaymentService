import com.rameses.annotations.*;

import java.rmi.server.UID;
import com.rameses.util.*;
import vehicle.facts.*;
import treasury.utils.*;
import treasury.facts.*;

/*********************************************************************************************************************************
*  This will create and post bill
*********************************************************************************************************************************/

class CreditPaymentService {

	@Service("BillingInfoHandler")
	def handler;

	@Service("BillingCashReceiptService")
	def billingCashReceiptSvc;

	@Service("PaymentPostingService")
	def paymentPostingSvc;

	@DataContext("creditpayment")
	def billEm;

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@Env
	def env;

	@ProxyMethod
	public def init( def pp ) {
		if(!pp.rulename) throw new Exception("rulename is required in parameter of CreditPaymentService.init")
		if(!pp.txntype) throw new Exception("txntype is required in parameter of CreditPaymentService.init")

		if ( pp.options == null ) pp.options = [:]; 

		pp.options.request_action = "creditpayment";
		pp.options.include_credit = false; 
		pp.options.returns_credit = true; 

		def rct = billingCashReceiptSvc.getInfo( pp );
		if ( !rct.creditpayments ) throw new Exception('There are no credit items found'); 

		rct.objid = 'CP' + new java.rmi.server.UID();
		rct.org = [ objid:env.ORGID, name:env.ORGNAME ];
		rct.user = [ objid: env.USERID, name:env.USER ];
		rct.txntype = pp.txntype;
		rct.txnmode = 'ONLINE';
		rct.state = 'OPEN';
		return rct; 	
	} 

	@ProxyMethod
	public def post( def rct ) { 
		if ( !rct.controlno ) {
			def year = dateSvc.getServerYear();
			rct.controlno = 'CRP'+ year.toString() + seqSvc.getNextFormattedSeries('CreditPayment'+ year.toString());
		}

		if ( !rct.controldate ) {
			rct.controldate = dateSvc.getBasicServerDate();  
		}
		rct.txndate = dateSvc.getServerDate();
		return billEm.create( rct );
	}
}