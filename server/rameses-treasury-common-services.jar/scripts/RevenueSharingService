import com.rameses.annotations.*;
import com.rameses.rules.common.*;
import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*;
import treasury.facts.*;
import treasury.actions.*;
import treasury.utils.*;
import enterprise.facts.Org;


class RevenueSharingService  {

	@Service("RuleExecutorService")
	def ruleSvc;

	@DataContext('sys_org') 
	def sys_org;

	@ProxyMethod
	public def execute( def rct ) {
		def ruleFact = new FactBuilder();
		ruleFact.facts << new CashReceipt( orgid: rct.org?.objid, receiptdate: rct.receiptdate ); 

		def org = sys_org.find([ objid: rct.org.objid ]).first(); 
		ruleFact.facts << new Org( orgid: org.objid, type: org.orgclass, root: (org.root==1)); 
		def facts = ruleFact.facts;

		ruleFact.addBillItems( rct.items );

		def ctx = RuleExecutionContext.currentContext;
		if( ctx == null ) { ctx = new RuleExecutionContext(facts); };
		if(!ctx.env.acctUtil) ctx.env.acctUtil = new ItemAccountUtil();

		ruleSvc.execute( "revenuesharing", facts, null, null );
		
		def resultList = [];
		def shareList = facts.findAll{ it instanceof RevenueShare };
		shareList.each {
			resultList << it.toMap();
		}

		return resultList;
	}



}
