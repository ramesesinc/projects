import com.rameses.annotations.*;

import treasury.utils.*;
import treasury.facts.*;
import enterprise.utils.*;
import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import java.util.*;
import com.rameses.rules.common.RuleExecutionContext;

public class BillingReceiptInterceptor {
	
	@Service("PaymentPostingService")
	def service;

	@Service("SingleBillingHandler")
	def billingHandler;

	@DataContext(dynamic=true)
	def pmtEm;

	@PersistenceContext
	def db;

	def findPaymentSchema( def receipt ) {
		def pmtName = receipt.collectiontype?.handler + "_payment";
		def schema = null; 
		try { schema = db.schemaManager.getElement( pmtName ); } catch(ign) {;} 
		if ( !schema ) return null; 
		
		if( schema.properties.autopost == "true" ) {
			return schema;
		}	
		else {
			return null;
		}
	}

	@After(pattern="(Cash|Noncash)ReceiptService.post|BillingCapturePaymentService.post", eval="#{ args[0]._postpayment !=null  }",  index=50)
	public void postPayment(def evt) {
		def e = evt.args[0];
		def result = evt.result;
		def pmt = e._postpayment;

		pmt._schemaname = findPaymentSchema( result )?.name
		if( !pmt._schemaname ) 
			throw new Exception("_schemaname is required in CashReceipt post payment. Please check if payment schema has an autopost='true'")

		//format the payment references
		pmt.reftype = pmt.reftype;
		if(!pmt.reftype) pmt.reftype = "cashreceipt";
		pmt.refno = result.receiptno;
		pmt.refdate = result.receiptdate;
		pmt.refid = result.objid;
		pmt.txndate = result.txndate;
		pmt.txnmode = e.txnmode;
		pmt.collectiontype = result.collectiontype;
		service.post( pmt );
	}

	@After(pattern="CashReceiptVoidService.post")
	public void voidPayment(def evt) {
		def e = evt.args[0];
		def res= evt.result;
		def rct = res.receipt;

		//find first if theres a payment schema that is autopost
		def schema = findPaymentSchema( rct );
		if( !schema ) return;

		def pmtDb = pmtEm.lookup( schema.name );
		def pmt = pmtDb.find( [refid: rct.objid] ).first(1);
		pmt._schemaname = schema.name;
		pmt.collectiontype = rct.collectiontype;
		service.reversePayment( pmt );
	}



}