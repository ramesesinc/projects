import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

public class RPTISMunicipalityTestCancelFAASService
{
    @Env 
    def env 

    @ActiveDB('rptis_test')
    def em 

    @Service('RPTISUnitTestService')
    def test

    @Service('RPTISTestFAASDataService')
    def dataSvc

    @Service('RPTISTestHelperService')
    def helper 

    @Service('DateService')
    def dtSvc 


    @Service('FAASService')
    def faasSvc

    @Service('CancelledFAASService')
    def cancelledSvc 

    @Service('CancelledFAASWorkflowService')
    def workflowSvc    

    @Service('ExaminationService')
    def examSvc 

    @DataContext('faas')
    def faasDb

    @DataContext('faas_list')
    def faaslistDb

    @DataContext('rptledger')
    def rptledgerDb    


    @ProxyMethod
    public def initCancelFaas(faas) {
        def txntype = faasSvc.getTxnType('CTD')
        def info = [
            objid       : 'CTD' + new java.rmi.server.UID(),
            txntype     : txntype,
            attributes  : faasSvc.getTxnTypeAttributes(txntype),
            faas        : faasSvc.openFaas(faas),
            online      : true
        ]

        return cancelledSvc.initCancelledFaas(info)
    }


    @ProxyMethod
    public def testApprovedCancelledFaas( cancelledfaas ) {
        cancelledfaas = cancelledSvc.openCancelledFaas(cancelledfaas)
        test.testEqual('cancelledfaas.state', cancelledfaas.state, 'APPROVED')

        def faas = faasDb.select('state').find([objid:cancelledfaas.faasid]).first()
        test.testNotNull('faas', faas)
        test.testEqual('faas.state', faas.state, 'CANCELLED')

        def faaslist = faaslistDb.find([objid:cancelledfaas.faasid]).first();
        if(faaslist){
            test.testEqual('faaslist.state', faaslist.state, 'CANCELLED')
            test.testNotNull('faaslist.cancelreason', faaslist.cancelreason)
        }

        def rptledger = rptledgerDb.select('state').find([faasid:faas.objid]).first()
        if (rptledger){
            test.testEqual('rptledger.state', rptledger.state, 'APPROVED')
        }
        return '[municipality] Cancelled FAAS approval tested.'
    }






    @ProxyMethod
    public def assignToMe( task ) {
        return helper.signal(workflowSvc, task, null, true)    
    }

    @ProxyMethod
    public def doReceive(task){
        //task += assignToMe(task)
        helper.openTask(workflowSvc, task)
        def cancelledfaas = task.data 
        cancelledfaas.reason = cancelledSvc.getCancelReasons().first()
        cancelledfaas.lasttaxyear = dtSvc.serverYear
        cancelledfaas.remarks = 'Cancellation Test.'
        cancelledSvc.updateCancelledFaas(cancelledfaas)
        em.setRequirementsAsComplied(cancelledfaas)
        return helper.signal(workflowSvc, task, 'submit', false)
    }


    @ProxyMethod
    public def doExamination(task){
        task += assignToMe(task)
        helper.openTask(workflowSvc, task)
        def finding = dataSvc.createExaminationFinding(task.data)
        examSvc.create(finding)
        return helper.signal(workflowSvc, task, 'submit', false)
    }    

    @ProxyMethod
    public def doTaxmapping(task){
        return helper.doTaxmapping(workflowSvc, task)
    }    

    @ProxyMethod
    public def doTaxmappingApproval(task){
        return helper.doTaxmappingApproval(workflowSvc, task)
    }    

    @ProxyMethod
    public def doRecommender(task){
        return helper.doRecommender(workflowSvc, task)
    }    

    @ProxyMethod
    public def doRecommenderSubmitToProvince(task){
        return helper.doRecommenderSubmitToProvince(workflowSvc, task)
    }    

    @ProxyMethod
    public def doApprover(task){
        return helper.doApprover(workflowSvc, task)
    }    


}