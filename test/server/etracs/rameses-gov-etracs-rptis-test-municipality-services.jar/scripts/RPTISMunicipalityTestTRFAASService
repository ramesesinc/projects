import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

public class RPTISMunicipalityTestTRFAASService
{
    @Env 
    def env 

    @ActiveDB('rptis_test')
    def em 

    @Service('RPTISUnitTestService')
    def test

    @Service('RPTISTestFAASDataService')
    def dataSvc

    @Service('RPTISTestHelperService')
    def helper 

    @Service('RPTISTestFAASService')
    def faasTestSvc


    @Service('FAASService')
    def faasSvc 

    @Service('FAASWorkflowService')
    def workflowSvc    

    @Service('ExaminationService')
    def examSvc 

    @Service('EntityLookupService')
    def entityLookup

    @Service('RPTLedgerService')
    def ledgerSvc 


    @ProxyMethod
    public def createSimpleTransferFaas(faas) {
        def txntype = faasSvc.getTxnType('TR')
        def info = [
            txntype     : txntype,
            attributes  : faasSvc.getTxnTypeAttributes(txntype),
            faas        : faasSvc.openFaas(faas)
        ]
        return faasSvc.initOnlineTransaction(info)
    }


    @ProxyMethod
    public def assignToMe( task ) {
        return helper.signal(workflowSvc, task, null, true)    
    }

    @ProxyMethod
    public def doReceive(task){
        //task += assignToMe(task)
        helper.openTask(workflowSvc, task)
        println 'task.obid -> ' + task.objid + '  data.obid -> ' + task.data?.objid 
        def faas = task.data 
        def taxpayer = entityLookup.getList([searchtext:'b']).first()
        taxpayer.address = taxpayer.address.text 
        faas.taxpayer = taxpayer
        faas.owner = [name:faas.taxpayer.name, address: faas.taxpayer.address]
        faas.memoranda = 'TRANSFER TEST'
        faasSvc.updateFaas(faas)
        em.setRequirementsAsComplied(faas)
        return helper.signal(workflowSvc, task, 'submit', false)
    }


    @ProxyMethod
    public def doExamination(task){
        task += assignToMe(task)
        helper.openTask(workflowSvc, task)
        def finding = dataSvc.createExaminationFinding(task.data)
        examSvc.create(finding)
        return helper.signal(workflowSvc, task, 'submit', false)
    }    

    @ProxyMethod
    public def doTaxmapping(task){
        return helper.doTaxmapping(workflowSvc, task)
    }    

    @ProxyMethod
    public def doTaxmappingApproval(task){
        return helper.doTaxmappingApproval(workflowSvc, task)
    }    

    @ProxyMethod
    public def doAppraisal(task){
        return helper.doAppraisal(workflowSvc, task)
    }    

    @ProxyMethod
    public def doAppraisalApproval(task){
        return helper.doAppraisalApproval(workflowSvc, task)
    }    

    @ProxyMethod
    public def doRecommender(task){
        return helper.doRecommender(workflowSvc, task)
    }    

    @ProxyMethod
    public def doRecommenderSubmitToProvince(task){
        return helper.doRecommenderSubmitToProvince(workflowSvc, task)
    }    

    @ProxyMethod
    public def doApprover(task){
        return helper.doApprover(workflowSvc, task)
    }    


    @ProxyMethod
    public def testApprovedTransfer(faas){
        faas += faasSvc.openFaas(faas)
        faasTestSvc.testApprovedFaas(faas)
        return '[municipality] Approved Simple Transfer FAAS tested.'
    }

    @ProxyMethod
    public def testApprovedLedgerFromFaas(faas){
        faas += faasSvc.openFaas(faas)
        faasTestSvc.testApprovedLedgerFromFaas(faas)
        return '[municipality] Approved Simple Transfer Ledger tested.'
    }


    @ProxyMethod
    public def testSubmittedToProvinceOnlineFaas(trfaas){
        trfaas += faasSvc.openFaas(trfaas)
        test.testEqual('trfaas.state', trfaas.state, 'INTERIM')
        test.testEqual('trfaas.taskstate', trfaas.taskstate, 'provapprover')
    }


}