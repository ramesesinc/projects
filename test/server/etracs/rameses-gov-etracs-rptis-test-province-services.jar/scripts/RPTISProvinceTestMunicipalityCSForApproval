import com.rameses.annotations.*
import com.rameses.util.*
import java.rmi.server.*
import com.rameses.services.extended.*

/*
* APPROVE and TEST Transferred FAAS from Municipality
*/
public class RPTISProvinceTestMunicipalityCSForApproval
{
	@Env 
    def env 

    @ActiveDB('rptis_test')
    def em 

    @Service('RPTISUnitTestService')
    def test

    @Service('RPTISTestFAASDataService')
    def dataSvc

    @Service('RPTISTestHelperService')
    def helper 

    @Service('RPTISTestFAASService')
    def faasTestSvc


    @Service('ConsolidationService')
    def consolidationSvc

    @Service('FAASService')
    def faasSvc 

    @Service('ConsolidationWorkflowService')
    def workflowSvc    

    @Service('ExaminationService')
    def examSvc 

    @Service('EntityLookupService')
    def entityLookup

    @Service('RPTLedgerService')
    def ledgerSvc 

    @Service('RPTISTestConsolidationService')
    def consolidationTestSvc 

    


    @ProxyMethod
    public def openConsolidation( consolidation ) {
        return consolidationSvc.openConsolidation(consolidation.objid)    
    }

    
    @ProxyMethod
    public void approveConsolidation( task ) {
        helper.openTask(workflowSvc, task)
        def consolidation = task.data 

        consolidation += consolidationSvc.openConsolidation(consolidation.objid)
        consolidationSvc.initApproveConsolidation(consolidation)
        consolidation += consolidationSvc.assignNewTdNos(consolidation)
        consolidation += consolidationSvc.approveConsolidatedLandFaas(consolidation)
        consolidationSvc.getAffectedRpusForApproval(consolidation.objid).each{ arpu ->
            consolidationSvc.approveAffectedRpuFaasRecord(consolidation, arpu)
        }
        consolidation.state = 'APPROVED'
        consolidationSvc.approveConsolidation(consolidation)
        helper.signal(workflowSvc, task, 'completed', false)
    }

    
    @ProxyMethod
    public def testSubmittedConsolidationForApproval( consolidation, municonsolidation ) {
        consolidation += consolidationSvc.openConsolidation(consolidation.objid)
        test.testEqual('consolidation.state', consolidation.state, 'FORAPPROVAL')

        consolidation += consolidationTestSvc.getConsolidationForTesting(consolidation)
        test.testEqual('consolidation.affectedrpus', municonsolidation.affectedrpus.size(), consolidation.affectedrpus.size())
        test.testEqual('consolidation.tasks', municonsolidation.tasks.size(), consolidation.tasks.size())
        test.testEqual('consolidation.requirements', municonsolidation.requirements.size(), consolidation.requirements.size())
        test.testEqual('consolidation.faases', municonsolidation.faases.size(), consolidation.faases.size())
        return '[province] Submitted consolidation for province approval tested.'
    }


    @ProxyMethod
    public def testApprovedConsolidation( consolidation ) {
        consolidationTestSvc.testApprovedConsolidation(consolidation)
        return '[province] Approved consolidation tested.'
    }





    /*==========================================================
    * WORKFLOW SUPPORT
    ===========================================================*/

    @ProxyMethod
    public def assignToMe( task ) {
        return helper.signal(workflowSvc, task, null, true)    
    }

    @ProxyMethod
    public def doReceive(task){
        task += assignToMe(task)
        helper.openTask(workflowSvc, task)
        return helper.signal(workflowSvc, task, 'submit', false)
    }


    @ProxyMethod
    public def doExamination(task){
        task += assignToMe(task)
        return helper.signal(workflowSvc, task, 'submit', false)
    }    

    @ProxyMethod
    public def doTaxmapping(task){
        return helper.doTaxmapping(workflowSvc, task)
    }    

    @ProxyMethod
    public def doTaxmappingApproval(task){
        return helper.doTaxmappingApproval(workflowSvc, task)
    }    

    @ProxyMethod
    public def doAppraisal(task){
        return helper.doAppraisal(workflowSvc, task)
    }    

    @ProxyMethod
    public def doAppraisalApproval(task){
        return helper.doAppraisalApproval(workflowSvc, task)
    }    

    @ProxyMethod
    public def doRecommender(task){
        return helper.doRecommender(workflowSvc, task)
    }    

    @ProxyMethod
    public def doApprover(task){
        return helper.doApprover(workflowSvc, task)
    }    


    @ProxyMethod
    public def testApprovedTransfer(faas){
        faas += faasSvc.openFaas(faas)
        faasTestSvc.testApprovedFaas(faas)
        return '[municipality] Approved Simple Transfer FAAS tested.'
    }

    @ProxyMethod
    public def testApprovedLedgerFromFaas(faas){
        faas += faasSvc.openFaas(faas)
        faasTestSvc.testApprovedLedgerFromFaas(faas)
        return '[municipality] Approved Simple Transfer Ledger tested.'
    }


    @ProxyMethod
    public def testSubmittedToProvinceOnlineFaas(trfaas){
        trfaas += faasSvc.openFaas(trfaas)
        test.testEqual('trfaas.state', trfaas.state, 'INTERIM')
        test.testEqual('trfaas.taskstate', trfaas.taskstate, 'provapprover')
    }

}