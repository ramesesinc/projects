import com.rameses.annotations.*
import com.rameses.util.*
import java.rmi.server.*
import com.rameses.services.extended.*

public class RPTISProvinceTestMunicipalityCancelFaasApproval
{
	@Env 
    def env 

    @ActiveDB('rptis_test')
    def em 

    @Service('RPTISUnitTestService')
    def test

    @Service('RPTISTestFAASDataService')
    def dataSvc

    @Service('RPTISTestHelperService')
    def helper 



    @Service('CancelledFAASService')
    def cancelledSvc 

    @Service('CancelledFAASWorkflowService')
    def workflowSvc    

    @Service('ExaminationService')
    def examSvc 
    
    @DataContext('faas')
    def faasDb

    @DataContext('faas_list')
    def faaslistDb

    @DataContext('rptledger')
    def rptledgerDb

    

    @ProxyMethod
    public def openCancelledFaas(cancelledfaas ) {
        return cancelledSvc.openCancelledFaas(cancelledfaas)
    }


    @ProxyMethod
    public def testApprovedCancelledFaas(cancelledfaas) {
        cancelledfaas = openCancelledFaas(cancelledfaas)
        test.testEqual('cancelledfaas.state', cancelledfaas.state, 'APPROVED')

        def faas = faasDb.select('state').find([objid:cancelledfaas.faasid]).first()
        test.testNotNull('faas', faas)
        test.testEqual('faas.state', faas.state, 'CANCELLED')

        def faaslist = faaslistDb.find([objid:cancelledfaas.faasid]).first();
        if(faaslist){
            test.testEqual('faaslist.state', faaslist.state, 'CANCELLED')
            test.testNotNull('faaslist.cancelreason', faaslist.cancelreason)
        }

        def rptledger = rptledgerDb.select('state').find([faasid:faas.objid]).first()
        if (rptledger){
            test.testEqual('rptledger.state', rptledger.state, 'APPROVED')
        }
        return '[province] Cancelled FAAS approval tested.'
    }


    @ProxyMethod
    public def testApprovedTransfer(faas){
        faas += faasSvc.openFaas(faas)
        faasTestSvc.testApprovedFaas(faas)
        return '[municipality] Approved Simple Transfer FAAS tested.'
    }

    @ProxyMethod
    public def testApprovedLedgerFromFaas(faas){
        faas += faasSvc.openFaas(faas)
        faasTestSvc.testApprovedLedgerFromFaas(faas)
        return '[municipality] Approved Simple Transfer Ledger tested.'
    }


    @ProxyMethod
    public def testSubmittedToProvinceOnlineFaas(trfaas){
        trfaas += faasSvc.openFaas(trfaas)
        test.testEqual('trfaas.state', trfaas.state, 'INTERIM')
        test.testEqual('trfaas.taskstate', trfaas.taskstate, 'provapprover')
    }    




    /*==========================================================
    * WORKFLOW SUPPORT
    ===========================================================*/

    @ProxyMethod
    public def assignToMe( task ) {
        return helper.signal(workflowSvc, task, null, true)    
    }

    @ProxyMethod
    public def doReceive(task){
        task += assignToMe(task)
        helper.openTask(workflowSvc, task)
        return helper.signal(workflowSvc, task, 'submit_taxmapper', true)
    }


    @ProxyMethod
    public def doExamination(task){
        task += assignToMe(task)
        return helper.signal(workflowSvc, task, 'submit', true)
    }    

    @ProxyMethod
    public def doTaxmapping(task){
        task += assignToMe(task)
        return helper.signal(workflowSvc, task, 'submit', true)
    }    

    @ProxyMethod
    public def doTaxmappingApproval(task){
        task += assignToMe(task)
        return helper.signal(workflowSvc, task, 'submit', true)
    }    

    @ProxyMethod
    public def doRecommender(task){
        task += assignToMe(task)
        return helper.signal(workflowSvc, task, 'submit_approver', true)
    }    

    @ProxyMethod
    public def doApprover(task){
        task += assignToMe(task)
        return helper.signal(workflowSvc, task, 'approve', true)
    }    


}