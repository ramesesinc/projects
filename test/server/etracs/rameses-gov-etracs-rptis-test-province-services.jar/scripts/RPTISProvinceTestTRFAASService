import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

/*
* Test a Simple Transfer FAAS created and approved from the Province
*/
public class RPTISProvinceTestTRFAASService
{
    @Env 
    def env 

    @ActiveDB('rptis_test_faas')
    def em 

    @Service('RPTISUnitTestService')
    def test

    @Service('RPTISTestFAASDataService')
    def dataSvc

    @Service('RPTISTestHelperService')
    def helper 


    @Service('FAASService')
    def faasSvc 

    @Service('FAASWorkflowService')
    def workflowSvc    

    @Service('ExaminationService')
    def examSvc 

    @Service('EntityLookupService')
    def entityLookup

    @Service('RPTLedgerService')
    def ledgerSvc 


    @ProxyMethod
    public void postProvinceLedger(faas) {
        def ledger = em.findLedgerByFaasId(faas)
        if (!ledger){
            faas += faasSvc.openFaas(faas)
            ledger = ledgerSvc.postNewLedger(faas)
        }
        if (ledger.state == 'PENDING'){
            ledgerSvc.approveLedger(ledger)
            em.fullyPaidLedger(ledger)
        }
    }

    @ProxyMethod
    public def createSimpleTransferFaas(faas) {
        def txntype = faasSvc.getTxnType('TR')
        def info = [
            txntype     : txntype,
            attributes  : faasSvc.getTxnTypeAttributes(txntype),
            faas        : faasSvc.openFaas(faas)
        ]
        return faasSvc.initOnlineTransaction(info)
    }


    @ProxyMethod
    public def assignToMe( task ) {
        return helper.signal(workflowSvc, task, null, true)    
    }

    @ProxyMethod
    public def doReceive(task){
        task += assignToMe(task)
        helper.openTask(workflowSvc, task)
        def faas = task.data 
        def taxpayer = entityLookup.getList([searchtext:'b']).first()
        taxpayer.address = taxpayer.address.text 
        faas.taxpayer = taxpayer
        faas.owner = [name:faas.taxpayer.name, address: faas.taxpayer.address]
        faas.memoranda = 'TRANSFER TEST'
        faasSvc.updateFaas(faas)
        em.setRequirementsAsComplied(faas)
        return helper.signal(workflowSvc, task, 'submit_examiner', false)
    }


    @ProxyMethod
    public def doExamination(task){
        task += assignToMe(task)
        helper.openTask(workflowSvc, task)
        def finding = dataSvc.createExaminationFinding(task.data)
        examSvc.create(finding)
        return helper.signal(workflowSvc, task, 'submit', false)
    }    

    @ProxyMethod
    public def doTaxmapping(task){
        return helper.doTaxmapping(workflowSvc, task)
    }    

    @ProxyMethod
    public def doTaxmappingApproval(task){
        return helper.doTaxmappingApproval(workflowSvc, task)
    }    

    @ProxyMethod
    public def doAppraisal(task){
        return helper.doAppraisal(workflowSvc, task)
    }    

    @ProxyMethod
    public def doAppraisalApproval(task){
        return helper.doAppraisalApproval(workflowSvc, task)
    }    

    @ProxyMethod
    public def doRecommender(task){
        return helper.doRecommender(workflowSvc, task)
    }    

    @ProxyMethod
    public def doApprover(task){
        return helper.doApprover(workflowSvc, task)
    }    


}