import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*


public class RPTISTestHelperService
{
    @ActiveDB('rptis_test_faas')
    def em

    @ProxyMethod
    public def findFaas( faas ) {
        em.findFaasById(faas)    
    }

    @ProxyMethod
    public def getCurrentTask(faas) {
        def task = em.findCurrentTask(faas)
        if (!task)
            throw new Exception('Cannot open Task for ' + faas + '.')
        return task
    }    

    @ProxyMethod
    public def getCurrentTaskFromPrevFaas(faas) {
        def newfaas = em.findNewFaasId(faas)
        def task = em.findCurrentTask(newfaas)
        if (!task)
            throw new Exception('Cannot open Task for ' + faas + '.')
        return task
    }    

    @ProxyMethod
    public def assignToMe( workflowSvc, task ) {
        return signal(workflowSvc, task, null, false)    
    }


    @ProxyMethod
    public def doReceive(workflowSvc, task){
        openTask(workflowSvc, task)
        return signal(workflowSvc, task, 'submit', true)
    }

    @ProxyMethod
    public def doExamination(workflowSvc, task){
        task.putAll(assignToMe(workflowSvc , task))
        return signal(workflowSvc, task, 'submit', true)
    }

    @ProxyMethod
    public def doTaxmapping(workflowSvc, task){
        task.putAll(assignToMe(workflowSvc, task))
        return signal(workflowSvc, task, 'submit', true)
    }

    @ProxyMethod
    public def doTaxmappingApproval(workflowSvc, task){
        task.putAll(assignToMe(workflowSvc, task))
        return signal(workflowSvc, task, 'submit', true)
    }    


    @ProxyMethod
    public def doAppraisal(workflowSvc, task){
        task.putAll(assignToMe(workflowSvc, task))
        return signal(workflowSvc, task, 'submit', true)
    }   

    @ProxyMethod
    public def doAppraisalApproval(workflowSvc, task){
        task.putAll(assignToMe(workflowSvc, task))
        return signal(workflowSvc, task, 'submit', true)
    }    

    @ProxyMethod
    public def doRecommender(workflowSvc, task){
        task.putAll(assignToMe(workflowSvc, task))
        return signal(workflowSvc, task, 'submit_approver', true)
    }   

    @ProxyMethod
    public def doRecommenderSubmitToProvince(workflowSvc, task){
        task.putAll(assignToMe(workflowSvc, task))
        return signal(workflowSvc, task, 'submit_to_province', true)
    }  

    @ProxyMethod
    public def doApprover(workflowSvc, task){
        task.putAll(assignToMe(workflowSvc, task))
        return signal(workflowSvc, task, 'approve', true)
    }   



    @ProxyMethod
    public void openTask(workflowSvc, task){
        setTaskRequiredInfo(task)
        task.putAll( workflowSvc.openTask(task) )
        task.taskid = task.data.taskid  
        task.refid = task.data.objid 
    }

    @ProxyMethod
    public def signal(workflowSvc, task, action, isopen){
        if (isopen)
            openTask(workflowSvc, task)

        setTaskRequiredInfo(task)
        if (action) 
            task.action = action

        task = workflowSvc.signal(task).task
        if (task)
            task.taskid = task.objid 
        return task;
    }

    @ProxyMethod
    public void setTaskRequiredInfo(task){
        if (!task.taskid) task.taskid = task.objid 
        if (!task.taskid) task.taskid = task.data?.taskid 
        if (!task.taskid) throw new Exception('Task ID is required.')
    }

}
