
import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

public class RPTISTestSubdivisionService
{
	@Env 
	def env 

	@ActiveDB('rptis_test')
	def em 

	@Service('SubdivisionService')
	def subdivisionSvc 

	@Service('RPTISTestFAASService')
	def faasTestSvc 

    @Service('RPTISTestLedgerService')
    def ledgerTestSvc


	
	@Service('RPTISUnitTestService')
	def test

    @Service('RPTRequirementService')
    def reqSvc 

    @Service('FAASService')
    def faasSvc 





	@ProxyMethod
    public def getSubdivisionForTesting( subdivision ) {
        subdivision += subdivisionSvc.openSubdivision(subdivision.objid)    
        subdivision.motherlands = subdivisionSvc.getMotherLands(subdivision)
        subdivision.subdividedlands = subdivisionSvc.getSubdividedLands(subdivision.objid)
        subdivision.affectedrpus = subdivisionSvc.getAffectedRpus(subdivision.objid)
        subdivision.tasks = subdivisionSvc.getTasks(subdivision)
        subdivision.requirements = reqSvc.getRequirements(subdivision.objid)

        subdivision.faases = []
        subdivision.subdividedlands.each{
            subdivision.faases << faasSvc.openFaas([objid:it.newfaasid])
        }
        subdivision.affectedrpus.each{
            subdivision.faases << faasSvc.openFaas([objid:it.newfaasid])
        }
        return subdivision
    }


	@ProxyMethod
	public def testApprovedSubdivision( subdivision ) {
		subdivision += subdivisionSvc.openSubdivision(subdivision.objid)    
        test.testEqual('subdivision.state', subdivision.state, 'APPROVED')

        def tasks = em.getSubdivisionTasks(subdivision)
		test.testNotEmpty('subdivision.tasks', tasks)
		def opentasks = tasks.findAll{it.enddate == null}
		test.testEmpty('subdivision.opentasks', opentasks)
		def approvertask = tasks.find{it.state == 'approver'}
		test.testNotNull('subdivision.approvertask', approvertask)

        def faas = null;
        subdivisionSvc.getMotherLands(subdivision).each{
        	faas = [objid:it.landfaasid]
        	faasTestSvc.testCancelledFaas(faas)
        }

        subdivisionSvc.getSubdividedLands(subdivision.objid).each{
        	faas = faasSvc.openFaas([objid:it.newfaasid])
        	faasTestSvc.testApprovedFaas(faas)
        }
        subdivisionSvc.getAffectedRpus(subdivision.objid).each{
        	faas = faasSvc.openFaas([objid:it.newfaasid])
        	faasTestSvc.testApprovedFaas(faas)	
        }
        return '[province] Approved subdivision tested.'
	
	}

}